[{"path":"https://inseefrlab.github.io/rtauargus/articles/auto_metadata.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Automatic analysis of metadata","text":"using functions produce safe tables, necessary analyze tables need protected. Indeed, disseminated tables differ tables protected. explained detail Chapter 3 Manuel de protection des tableaux. phase analyzing common margins different tables can complex. Therefore, functions developed rtauargus facilitate work.","code":""},{"path":[]},{"path":"https://inseefrlab.github.io/rtauargus/articles/auto_metadata.html","id":"creating-metadata","dir":"Articles","previous_headings":"How Does Automatic Metadata Analysis Work?","what":"Creating Metadata","title":"Automatic analysis of metadata","text":"Metadata must adhere specific format. line represents table, table, following must specified: table_name : name table ; field : field (often, geographical area, studied population, year data collection) ; hrc_field : whether hierarchical link field another field. hierarchical link, field NA. hierarchical link exists, name must given link name must written tables ; indicator : table’s indicator name. name variable counted cell table. example, table presents turnover companies, variable likely “Turnover”. best use variable name described data; hrc_indicator : whether hierarchical link indicator another indicator. hierarchical link, field NA. hierarchical link exists, name must given link name must written tables; spanning_1 : name first cross-tabulation (spanning) variable. Additional columns added cross-tabulation variable, following naming convention: spanning_1, spanning_2, spanning_3, etc ; hrc_spanning_1 : whether hierarchical link cross-tabulation variable another cross-tabulation variable. hierarchical link, field NA. hierarchical link exists, name must given link name must written tables. Additional columns added cross-tabulation variable, following naming convention: hrc_spanning_1, hrc_spanning_2, hrc_spanning_3, etc. Note: must many spanning_X columns hrc_spanning_X columns.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/auto_metadata.html","id":"formatted-input-eurostat-templates","dir":"Articles","previous_headings":"How Does Automatic Metadata Analysis Work?","what":"Formatted Input: Eurostat Templates","title":"Automatic analysis of metadata","text":"tables processed Eurostat tables, metadata file can automatically created template published cells. Indeed, Eurostat publications, National Statistical Institutes (NSIs) must provide template groups published cells. , essential understand column template. Determine one whether response variable/indicator, cross-tabulation variable, field, order specify arguments function . particularly important verify template adheres following: one cross-tabulation variable = one column template, thus one supertotal. Indeed, column groups multiple cross-tabulation variables, many columns cross-tabulation variables must created.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/auto_metadata.html","id":"the-arguments-of-analyse_metadata","dir":"Articles","previous_headings":"How Does Automatic Metadata Analysis Work?","what":"The Arguments of analyse_metadata","title":"Automatic analysis of metadata","text":"function arguments follows: df_metadata: dataframe structured specified section . verbose: variable type logical. TRUE function returns list different steps analysis; FALSE, returns final dataframe cluster indicator.","code":"args(analyse_metadata) ## function (df_metadata, verbose = FALSE)  ## NULL"},{"path":"https://inseefrlab.github.io/rtauargus/articles/auto_metadata.html","id":"the-arguments-of-format_template","dir":"Articles","previous_headings":"How Does Automatic Metadata Analysis Work?","what":"The Arguments of format_template","title":"Automatic analysis of metadata","text":"Les arguments de la fonction sont les suivants : data : dataframe du template Eurostat contenant toutes les cellules publiées. indicator_column : nom de la colonne dans laquelle se trouvent les indicateurs. spanning_var_tot : liste nommée des variables de croisements et de leurs totaux. field_columns : vecteur de toutes les colonnes représentant des champs (ex : millésime).","code":"args(format_template) ## function (data, indicator_column, spanning_var_tot, field_columns)  ## NULL"},{"path":[]},{"path":"https://inseefrlab.github.io/rtauargus/articles/auto_metadata.html","id":"case-where-the-input-is-metadata","dir":"Articles","previous_headings":"Examples","what":"Case Where the Input is Metadata","title":"Automatic analysis of metadata","text":"example, start metadata file presenting 12 tables published turnover pizza salad sales. Example code: output dataframe showing process tables applying secret. 12 tables published, sufficient protect 4 tables. tables distributed across two different clusters. Therefore, tab_multi_manager() needs called twice. new spanning variable appeared HRC_LETTUCE^h. variable takes 3 values batavia, arugula lettuce margin. indicator LETTUCE refers turnover () salad sales. example, table T10.T12.T8 presents revenue salad sales based activity category company, well type salad. obtain information metadata analysis, verbose = TRUE argument can specified. way, object returned function list different steps analysis. One finds dataframe cluster indicator df_tab_to_treat. result list format: element list independent cluster tab_to_treat. Additionally, 6 steps analysis included.","code":"str(metadata_pizza_lettuce) ## 'data.frame':    12 obs. of  9 variables: ##  $ table_name    : chr  \"T1\" \"T2\" \"T3\" \"T4\" ... ##  $ field         : chr  \"france_entreprises_2023\" \"france_entreprises_2023\" \"france_entreprises_2023\" \"france_entreprises_2023\" ... ##  $ hrc_field     : logi  NA NA NA NA NA NA ... ##  $ indicator     : chr  \"to_pizza\" \"to_pizza\" \"to_pizza\" \"to_pizza\" ... ##  $ hrc_indicator : chr  NA NA NA NA ... ##  $ spanning_1    : chr  \"nuts2\" \"nuts3\" \"a10\" \"a10\" ... ##  $ hrc_spanning_1: chr  \"hrc_nuts\" \"hrc_nuts\" \"hrc_naf\" \"hrc_naf\" ... ##  $ spanning_2    : chr  \"size\" \"size\" \"nuts2\" \"nuts3\" ... ##  $ hrc_spanning_2: chr  NA NA \"hrc_nuts\" \"hrc_nuts\" ... library(rtauargus)  data(metadata_pizza_lettuce)  # Analyse complète, avec les étapes detailed_analysis <- analyse_metadata(metadata_pizza_lettuce, verbose = TRUE)  # Output simplifié, uniquement le dataframe avec l'indicatrice de cluster cluster_id_dataframe <- analyse_metadata(metadata_pizza_lettuce, verbose = FALSE) cluster_id_dataframe ## # A tibble: 4 x 10 ## # Groups:   table_name [4] ##   cluster        table_name field indicator spanning_1 spanning_2 spanning_3 hrc_spanning_1 hrc_spanning_2 hrc_spanning_3 ##   <chr>          <chr>      <chr> <chr>     <chr>      <chr>      <chr>      <chr>          <chr>          <chr>          ## 1 france_entrep~ T10.T12.T8 fran~ LETTUCE   HRC_NAF    cj         HRC_LETTU~ hrc_naf        <NA>           hrc_lettuce    ## 2 france_entrep~ T11.T7.T9  fran~ LETTUCE   HRC_NAF    size       HRC_LETTU~ hrc_naf        <NA>           hrc_lettuce    ## 3 france_entrep~ T1.T2      fran~ to_pizza  HRC_NUTS   size       <NA>       hrc_nuts       <NA>           <NA>           ## 4 france_entrep~ T3.T4.T5.~ fran~ to_pizza  HRC_NAF    HRC_NUTS   <NA>       hrc_naf        hrc_nuts       <NA> names(detailed_analysis) ## [1] \"identify_hrc\"        \"info_var\"            \"split_in_clusters\"   \"create_edges\"        \"grp_tab_names\"       ## [6] \"grp_tab_in_clusters\" \"tab_to_treat\"        \"df_tab_to_treat\""},{"path":"https://inseefrlab.github.io/rtauargus/articles/auto_metadata.html","id":"case-where-the-input-is-a-eurostat-template","dir":"Articles","previous_headings":"Examples","what":"Case Where the Input is a Eurostat Template","title":"Automatic analysis of metadata","text":"format_template() function allows creating metadata used input analyse_metadata() Eurostat template published cells. 6 tables published. Remark: format_template() construct hrc_indicator column information contained template allow determined. Therefore, one must create based information available indicators. , hierarchical link SAL (employees active companies) SAL_DTH (employees deaths). Next, dataframe used input analysis function. Ultimately, 6 tables process 3 different clusters. words, tab_multi_manager() need called three times.","code":"data(enterprise_template)  str(enterprise_template) ## 'data.frame':    3168 obs. of  5 variables: ##  $ TIME_PERIOD: int  2022 2022 2022 2022 2022 2022 2022 2022 2022 2022 ... ##  $ INDICATOR  : chr  \"SAL\" \"SAL\" \"SAL\" \"SAL\" ... ##  $ ACTIVITY   : chr  \"B\" \"B\" \"B\" \"B\" ... ##  $ NUMBER_EMPL: chr  \"E0\" \"E1T4\" \"E5T9\" \"EGE10\" ... ##  $ LEGAL_FORM : chr  \"_T\" \"_T\" \"_T\" \"_T\" ... template_formatted <- format_template(   data = enterprise_template,   indicator_column = \"INDICATOR\",   spanning_var_tot = list(     ACTIVITY = \"BTSXO_S94\",     NUMBER_EMPL = \"_T\",     LEGAL_FORM = \"_T\"),   field_columns = c(\"TIME_PERIOD\") )  template_formatted$metadata ##             table_name field indicator spanning_1  spanning_2   hrc_spanning_1    hrc_spanning_2 ## 1 table_2021_SAL_DTH_1  2021   SAL_DTH   ACTIVITY  LEGAL_FORM hrc_activity_131  hrc_legal_form_3 ## 2 table_2021_SAL_DTH_2  2021   SAL_DTH   ACTIVITY NUMBER_EMPL hrc_activity_131 hrc_number_empl_4 ## 3     table_2022_SAL_1  2022       SAL   ACTIVITY  LEGAL_FORM hrc_activity_131  hrc_legal_form_3 ## 4     table_2022_SAL_2  2022       SAL   ACTIVITY NUMBER_EMPL hrc_activity_131 hrc_number_empl_4 ## 5 table_2022_SAL_DTH_1  2022   SAL_DTH   ACTIVITY  LEGAL_FORM hrc_activity_131  hrc_legal_form_3 ## 6 table_2022_SAL_DTH_2  2022   SAL_DTH   ACTIVITY NUMBER_EMPL hrc_activity_131 hrc_number_empl_4 # cas où il n'y a aucune hiérarchie sur les indicateurs metadata_template <- template_formatted$metadata %>%   mutate(hrc_indicator = NA) %>%   select(table_name,field,indicator,hrc_indicator, everything())  metadata_template ##             table_name field indicator hrc_indicator spanning_1  spanning_2   hrc_spanning_1    hrc_spanning_2 ## 1 table_2021_SAL_DTH_1  2021   SAL_DTH            NA   ACTIVITY  LEGAL_FORM hrc_activity_131  hrc_legal_form_3 ## 2 table_2021_SAL_DTH_2  2021   SAL_DTH            NA   ACTIVITY NUMBER_EMPL hrc_activity_131 hrc_number_empl_4 ## 3     table_2022_SAL_1  2022       SAL            NA   ACTIVITY  LEGAL_FORM hrc_activity_131  hrc_legal_form_3 ## 4     table_2022_SAL_2  2022       SAL            NA   ACTIVITY NUMBER_EMPL hrc_activity_131 hrc_number_empl_4 ## 5 table_2022_SAL_DTH_1  2022   SAL_DTH            NA   ACTIVITY  LEGAL_FORM hrc_activity_131  hrc_legal_form_3 ## 6 table_2022_SAL_DTH_2  2022   SAL_DTH            NA   ACTIVITY NUMBER_EMPL hrc_activity_131 hrc_number_empl_4 # Analyse complète, avec les étapes detailed_analysis <- analyse_metadata(metadata_template, verbose = TRUE)  # Output simplifié, uniquement le dataframe avec l'indicatrice de cluster cluster_id_dataframe <- analyse_metadata(metadata_template, verbose = FALSE)  # visualisation du résultat de l'analyse cluster_id_dataframe ## # A tibble: 6 x 8 ## # Groups:   table_name [6] ##   cluster      table_name           field indicator spanning_1       spanning_2        hrc_spanning_1   hrc_spanning_2    ##   <chr>        <chr>                <chr> <chr>     <chr>            <chr>             <chr>            <chr>             ## 1 2021.SAL_DTH table_2021_SAL_DTH_1 2021  SAL_DTH   HRC_ACTIVITY_131 HRC_LEGAL_FORM_3  hrc_activity_131 hrc_legal_form_3  ## 2 2021.SAL_DTH table_2021_SAL_DTH_2 2021  SAL_DTH   HRC_ACTIVITY_131 HRC_NUMBER_EMPL_4 hrc_activity_131 hrc_number_empl_4 ## 3 2022.SAL     table_2022_SAL_1     2022  SAL       HRC_ACTIVITY_131 HRC_LEGAL_FORM_3  hrc_activity_131 hrc_legal_form_3  ## 4 2022.SAL     table_2022_SAL_2     2022  SAL       HRC_ACTIVITY_131 HRC_NUMBER_EMPL_4 hrc_activity_131 hrc_number_empl_4 ## 5 2022.SAL_DTH table_2022_SAL_DTH_1 2022  SAL_DTH   HRC_ACTIVITY_131 HRC_LEGAL_FORM_3  hrc_activity_131 hrc_legal_form_3  ## 6 2022.SAL_DTH table_2022_SAL_DTH_2 2022  SAL_DTH   HRC_ACTIVITY_131 HRC_NUMBER_EMPL_4 hrc_activity_131 hrc_number_empl_4"},{"path":"https://inseefrlab.github.io/rtauargus/articles/auto_metadata.html","id":"going-further-visualizing-inclusions","dir":"Articles","previous_headings":"","what":"Going Further: Visualizing Inclusions","title":"Automatic analysis of metadata","text":"create_edges step metadata analysis identifies tables included within tables. example, XXXXX included XXXXX. following code allows visualizing inclusions using graphs better understand analysis procedure.","code":"library(rtauargus) library(igraph) library(visNetwork)  graph_links_tab <- function(list_desc_links){   list_desc_links %>% purrr::imap(function(ss_dem,i){     if(!is.null(ss_dem)){       nodes <- data.frame(id = unique(unlist(ss_dem)))       visNetwork(nodes = nodes, edges = ss_dem, main = i) %>%         visIgraphLayout() %>%         visEdges(shadow = TRUE,                  arrows =list(to = list(enabled = TRUE, scaleFactor = 0.5)),                  color = list(color = \"steelblue\", highlight = \"red\")) %>%         visOptions(highlightNearest = list(enabled = T, hover = T),                    nodesIdSelection = T)     }   }) }  data(metadata_pizza_lettuce) detailed_analysis <- analyse_metadata(metadata_pizza_lettuce, verbose = TRUE)  graph_links_tab(detailed_analysis$create_edges) ## $france_entreprises_2023.hrc_lettuce ##  ## $france_entreprises_2023.to_pizza"},{"path":"https://inseefrlab.github.io/rtauargus/articles/auto_metadata_fr.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Analyse automatique des métadonnées","text":"Avant de faire appel aux fonctions permettant la pose du secret il est nécessaire d’analyser les tableaux que l’souhaite protéger. En effet,les tableaux diffusés sont différents des tableaux à protéger. Cela est expliqué en détail au chapitre 3 du Manuel de protection des tableaux. Cette phase d’analyse des marges communes entre les différents tableaux peut s’avérer complexe. Ainsi, des fonctions ont été développées dans rtauargus pour faciliter ce travail.","code":""},{"path":[]},{"path":"https://inseefrlab.github.io/rtauargus/articles/auto_metadata_fr.html","id":"création-des-métadonnées","dir":"Articles","previous_headings":"Comment fonctionne l’analyse automatique automatique des métadonnées ?","what":"Création des métadonnées","title":"Analyse automatique des métadonnées","text":"Les métadonnées doivent respecter un format spécifique. Une ligne représente un tableau et pour chaque tableau il faut préciser : table_name : le nom du tableau ; field : le champ (souvent, zone géographique, population étudiée, millésime) ; hrc_field : s’il existe ou non un lien hiérarchique entre ce champ et un autre champ. S’il n’y pas de lien hiérarchique cette case vaut NA. Si au contraire, un lien hiérarchique existe, il faut donner un nom à ce lien et réécrire ce même nom dans les autres tableaux ; indicator : le nom de l’indicateur du tableau. Il s’agit du nom de la variable de ce qui est compté dans chaque cellule du tableau. Par exemple, si mon tableau présente le chiffre d’affaire des entreprises ma variable sera sans doute “CA”. Le mieux est de bien utiliser le nom de la variable tel que décrit dans les données ; hrc_indicator : s’il existe ou non un lien hiérarchique entre cet indicateur et un autre indicateur. S’il n’y pas de lien hiérarchique cette case vaut NA. Si au contraire, un lien hiérarchique existe, il faut donner un nom à ce lien et réécrire ce même nom dans les autres tableaux ; spanning_1 : le nom de la première variable de croisement. ajoute une colonne par variable de croisement en suivant le nommage : spanning_1, spanning_2, spanning_3, etc ; hrc_spanning_1 : s’il existe ou non un lien hiérarchique entre cette variable de croisement et une autre variable de croisement. S’il n’y pas de lien hiérarchique cette case vaut NA. Si au contraire, un lien hiérarchique existe, il faut donner un nom à ce lien et réécrire ce même nom dans les autres tableaux. ajoute une colonne par variable de croisement en suivant le nommage : hrc_spanning_1, hrc_spanning_2, hrc_spanning_3, etc. N.B. il faut autant de colonnes spanning_X que de colonnes hrc_spanning_X.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/auto_metadata_fr.html","id":"input-formaté-templates-eurostat","dir":"Articles","previous_headings":"Comment fonctionne l’analyse automatique automatique des métadonnées ?","what":"Input formaté : templates Eurostat","title":"Analyse automatique des métadonnées","text":"Lorsque les tableaux à traiter sont des tableaux Eurostat alors peut créer automatiquement le fichier de métadonnées à partir du template des cellules publiées. En effet, pour les publications Eurostat les INS doivent livrer un template regroupant les cellules publiées. Pour cela, il faut tout de même bien comprendre chaque colonne du template. Déterminer pour chacune d’entre elles s’il s’agit de la variable réponse / indicateur, d’une variable de croisement ou d’un champ, afin de pouvoir le préciser dans les arguments de la fonction . Il faut notamment vérifier que le template respecte bien : une variable de croisement = une colonne du template, et donc un supertotal. En effet, si une colonne regroupe plusieurs variables de croisement, alors il faut créer autant de colonnes que de variables de croisement.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/auto_metadata_fr.html","id":"les-arguments-de-analyse_metadata","dir":"Articles","previous_headings":"Comment fonctionne l’analyse automatique automatique des métadonnées ?","what":"Les arguments de analyse_metadata","title":"Analyse automatique des métadonnées","text":"Les arguments de la fonction sont les suivants : df_metadata : un dataframe structuré comme précisé dans la section . verbose : une variable de type logical, si TRUE la fonction retourne une liste avec les différentes étapes de l’analyse, si FALSE elle retourne juste le dataframe final avec l’indicatrice de cluster.","code":"args(analyse_metadata) ## function (df_metadata, verbose = FALSE)  ## NULL"},{"path":"https://inseefrlab.github.io/rtauargus/articles/auto_metadata_fr.html","id":"les-arguments-de-format_template","dir":"Articles","previous_headings":"Comment fonctionne l’analyse automatique automatique des métadonnées ?","what":"Les arguments de format_template","title":"Analyse automatique des métadonnées","text":"Les arguments de la fonction sont les suivants : data : dataframe du template Eurostat contenant toutes les cellules publiées. indicator_column : nom de la colonne dans laquelle se trouvent les indicateurs. spanning_var_tot : liste nommée des variables de croisements et de leurs totaux. field_columns : vecteur de toutes les colonnes représentant des champs (ex : millésime).","code":"args(format_template) ## function (data, indicator_column, spanning_var_tot, field_columns)  ## NULL"},{"path":[]},{"path":"https://inseefrlab.github.io/rtauargus/articles/auto_metadata_fr.html","id":"cas-où-linput-sont-les-métadonnées","dir":"Articles","previous_headings":"Exemples","what":"Cas où l’input sont les métadonnées","title":"Analyse automatique des métadonnées","text":"Dans cet exemple part d’un fichier de métadonnées présentant 12 tableaux à publier sur les chiffres d’affaires de ventes de pizzas et de salades. Exemple de code : obtient un dataframe nous présentant la façon de traiter les tableaux pour la pose du secret. Pour les 12 tableaux à publier il suffit de protéger 4 tableaux. Ces tableaux sont repartis dans deux clusters différents. Il faudra donc faire appel deux fois à tab_multi_manager(). remarque une nouvelle variable de croisement HRC_LETTUCE^h. s’agit d’une variable qui prend pour modalités batavia et arugula et pour total lettuce. L’indicateur LETTUCE renvoie ici au “turnover” () ou “chiffre d’affaires” de la vente de salades. Par exemple, le tableau T10.T12.T8 présente le chiffre d’affaires de la vente de salades en fonction de l’activité et de la catégorie de l’entreprise ainsi que du type de salade. Si l’souhaite avoir plus d’informations sur l’analyse de la demande, peut spécifier l’argument verbose = TRUE. Ainsi, l’objet renvoyé par la fonction sur une liste des différentes étapes de l’analyse. retrouve le dataframe avec l’indicatrice du cluster df_tab_to_treat. le même résultat mais en format liste : chaque élément de la liste est un cluster indépendant tab_to_treat. Mais aussi les 6 étapes de l’analyse.","code":"str(metadata_pizza_lettuce) ## 'data.frame':    12 obs. of  9 variables: ##  $ table_name    : chr  \"T1\" \"T2\" \"T3\" \"T4\" ... ##  $ field         : chr  \"france_entreprises_2023\" \"france_entreprises_2023\" \"france_entreprises_2023\" \"france_entreprises_2023\" ... ##  $ hrc_field     : logi  NA NA NA NA NA NA ... ##  $ indicator     : chr  \"to_pizza\" \"to_pizza\" \"to_pizza\" \"to_pizza\" ... ##  $ hrc_indicator : chr  NA NA NA NA ... ##  $ spanning_1    : chr  \"nuts2\" \"nuts3\" \"a10\" \"a10\" ... ##  $ hrc_spanning_1: chr  \"hrc_nuts\" \"hrc_nuts\" \"hrc_naf\" \"hrc_naf\" ... ##  $ spanning_2    : chr  \"size\" \"size\" \"nuts2\" \"nuts3\" ... ##  $ hrc_spanning_2: chr  NA NA \"hrc_nuts\" \"hrc_nuts\" ... library(rtauargus)  data(metadata_pizza_lettuce)  # Analyse complète, avec les étapes detailed_analysis <- analyse_metadata(metadata_pizza_lettuce, verbose = TRUE)  # Output simplifié, uniquement le dataframe avec l'indicatrice de cluster cluster_id_dataframe <- analyse_metadata(metadata_pizza_lettuce, verbose = FALSE) cluster_id_dataframe ## # A tibble: 4 x 10 ## # Groups:   table_name [4] ##   cluster table_name field indicator spanning_1 spanning_2 spanning_3 hrc_spanning_1 hrc_spanning_2 ##   <chr>   <chr>      <chr> <chr>     <chr>      <chr>      <chr>      <chr>          <chr>          ## 1 france~ T10.T12.T8 fran~ LETTUCE   HRC_NAF    cj         HRC_LETTU~ hrc_naf        <NA>           ## 2 france~ T11.T7.T9  fran~ LETTUCE   HRC_NAF    size       HRC_LETTU~ hrc_naf        <NA>           ## 3 france~ T1.T2      fran~ to_pizza  HRC_NUTS   size       <NA>       hrc_nuts       <NA>           ## 4 france~ T3.T4.T5.~ fran~ to_pizza  HRC_NAF    HRC_NUTS   <NA>       hrc_naf        hrc_nuts       ## # i 1 more variable: hrc_spanning_3 <chr> names(detailed_analysis) ## [1] \"identify_hrc\"        \"info_var\"            \"split_in_clusters\"   \"create_edges\"        ## [5] \"grp_tab_names\"       \"grp_tab_in_clusters\" \"tab_to_treat\"        \"df_tab_to_treat\""},{"path":"https://inseefrlab.github.io/rtauargus/articles/auto_metadata_fr.html","id":"cas-où-linput-est-un-template-eurostat","dir":"Articles","previous_headings":"Exemples","what":"Cas où l’input est un template Eurostat","title":"Analyse automatique des métadonnées","text":"La fonction format_template() permet de créer les métadonnées à mettre en input de analyse_metadata() à partir du template Eurostat des cellules publiées. voit qu’il y 6 tableaux à publier. Remarque : format_template() ne construit pas la colonne hrc_indicator car les informations contenues dans le template ne permettent pas de la déterminer. Ainsi, il faut la créer soit-même en fonction des informations que l’ont sur les indicateurs. Ici, il n’y pas de lien hiérarchique entre SAL (effectifs salariés des entreprises actives) et SAL_DTH (effectifs salariés dans les décès). Ensuite, utilise ce dataframe en input de la fonction d’analyse. Finalement, il y 6 tableaux à traiter dans 3 clusters différents. Autrement dit, il faudra faire trois fois appel à tab_multi_manager().","code":"data(enterprise_template)  str(enterprise_template) ## 'data.frame':    3168 obs. of  5 variables: ##  $ TIME_PERIOD: int  2022 2022 2022 2022 2022 2022 2022 2022 2022 2022 ... ##  $ INDICATOR  : chr  \"SAL\" \"SAL\" \"SAL\" \"SAL\" ... ##  $ ACTIVITY   : chr  \"B\" \"B\" \"B\" \"B\" ... ##  $ NUMBER_EMPL: chr  \"E0\" \"E1T4\" \"E5T9\" \"EGE10\" ... ##  $ LEGAL_FORM : chr  \"_T\" \"_T\" \"_T\" \"_T\" ... template_formatted <- format_template(   data = enterprise_template,   indicator_column = \"INDICATOR\",   spanning_var_tot = list(     ACTIVITY = \"BTSXO_S94\",     NUMBER_EMPL = \"_T\",     LEGAL_FORM = \"_T\"),   field_columns = c(\"TIME_PERIOD\") )  template_formatted$metadata ##             table_name field indicator spanning_1  spanning_2   hrc_spanning_1    hrc_spanning_2 ## 1 table_2021_SAL_DTH_1  2021   SAL_DTH   ACTIVITY  LEGAL_FORM hrc_activity_131  hrc_legal_form_3 ## 2 table_2021_SAL_DTH_2  2021   SAL_DTH   ACTIVITY NUMBER_EMPL hrc_activity_131 hrc_number_empl_4 ## 3     table_2022_SAL_1  2022       SAL   ACTIVITY  LEGAL_FORM hrc_activity_131  hrc_legal_form_3 ## 4     table_2022_SAL_2  2022       SAL   ACTIVITY NUMBER_EMPL hrc_activity_131 hrc_number_empl_4 ## 5 table_2022_SAL_DTH_1  2022   SAL_DTH   ACTIVITY  LEGAL_FORM hrc_activity_131  hrc_legal_form_3 ## 6 table_2022_SAL_DTH_2  2022   SAL_DTH   ACTIVITY NUMBER_EMPL hrc_activity_131 hrc_number_empl_4 # cas où il n'y a aucune hiérarchie sur les indicateurs metadata_template <- template_formatted$metadata %>%    mutate(hrc_indicator = NA) %>%    select(table_name,field,indicator,hrc_indicator, everything())  metadata_template ##             table_name field indicator hrc_indicator spanning_1  spanning_2   hrc_spanning_1 ## 1 table_2021_SAL_DTH_1  2021   SAL_DTH            NA   ACTIVITY  LEGAL_FORM hrc_activity_131 ## 2 table_2021_SAL_DTH_2  2021   SAL_DTH            NA   ACTIVITY NUMBER_EMPL hrc_activity_131 ## 3     table_2022_SAL_1  2022       SAL            NA   ACTIVITY  LEGAL_FORM hrc_activity_131 ## 4     table_2022_SAL_2  2022       SAL            NA   ACTIVITY NUMBER_EMPL hrc_activity_131 ## 5 table_2022_SAL_DTH_1  2022   SAL_DTH            NA   ACTIVITY  LEGAL_FORM hrc_activity_131 ## 6 table_2022_SAL_DTH_2  2022   SAL_DTH            NA   ACTIVITY NUMBER_EMPL hrc_activity_131 ##      hrc_spanning_2 ## 1  hrc_legal_form_3 ## 2 hrc_number_empl_4 ## 3  hrc_legal_form_3 ## 4 hrc_number_empl_4 ## 5  hrc_legal_form_3 ## 6 hrc_number_empl_4 # Analyse complète, avec les étapes detailed_analysis <- analyse_metadata(metadata_template, verbose = TRUE)  # Output simplifié, uniquement le dataframe avec l'indicatrice de cluster cluster_id_dataframe <- analyse_metadata(metadata_template, verbose = FALSE)  # visualisation du résultat de l'analyse cluster_id_dataframe ## # A tibble: 6 x 8 ## # Groups:   table_name [6] ##   cluster      table_name       field indicator spanning_1 spanning_2 hrc_spanning_1 hrc_spanning_2 ##   <chr>        <chr>            <chr> <chr>     <chr>      <chr>      <chr>          <chr>          ## 1 2021.SAL_DTH table_2021_SAL_~ 2021  SAL_DTH   HRC_ACTIV~ HRC_LEGAL~ hrc_activity_~ hrc_legal_for~ ## 2 2021.SAL_DTH table_2021_SAL_~ 2021  SAL_DTH   HRC_ACTIV~ HRC_NUMBE~ hrc_activity_~ hrc_number_em~ ## 3 2022.SAL     table_2022_SAL_1 2022  SAL       HRC_ACTIV~ HRC_LEGAL~ hrc_activity_~ hrc_legal_for~ ## 4 2022.SAL     table_2022_SAL_2 2022  SAL       HRC_ACTIV~ HRC_NUMBE~ hrc_activity_~ hrc_number_em~ ## 5 2022.SAL_DTH table_2022_SAL_~ 2022  SAL_DTH   HRC_ACTIV~ HRC_LEGAL~ hrc_activity_~ hrc_legal_for~ ## 6 2022.SAL_DTH table_2022_SAL_~ 2022  SAL_DTH   HRC_ACTIV~ HRC_NUMBE~ hrc_activity_~ hrc_number_em~"},{"path":"https://inseefrlab.github.io/rtauargus/articles/auto_metadata_fr.html","id":"pour-aller-plus-loin-visualiser-les-inclusions","dir":"Articles","previous_headings":"","what":"Pour aller plus loin : visualiser les inclusions","title":"Analyse automatique des métadonnées","text":"L’étape create_edges de l’analyse des métadonnées identifie les tableaux inclus dans d’autres tableaux. Par exemple, XXXXX est inclus dans XXXXX. Le code suivant permet de visualiser ces inclusions à l’aide de graphes afin de mieux comprendre la procédure d’analyse.","code":"library(rtauargus) library(igraph) ##  ## Attachement du package : 'igraph' ## Les objets suivants sont masqués depuis 'package:dplyr': ##  ##     as_data_frame, groups, union ## Les objets suivants sont masqués depuis 'package:stats': ##  ##     decompose, spectrum ## L'objet suivant est masqué depuis 'package:base': ##  ##     union library(visNetwork)  graph_links_tab <- function(list_desc_links){   list_desc_links %>% purrr::imap(function(ss_dem,i){     if(!is.null(ss_dem)){       nodes <- data.frame(id = unique(unlist(ss_dem)))       visNetwork(nodes = nodes, edges = ss_dem, main = i) %>%          visIgraphLayout() %>%          visEdges(shadow = TRUE,                  arrows =list(to = list(enabled = TRUE, scaleFactor = 0.5)),                  color = list(color = \"steelblue\", highlight = \"red\")) %>%          visOptions(highlightNearest = list(enabled = T, hover = T),                     nodesIdSelection = T)     }   }) }  data(metadata_pizza_lettuce) detailed_analysis <- analyse_metadata(metadata_pizza_lettuce, verbose = TRUE)  graph_links_tab(detailed_analysis$create_edges) ## $france_entreprises_2023.hrc_lettuce ##  ## $france_entreprises_2023.to_pizza"},{"path":"https://inseefrlab.github.io/rtauargus/articles/options_safety_rules.html","id":"primary-suppression-with-the-safety_rules-options","dir":"Articles","previous_headings":"","what":"Primary suppression with the safety_rules options :","title":"Safety rules and Suppress Options","text":"tab_rtauargus() function, primary suppression options set safety_rules argument. default parameter set “MAN(10)”, useful using apriori Interval protection level 10%. want set rules primary suppression syntax : - “rule_number1|rule_number2|rule_number3|…” least one safety rule required. allowed rules according τ-Argus manual. common rules : n size coalition k max percentage n minimum frequency allowed p Frequency Safety Range maximum accuracy estimation percent n (optional, default = 1), size coalition p margin use percent ones : request rule REQ(p1,p2,SafetyMargin) zero safety range parameter ZERO(p) b = 0 (default) cells missing code unsafe safety rules ares violated b = 1 cells always safe rules can appear multiple times (P,NK) can get details τ-Argus manual sections : - 4.4.4 Specify Tables - 5.7 Batch command file","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/options_safety_rules.html","id":"the-suppress-options","dir":"Articles","previous_headings":"","what":"The suppress options :","title":"Safety rules and Suppress Options","text":"default options “MOD(1,5,1,0,0)” fits business statistics. following parameters, number table needed, case always 1. possible options : MOD(TabNo, MaxTimePerSubtable, SingleSingle,SingleMultiple, MinFreq) last 3 parameters singleton options. parameter can 0 1. 1 option activated. OPT(TabNo, MaxComputingTime) GH(TabNo, priori Bounds Percentage, ModelSize,ApplySingleton) ModelSize 0 = normal, 1 indicates large model. ApplySingleton: 1 = yes,0 = ; default = yes table frequency-information, . NET(TabNo) RND(TabNo, RoundingBase, Steps, MaxTime, Partitions, StopRule) Steps: number steps allowed, normally 0 (default) MaxTime: Max computing time (10 = default) Partitions: 0, 1 (0 = partitioning (default), 1 = apply partitioning procedure) StopRule: 1 = Rapid , 2 = First feasible solution, 3 = optimal solution (3 =default) CTA(TabNo) details available τ-Argus manual, especially section 4.2.3","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/options_safety_rules.html","id":"about-this-vignette","dir":"Articles","previous_headings":"The suppress options :","what":"About this vignette","title":"Safety rules and Suppress Options","text":"Authors: Nathanael Rastout Last update: 17/02/2025 Version rtauargus used: 1.2.999 Version τ-Argus used : TauArgus 4.2.3 R version used : 4.3.3 summary ↑","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/options_safety_rules_fr.html","id":"application-du-secret-primaire-avec-le-paramètre-safety_rules","dir":"Articles","previous_headings":"","what":"Application du secret primaire avec le paramètre safety_rules :","title":"Les arguments Safety rules et Suppress","text":"Dans la fonction tab_rtauargus(), les options du secret primaire doivent être définies dans l’argument safety_rules. Par défaut, ce paramètre est fixé à “MAN(10)”, afin d’appliquer un intervalle de protection à 10%. . Si vous voulez définir des règles pour la suppression primaire, la syntaxe est la suivante : - “règle_numéro1|règle_numéro2|règle_numéro3|…”. Au moins une règle de sécurité est requise. Voci toutes les règles possibles selon le manuel de τ-Argus. Les règles les plus courantes sont : n la taille de la coalition k la proportion à ne pas dépasser n la fréquence minimale autorisée p le seuil de sécurité de la fréquence la précision maximale de l’estimation en pourcentage n (facultatif, par défaut = 1), la taille de la coalition p le seuil d’estimation acceptable en pourcent Les autres : La règle de requête (request rule) REQ(p1,p2,SafetyMargin). (non utilisé en France) Les intervalles de protection pour les zéros (ZeroSafetyMargin)ZERO(p) (inutile) b = 0 (par défaut) les cellules avec un code manquant sont considérés à risque b = 1 ces cellules sont toujours sûres Certaines règles peuvent apparaître plusieurs fois P,NK. Vous pouvez obtenir plus de détails avec le manuel τ-Argus dans les sections : - 4.4.4 Specify Tables - 5.7 Batch command file","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/options_safety_rules_fr.html","id":"les-options-de-suppress","dir":"Articles","previous_headings":"","what":"Les options de suppress :","title":"Les arguments Safety rules et Suppress","text":"Les options par défaut sont “MOD(1,5,1,0,0)”. Cela convient pour les statistiques d’entreprises. Pour chacun des paramètres suivants, le numéro du tableau est nécessaire, dans notre cas il sera toujours 1. Les options possibles sont : MOD(TabNo, MaxTimePerSubtable, SingleSingle,SingleMultiple, MinFreq) Les 3 derniers paramètres sont les options singleton. Chaque paramètre peut être 0 ou 1. Si 1, l’option est activée. OPT(TabNo, MaxComputingTime) GH(TabNo, priori Bounds Percentage, ModelSize,ApplySingleton) ModelSize 0 = normal, 1 indique le grand modèle. ApplySingleton : 1 = oui, 0 = non ; par défaut = oui si le tableau des informations sur la fréquence, non sinon. NET(TabNo) RND(TabNo, RoundingBase, Steps, MaxTime, Partitions, StopRule) Steps : nombre de pas autorisés, normalement 0 (par défaut) MaxTime : Temps de calcul maximum (10 = par défaut) Partitions : 0, 1 (0 = pas de partitionnement (par défaut), 1 = appliquer la procédure de partitionnement) StopRule : 1 = Rapide uniquement, 2 = Première solution réalisable, 3 = Solution optimale (3 = par défaut) CTA(TabNo) Plus de détails sont disponibles dans le manuel de τ-Argus, notamment dans la section 4.2.3.","code":""},{"path":[]},{"path":"https://inseefrlab.github.io/rtauargus/articles/options_safety_rules_fr.html","id":"about-this-vignette","dir":"Articles","previous_headings":"Les options de suppress :","what":"About this vignette","title":"Les arguments Safety rules et Suppress","text":"Authors: Nathanael Rastout Last update: 17/02/2025 Version rtauargus used: 1.2.999 Version τ-Argus used : TauArgus 4.2.3 R version used : 4.3.3 summary ↑","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/protect_multi_tables.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Protect several linked tables at once","text":"rtauargus package, now possible protect set linked tables . function called tab_multi_manager(). simple algorithm implemented handle protection doesn’t depend number tables. Hence, function can theoretically deal indefinite number tables. course, practical use limited power computer. However, confident ability function treat cases. interested cases encounter function can’t handle. link two () tables describes common cells tables, cells appearing . function can handle types links tables: margin links: two tables share one () variables; links response variables, exists equations connecting variables; non-nested hierarchies: explanatory variable broken two () non-nested hierarchies. Actually, last two types can handled first one. challenge user properly define set tables. set correctly defined, function takes care everything. Firstly, vignette present function works, secondly, parameters quickly described. third part, examples developped show use diverse situations.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/protect_multi_tables.html","id":"how-does-tab_multi_manager-handle-the-protection-of-a-set-of-linked-tables","dir":"Articles","previous_headings":"Introduction","what":"How does tab_multi_manager() handle the protection of a set of linked tables ?","title":"Protect several linked tables at once","text":"Firstly, function merges tables set. resulted table, boolean variables added mention whether cell owns given table set. , many boolean variables number tables set. merged table effective way quickly detect common cells. Thus, report suppressions automatic. protection process sequential: one table time. handle protection tables forget one table links, implemented algorithm works two lists: todolist: list tables protected; remainlist: list original tables haven’t yet protected . lists initialized follows: todolist = first table original list; remainlist = original tables except firs one. , algorithm proceeds shown following figure:","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/protect_multi_tables.html","id":"results","dir":"Articles","previous_headings":"Introduction","what":"Results","title":"Protect several linked tables at once","text":"function returns original list tables variables boolean variables (TRUE cell masked, otherwise FALSE), describing steps suppression process. step takes previous one account last variable indicates final step. Final status cell easily computable last variable primary suppression status previously computed user. addition, function writes τ-Argus files created process. end, last process table available chosen directory. journal (journal.txt) also provided. describes step suppression process: table protected, many new common cells hit secondary suppression. end process, provides description common cells hit, mentionning iteration hit.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/protect_multi_tables.html","id":"some-details-on-the-parameters-of-tab_multi_manager","dir":"Articles","previous_headings":"Introduction","what":"Some details on the parameters of tab_multi_manager()","title":"Protect several linked tables at once","text":"dir_name directory contain created files, non existing created. example : dir_name = “my_directory” hrc named vector specifying path hrc file hierarchical variables. example : c(ACTIVITY = “path_to_file/act.hrc”, NUTS = “path_to_file/nuts.hrc” ) alt_hrc named list useful dealing non-nested hierachies. names list names tables alternative (non-nested general) hierarchies. example : T1 T2 one explanatory variable, called ACTIVITY, response variable, ACTIVITY variable hierarchy two tables. Let’s assume hierarchies (act1.hrc act2.hrc) nested. case, write two arguments follows: hrc = c(ACTIVITY = “path_to_file/act_1.hrc”): default, hierarchy used. alt_hrc = list(T2 = c(ACTIVITY = “path_to_file/act_2.hrc”)): table T2, alternative hierarchy used. totcode code total explanatory variables. recommanded use totcode variables. example code “Total” variables. syntax allowed : totcode = “Total” Otherwise expected input list specifying totcode explanatory vars. example : totcode = list(ACTIVITY = “Total”, NUTS = “FR”, SIZE =“Ensemble”, CJ = “Total”) Default : “Total” Warning : totals table, computed Tau-Argus, won’t eligible primary suppression. , , advise users provide totals tables. alt_totcode named list alternative total codes. See alt_hrc use. value colname response variable tables, MUST name tables. example : value = “turnover” Default : “value” freq colname frequency variable tables, MUST name tables. example : freq = “frequency” Default : “freq” secret_var name boolean variable specifying primary suppression tables, MUST name tables. example : secret_var = “is_secret_prim” Default : “is_secret_prim” suppress algorithm required perform secondary suppression, explained safety_rules vignette. Modular approach chosen, first iteration given table, singleton, multi-singleton minFreq options deactivated. default : MOD(1,5,1,0,0)” ip_start manual safety range first iteration table (integer) default : 10 ip_end manual safety range second iteration table (integer) default : 0 num_iter_max parameter ensure fact function stop. default : 10","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/protect_multi_tables.html","id":"some-examples","dir":"Articles","previous_headings":"","what":"Some examples","title":"Protect several linked tables at once","text":"Let’s specify location TauArgus.exe file computer:","code":"options(   rtauargus.tauargus_exe =     \"Y:/Logiciels/TauArgus/TauArgus4.2.3/TauArgus.exe\" )"},{"path":"https://inseefrlab.github.io/rtauargus/articles/protect_multi_tables.html","id":"about-protecting-4-linked-tables-at-once","dir":"Articles","previous_headings":"Some examples","what":"About protecting 4 linked tables at once","title":"Protect several linked tables at once","text":"following example going protect set 4 linked tables sharing response variable, turnover.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/protect_multi_tables.html","id":"preparing-the-data","dir":"Articles","previous_headings":"Some examples > About protecting 4 linked tables at once","what":"Preparing the data","title":"Protect several linked tables at once","text":"ACTIVITY X SIZE named turnover_act_size ACTIVITY X CJ named turnover_act_cj NUTS X SIZE named turnover_nuts_size NUTS X CJ named turnover_nuts_cj first step create list containing four tables, advised give name tables. easier track secondary suppression.","code":"data(\"turnover_act_size\") data(\"turnover_act_cj\") data (\"turnover_nuts_size\") data(\"turnover_nuts_cj\") str(turnover_act_size) #> tibble [414 x 5] (S3: tbl_df/tbl/data.frame) #>  $ ACTIVITY: chr [1:414] \"AZ\" \"BE\" \"FZ\" \"GI\" ... #>  $ SIZE    : chr [1:414] \"Total\" \"Total\" \"Total\" \"Total\" ... #>  $ N_OBS   : int [1:414] 405 12878 28043 62053 8135 8140 11961 41359 26686 25108 ... #>  $ TOT     : num [1:414] 44475 24827613 8907311 26962063 8584917 ... #>  $ MAX     : num [1:414] 6212 1442029 1065833 3084242 3957364 ... str(turnover_nuts_cj) #> tibble [452 x 5] (S3: tbl_df/tbl/data.frame) #>  $ NUTS : chr [1:452] \"FR10\" \"FR21\" \"FR22\" \"FR23\" ... #>  $ CJ   : chr [1:452] \"Total\" \"Total\" \"Total\" \"Total\" ... #>  $ N_OBS: int [1:452] 38462 6769 4561 5090 8611 7811 5643 10411 8179 5163 ... #>  $ TOT  : num [1:452] 33026385 2947560 1917663 3701935 5089279 ... #>  $ MAX  : num [1:452] 3084242 544763 651848 298134 1165019 ... list_data_4_tabs <- list(   act_size = turnover_act_size,   act_cj = turnover_act_cj,   nuts_size = turnover_nuts_size,   nuts_cj = turnover_nuts_cj ) str(list_data_4_tabs) #> List of 4 #>  $ act_size : tibble [414 x 5] (S3: tbl_df/tbl/data.frame) #>   ..$ ACTIVITY: chr [1:414] \"AZ\" \"BE\" \"FZ\" \"GI\" ... #>   ..$ SIZE    : chr [1:414] \"Total\" \"Total\" \"Total\" \"Total\" ... #>   ..$ N_OBS   : int [1:414] 405 12878 28043 62053 8135 8140 11961 41359 26686 25108 ... #>   ..$ TOT     : num [1:414] 44475 24827613 8907311 26962063 8584917 ... #>   ..$ MAX     : num [1:414] 6212 1442029 1065833 3084242 3957364 ... #>  $ act_cj   : tibble [406 x 5] (S3: tbl_df/tbl/data.frame) #>   ..$ ACTIVITY: chr [1:406] \"AZ\" \"BE\" \"FZ\" \"GI\" ... #>   ..$ CJ      : chr [1:406] \"Total\" \"Total\" \"Total\" \"Total\" ... #>   ..$ N_OBS   : int [1:406] 405 12878 28043 62053 8135 8140 11961 41359 26686 25108 ... #>   ..$ TOT     : num [1:406] 44475 24827613 8907311 26962063 8584917 ... #>   ..$ MAX     : num [1:406] 6212 1442029 1065833 3084242 3957364 ... #>  $ nuts_size: tibble [460 x 5] (S3: tbl_df/tbl/data.frame) #>   ..$ NUTS : chr [1:460] \"FR10\" \"FR21\" \"FR22\" \"FR23\" ... #>   ..$ SIZE : chr [1:460] \"Total\" \"Total\" \"Total\" \"Total\" ... #>   ..$ N_OBS: int [1:460] 38462 6769 4561 5090 8611 7811 5643 10411 8179 5163 ... #>   ..$ TOT  : num [1:460] 33026385 2947560 1917663 3701935 5089279 ... #>   ..$ MAX  : num [1:460] 3084242 544763 651848 298134 1165019 ... #>  $ nuts_cj  : tibble [452 x 5] (S3: tbl_df/tbl/data.frame) #>   ..$ NUTS : chr [1:452] \"FR10\" \"FR21\" \"FR22\" \"FR23\" ... #>   ..$ CJ   : chr [1:452] \"Total\" \"Total\" \"Total\" \"Total\" ... #>   ..$ N_OBS: int [1:452] 38462 6769 4561 5090 8611 7811 5643 10411 8179 5163 ... #>   ..$ TOT  : num [1:452] 33026385 2947560 1917663 3701935 5089279 ... #>   ..$ MAX  : num [1:452] 3084242 544763 651848 298134 1165019 ..."},{"path":"https://inseefrlab.github.io/rtauargus/articles/protect_multi_tables.html","id":"applying-primary-suppression-rules","dir":"Articles","previous_headings":"Some examples > About protecting 4 linked tables at once","what":"Applying primary suppression rules","title":"Protect several linked tables at once","text":"need apply primary suppression table. apply 2 rules : dominance rule NK(1,85) frequency rule threshold set 3. Three variables added table. last one used protection process. two others useful state final status cells.","code":"list_data_4_tabs <- list_data_4_tabs %>%   purrr::map(     function(df){       df %>%         mutate(           is_secret_freq = N_OBS > 0 & N_OBS < 3,           is_secret_dom = ifelse(MAX == 0, FALSE, MAX/TOT>0.85),           is_secret_prim = is_secret_freq | is_secret_dom         )     }   ) str(list_data_4_tabs) #> List of 4 #>  $ act_size : tibble [414 x 8] (S3: tbl_df/tbl/data.frame) #>   ..$ ACTIVITY      : chr [1:414] \"AZ\" \"BE\" \"FZ\" \"GI\" ... #>   ..$ SIZE          : chr [1:414] \"Total\" \"Total\" \"Total\" \"Total\" ... #>   ..$ N_OBS         : int [1:414] 405 12878 28043 62053 8135 8140 11961 41359 26686 25108 ... #>   ..$ TOT           : num [1:414] 44475 24827613 8907311 26962063 8584917 ... #>   ..$ MAX           : num [1:414] 6212 1442029 1065833 3084242 3957364 ... #>   ..$ is_secret_freq: logi [1:414] FALSE FALSE FALSE FALSE FALSE FALSE ... #>   ..$ is_secret_dom : logi [1:414] FALSE FALSE FALSE FALSE FALSE FALSE ... #>   ..$ is_secret_prim: logi [1:414] FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ act_cj   : tibble [406 x 8] (S3: tbl_df/tbl/data.frame) #>   ..$ ACTIVITY      : chr [1:406] \"AZ\" \"BE\" \"FZ\" \"GI\" ... #>   ..$ CJ            : chr [1:406] \"Total\" \"Total\" \"Total\" \"Total\" ... #>   ..$ N_OBS         : int [1:406] 405 12878 28043 62053 8135 8140 11961 41359 26686 25108 ... #>   ..$ TOT           : num [1:406] 44475 24827613 8907311 26962063 8584917 ... #>   ..$ MAX           : num [1:406] 6212 1442029 1065833 3084242 3957364 ... #>   ..$ is_secret_freq: logi [1:406] FALSE FALSE FALSE FALSE FALSE FALSE ... #>   ..$ is_secret_dom : logi [1:406] FALSE FALSE FALSE FALSE FALSE FALSE ... #>   ..$ is_secret_prim: logi [1:406] FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ nuts_size: tibble [460 x 8] (S3: tbl_df/tbl/data.frame) #>   ..$ NUTS          : chr [1:460] \"FR10\" \"FR21\" \"FR22\" \"FR23\" ... #>   ..$ SIZE          : chr [1:460] \"Total\" \"Total\" \"Total\" \"Total\" ... #>   ..$ N_OBS         : int [1:460] 38462 6769 4561 5090 8611 7811 5643 10411 8179 5163 ... #>   ..$ TOT           : num [1:460] 33026385 2947560 1917663 3701935 5089279 ... #>   ..$ MAX           : num [1:460] 3084242 544763 651848 298134 1165019 ... #>   ..$ is_secret_freq: logi [1:460] FALSE FALSE FALSE FALSE FALSE FALSE ... #>   ..$ is_secret_dom : logi [1:460] FALSE FALSE FALSE FALSE FALSE FALSE ... #>   ..$ is_secret_prim: logi [1:460] FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ nuts_cj  : tibble [452 x 8] (S3: tbl_df/tbl/data.frame) #>   ..$ NUTS          : chr [1:452] \"FR10\" \"FR21\" \"FR22\" \"FR23\" ... #>   ..$ CJ            : chr [1:452] \"Total\" \"Total\" \"Total\" \"Total\" ... #>   ..$ N_OBS         : int [1:452] 38462 6769 4561 5090 8611 7811 5643 10411 8179 5163 ... #>   ..$ TOT           : num [1:452] 33026385 2947560 1917663 3701935 5089279 ... #>   ..$ MAX           : num [1:452] 3084242 544763 651848 298134 1165019 ... #>   ..$ is_secret_freq: logi [1:452] FALSE FALSE FALSE FALSE FALSE FALSE ... #>   ..$ is_secret_dom : logi [1:452] FALSE FALSE FALSE FALSE FALSE FALSE ... #>   ..$ is_secret_prim: logi [1:452] FALSE FALSE FALSE FALSE FALSE FALSE ..."},{"path":"https://inseefrlab.github.io/rtauargus/articles/protect_multi_tables.html","id":"preparing-the-list-of-explanatory-variables","dir":"Articles","previous_headings":"Some examples > About protecting 4 linked tables at once","what":"Preparing the list of explanatory variables","title":"Protect several linked tables at once","text":"going create list explanatory variables tables. case, explanatory variables 2 first columns table. names list names corresponding tables list_tables argument.","code":"nom_var_list <- purrr::map(   list_data_4_tabs,   function(data) colnames(data)[1:2] ) nom_var_list #> $act_size #> [1] \"ACTIVITY\" \"SIZE\"     #>  #> $act_cj #> [1] \"ACTIVITY\" \"CJ\"       #>  #> $nuts_size #> [1] \"NUTS\" \"SIZE\" #>  #> $nuts_cj #> [1] \"NUTS\" \"CJ\""},{"path":"https://inseefrlab.github.io/rtauargus/articles/protect_multi_tables.html","id":"preparing-the-list-of-total-codes","dir":"Articles","previous_headings":"Some examples > About protecting 4 linked tables at once","what":"Preparing the list of total codes","title":"Protect several linked tables at once","text":"labels used mention total variable declared user, named list. However, variables label refer total, information can mentionned follows:","code":"total_codes <- \"Total\""},{"path":"https://inseefrlab.github.io/rtauargus/articles/protect_multi_tables.html","id":"making-the-hierarchical-files","dir":"Articles","previous_headings":"Some examples > About protecting 4 linked tables at once","what":"Making the hierarchical files","title":"Protect several linked tables at once","text":"ACTIVITY NUTS two hierarchical variables. use correspondance table create .hrc files tau-Argus need. mention names hrc files, create named vector (list) follows: names vector names corresponding hierarchical variables.","code":"data(activity_corr_table) data(nuts23_fr_corr_table) hrc_file_activity <- write_hrc2(   corr_table = activity_corr_table,   file_name = \"hrc/activity.hrc\" ) hrc_file_nuts <- write_hrc2(   corr_table = nuts23_fr_corr_table,   file_name = \"hrc/nuts.hrc\" ) hrc_files <- list(   ACTIVITY = hrc_file_activity,   NUTS = hrc_file_nuts )"},{"path":"https://inseefrlab.github.io/rtauargus/articles/protect_multi_tables.html","id":"running-the-protection-of-all-the-tables-at-once","dir":"Articles","previous_headings":"Some examples > About protecting 4 linked tables at once","what":"Running the protection of all the tables at once","title":"Protect several linked tables at once","text":"","code":"res <- tab_multi_manager(     list_tables = list_data_4_tabs,     list_explanatory_vars = nom_var_list,     dir_name = \"tauargus_files/ex4\",     hrc = hrc_files,     totcode = total_codes,     value = \"TOT\",     freq = \"N_OBS\",     secret_var = \"is_secret_prim\" ) #> --- Current table to treat:  act_size --- #> --- Current table to treat:  act_cj --- #> --- Current table to treat:  act_size --- #> --- Current table to treat:  nuts_size --- #> --- Current table to treat:  nuts_cj ---"},{"path":"https://inseefrlab.github.io/rtauargus/articles/protect_multi_tables.html","id":"results-1","dir":"Articles","previous_headings":"Some examples > About protecting 4 linked tables at once","what":"Results","title":"Protect several linked tables at once","text":"","code":"list_with_status <- res %>%   purrr::map(     function(df){       df %>%         rename_with(~\"final_suppress\", last_col()) %>%         mutate(           status = case_when(             is_secret_freq ~ \"A\",             is_secret_dom ~ \"B\",             final_suppress ~ \"D\",             TRUE ~\"V\"           )         ) %>%         select(1:2, TOT, N_OBS, status)     }   ) str(list_with_status$act_size) #> 'data.frame':    414 obs. of  5 variables: #>  $ ACTIVITY: chr  \"01\" \"01\" \"02\" \"02\" ... #>  $ SIZE    : chr  \"Total\" \"tr1\" \"Total\" \"tr1\" ... #>  $ TOT     : num  853 853 43623 35503 8120 ... #>  $ N_OBS   : int  18 18 387 381 6 1 1 4 4 84 ... #>  $ status  : chr  \"V\" \"V\" \"V\" \"V\" ... list_with_status %>%   purrr::iwalk(     function(df,name){       cat(name, \"\\n\")       df %>% count(status) %>% print()     }   ) #> act_size  #>   status   n #> 1      A  52 #> 2      B  25 #> 3      D  83 #> 4      V 254 #> act_cj  #>   status   n #> 1      A  35 #> 2      B  25 #> 3      D  88 #> 4      V 258 #> nuts_size  #>   status   n #> 1      A  55 #> 2      B  17 #> 3      D  82 #> 4      V 306 #> nuts_cj  #>   status   n #> 1      A  45 #> 2      B  20 #> 3      D 101 #> 4      V 286"},{"path":"https://inseefrlab.github.io/rtauargus/articles/protect_multi_tables.html","id":"dealing-with-non-nested-hierarchies","dir":"Articles","previous_headings":"Some examples","what":"Dealing with non-nested hierarchies","title":"Protect several linked tables at once","text":"Let’s assume ’d like protect two tables crossing ACTIVITY SIZE one hand ACTIVITY CJ hand. ACTIVITY variable hierarchical one. Moreover, case, ’d like release subtotal, called D_TO_M, addition activity_corr_table. subtotal sum D M labels A21 level. subtotal can’t inserted main hierarchy, leads us case non-nested hierarchies. confirm non-nesting two hierachies, let’s display extract . Extract main hierarchy: Extract alternative hierarchy: handle case, preferred approach create third table crossing ACTIVITY SIZE D M labels subtotal D_TO_M: Let’s create alternative hierarchy file. , let’s build list tables apply primary suppression rules . hrc alt_hrc arguments used mention hierarchies ACTIVITY variable: hrc used int previous example (named vector names different hierarchical variables appearingin tables values files names). Hence, hierarchy file taken vector default. alt_hrc used mention alternative hierarchies. argument named list names tables alternative hierarchies applied. rationale used fill alt_totcode argument.","code":"sdcHierarchies::hier_create(   root=\"Total\",   nodes = activity_corr_table$A10 %>% unique() ) %>%   sdcHierarchies::hier_display() #> Total #> +-AZ #> +-BE #> +-FZ #> +-GI #> +-JZ #> +-KZ #> +-LZ #> +-MN #> +-OQ #> \\-RU sdcHierarchies::hier_create(   root=\"D_TO_M\",   nodes = activity_corr_table_D_TO_M$A21 ) %>%   sdcHierarchies::hier_display() #> D_TO_M #> +-D #> +-E #> +-F #> +-G #> +-H #> +-I #> +-J #> +-K #> +-L #> \\-M turnover_act_size_D_TO_M <- turnover_act_size %>%   filter(     ACTIVITY %in% LETTERS[4:13]   ) %>%   bind_rows(     turnover_act_size %>%       filter(         ACTIVITY %in% LETTERS[4:13]       ) %>%       group_by(SIZE) %>%       summarise(N_OBS = sum(N_OBS), TOT = sum(TOT), MAX = max(MAX)) %>%       mutate(ACTIVITY = \"D_TO_M\")   ) str(turnover_act_size_D_TO_M) #> tibble [44 x 5] (S3: tbl_df/tbl/data.frame) #>  $ ACTIVITY: chr [1:44] \"D\" \"E\" \"F\" \"G\" ... #>  $ SIZE    : chr [1:44] \"Total\" \"Total\" \"Total\" \"Total\" ... #>  $ N_OBS   : int [1:44] 1411 828 28043 41624 6524 13905 8135 8140 11961 28221 ... #>  $ TOT     : num [1:44] 2438454 2264393 8907311 18244309 6273334 ... #>  $ MAX     : num [1:44] 981369 306905 1065833 765244 3084242 ... activity_corr_table_D_TO_M <- activity_corr_table %>%   filter(A21 %in% LETTERS[4:13]) %>%   select(-A88) %>%   mutate(A10 = \"D_TO_M\") %>%   unique()  hrc_file_activity_D_TO_M <- activity_corr_table_D_TO_M %>%   select(-1) %>%   write_hrc2(file_name = \"hrc/activity_D_TO_M\") list_data_3_tabs_nn <- list(   act_size = turnover_act_size,   act_size_D_TO_M = turnover_act_size_D_TO_M,   act_cj = turnover_act_cj ) %>%   purrr::map(     function(df){       df %>%         mutate(           is_secret_freq = N_OBS > 0 & N_OBS < 3,           is_secret_dom = ifelse(MAX == 0, FALSE, MAX/TOT>0.85),           is_secret_prim = is_secret_freq | is_secret_dom         )     }   ) res <- tab_multi_manager(   list_tables = list_data_3_tabs_nn,   list_explanatory_vars = list(     act_size = c(\"ACTIVITY\", \"SIZE\"),     act_size_D_TO_M = c(\"ACTIVITY\", \"SIZE\"),     act_cj = c(\"ACTIVITY\", \"CJ\")   ),   hrc = c(ACTIVITY = hrc_file_activity),   alt_hrc = list(     act_size_D_TO_M = c(ACTIVITY = hrc_file_activity_D_TO_M)   ),   dir_name = \"tauargus_files/ex5\",   value = \"TOT\",   freq = \"N_OBS\",   secret_var = \"is_secret_prim\",   totcode =  \"Total\",   alt_totcode = list(     act_size_D_TO_M = c(ACTIVITY = \"D_TO_M\")   ) ) #> --- Current table to treat:  act_size --- #> --- Current table to treat:  act_size_D_TO_M --- #> --- Current table to treat:  act_cj --- #> --- Current table to treat:  act_size --- #> --- Current table to treat:  act_size_D_TO_M --- #> --- Current table to treat:  act_size --- #> --- Current table to treat:  act_cj ---"},{"path":"https://inseefrlab.github.io/rtauargus/articles/protect_multi_tables.html","id":"about-this-vignette","dir":"Articles","previous_headings":"Some examples > Dealing with non-nested hierarchies","what":"About this vignette","title":"Protect several linked tables at once","text":"Authors: Julien Jamme & Nathanael Rastout Last update: 17/02/2025 Version rtauargus used: 1.2.999 Version τ-Argus used : TauArgus 4.2.3 R version used : 4.3.3 summary ↑","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/protect_multi_tables_fr.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Protéger des tableaux liés","text":"Dans le package rtauargus, il est maintenant possible de protéger un ensemble de tableaux liés en une seule fois. La fonction pour le faire s’appelle tab_multi_manager(). L’algorithme très simple implémenté pour gérer la protection ne dépend pas du nombre de tableaux. Par conséquent,la fonction peut théoriquement traiter un nombre indéfini de tableaux. Bien sûr, l’utilisation pratique est limitée par la puissance de l’ordinateur. Cependant, nous sommes confiants sur la capacité de la fonction à traiter la plupart des cas. Nous sommes intéressés par les cas que vous pourriez rencontrer et que la fonction ne peut pas traiter. Un lien entre deux (ou plusieurs) tableaux décrit les cellules communes des tableaux, c’est-à-dire les cellules qui sont présentent dans ces derniers. La fonction peut gérer tous les types de liens entre tableaux : les marges communes : lorsque deux tableaux partagent une (ou plusieurs) variables de ventilation ; liens entre les variables de réponse, lorsqu’il existe des équations reliant les variables ; hiérarchies non emboitées : lorsqu’une variable explicative est décomposée en deux (ou plus) hiérarchies non emboitées. En fait, les deux derniers types peuvent être traités comme le premier. Le défi pour l’utilisateur est de définir correctement l’ensemble des tableaux. Une fois l’ensemble correctement défini, la fonction s’occupe de tout. Tout d’abord, la vignette présente le fonctionnement de la fonction, puis les paramètres sont rapidement décrits. Dans la troisième partie, des exemples sont développés pour montrer comment l’utiliser dans diverses situations.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/protect_multi_tables_fr.html","id":"comment-tab_multi_manager-gère-t-il-la-protection-dun-ensemble-de-tableaux-liées","dir":"Articles","previous_headings":"Introduction","what":"Comment tab_multi_manager() gère-t-il la protection d’un ensemble de tableaux liées ?","title":"Protéger des tableaux liés","text":"Tout d’abord, la fonction fusionne tous les tableaux de l’ensemble. Dans la table obtenue, des variables booléennes sont ajoutées pour indiquer si une cellule appartient à un tableau ou non. Il y donc autant de variables booléennes que de tableaux dans l’ensemble.Le tableau fusionné est un moyen très efficace pour détecter rapidement les cellules communes. Ainsi ,le rapport des suppressions est automatisé. Le processus de protection est séquentiel : un tableau à la fois. Pour gérer la protection de toutes les tables et ne pas oublier une table ou des liens, l’algorithme implémenté fonctionne avec deux listes : todolist : liste des tables qui doivent être protégées ; remainlist : liste des tables originales qui n’ont pas encore été protégées du tout. Les deux listes sont initialisées comme suit : todolist = première table de la liste originale ; remainlist = toutes les tables originales sauf la première. Ensuite, l’algorithme se déroule comme indiqué dans la figure suivante :","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/protect_multi_tables_fr.html","id":"résultats","dir":"Articles","previous_headings":"Introduction","what":"Résultats","title":"Protéger des tableaux liés","text":"La fonction renvoie la liste originale des tableaux avec d’autres variables qui sont des variables booléennes (TRUE si la cellule doit être masquée sinon FALSE). , décrivant toutes les étapes du processus de suppression. Chaque étape prend en compte les résultats précédents et la dernière variable indique le statut final d’une cellule. Le statut final de chaque cellule est facilement déductible à l’aide de cette dernière variable et de l’état de suppression primaire calculé précédemment par l’utilisateur. De plus, la fonction écrit tous les fichiers τ-Argus créés au cours du processus. la fin, seul le dernier processus pour chaque table est disponible dans le répertoire choisi. Un journal (journal.txt) est également fourni. Il décrit chaque étape du processus de suppression : Quelle table est protégée, combien de nouvelles cellules communes ont été atteintes par la suppression secondaire. À la fin du processus, il décrit toutes les cellules communes qui ont été touchées, en mentionnant l’itération à laquelle chacune été masquée.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/protect_multi_tables_fr.html","id":"quelques-détails-sur-les-paramètres-de-tab_multi_manager","dir":"Articles","previous_headings":"Introduction","what":"Quelques détails sur les paramètres de `tab_multi_manager()``","title":"Protéger des tableaux liés","text":"dir_name le répertoire qui contiendra tous les fichiers créés, s’il n’existe pas, il sera créé. exemple : dir_name = “my_directory”. hrc Un vecteur nommé spécifiant le chemin vers le fichier hrc pour chaque variable hiérarchique. exemple : c(ACTIVITY = “chemin_vers_fichier/act.hrc”, NUTS = “chemin_vers_fichier/nuts.hrc” ) alt_hrc Une liste nommée utile pour traiter les hiérarchies non emboitées. Les noms de la liste sont les noms des tableaux pour lesquelles une autre hiérarchie(non emboitée en général) doit être utilisée. exemple : Si T1 et T2 ont une variable explicative, appelée ACTIVITY, et la même variable de réponse, mais la variable ACTIVITY n’pas la même hiérarchie dans les les deux tables. Supposons que les hiérarchies (act1.hrc et act2.hrc) ne sont pas emboitées. Dans ce cas, nous écrivons les deux arguments comme suit : hrc = c(ACTIVITY = “path_to_file/act_1.hrc”) : Par défaut, cette hiérarchie sera utilisée pour la variable ACTIVITY. alt_hrc = list(T2 = c(ACTIVITY = “chemin_vers_fichier/act_2.hrc”)) : Dans la table T2, la hiérarchie alternative sera utilisée. totcode Le code du total pour chaque variable explicative. Il est recommandé d’utiliser le même même code de total pour chaque variable. Si par exemple le code est “Total” pour toutes les variables. La syntaxe qsuivante est autorisée : totcode = “Total” Sinon, l’input attendue est une liste spécifiant le code total pour chaque variable explicative. Par exemple : totcode = list(ACTIVITY = “Total”, NUTS = “FR”, SIZE = “Ensemble”, CJ = “Total”) Attention : Si les totaux ne sont pas dans la table, ils seront calculés par Tau-Argus, mais ils ne seront pas éligibles pour la suppression primaire. Il est donc nécessaire de les fournir dans la table de départ. alt_totcode Une liste nommée pour les codes de totaux alternatifs. Voir alt_hrc pour l’utilisation. value Le nom de colonne de la variable de réponse dans les tableauxs, il DOIT identique pour chaque table. Par exemple : valeur = “turnover”. Valeur par défaut : “value”. freq Le nom de colonne de la variable de fréquence dans les tableaux, il DOIT être le même nom pour chaque tableau. Par exemple : freq = “frequency” Valeur par défaut : “freq”. secret_var Le nom de la variable booléenne spécifiant le secret primaire dans les tables, il DOIT être le même nom pour chaque table. Par exemple : secret_var = “is_secret_prim”. Valeur par défaut : “is_secret_prim”. suppression L’algorithme requis pour effectuer la suppression secondaire, expliqué dans la vignette safety_rules. Si Modular est choisi, après la après la première itération sur une table donnée, les options singleton, multi-singleton et minFreq sont désactivées. défaut : MOD(1,5,1,0,0)” ip_start Les intervalles de protection pour la première itération sur une table donnée (nombre entier) par défaut : 10 ip_end Les intervalles de protection pour la deuxième itération sur une table (nombre entier) par défaut : 0 num_iter_max Nombre d’itération maximum sur un tableau, ce paramètre est ici pour assurer le fait que la fonction va s’arrêter. En pratique n’atteint jamais la limite de 10. par défaut : 10","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/protect_multi_tables_fr.html","id":"quelques-exemples","dir":"Articles","previous_headings":"","what":"Quelques exemples","title":"Protéger des tableaux liés","text":"Spécifions l’emplacement du fichier TauArgus.exe sur notre ordinateur : ``{r version} options( rtauargus.tauargus_exe = “Y:/Logiciels/TauArgus/TauArgus4.2.3/TauArgus.exe” ) ACTIVITY X SIZE nommé turnover_act_size ACTIVITY X CJ nommé turnover_act_cj NUTS X SIZE nommé turnover_nuts_size NUTS X CJ nommé turnover_nuts_cj La première étape consiste à créer une liste contenant nos quatre tableaux, il est conseillé de de donner un nom à chaque table. En faisant cela, il sera plus facile de suivre le déroulement de la pose du secret secondaire.","code":"## Comment protéger 4 tableaux liés en même temps  Dans l'exemple suivant, nous allons protéger un ensemble de 4 tableaux liés partageant la même variable de réponse, à savoir le chiffre d'affaires.  ### Préparation des données   ``` r data(\"turnover_act_size\") data(\"turnover_act_cj\") data (\"turnover_nuts_size\") data(\"turnover_nuts_cj\") str(turnover_act_size) #> tibble [414 x 5] (S3: tbl_df/tbl/data.frame) #>  $ ACTIVITY: chr [1:414] \"AZ\" \"BE\" \"FZ\" \"GI\" ... #>  $ SIZE    : chr [1:414] \"Total\" \"Total\" \"Total\" \"Total\" ... #>  $ N_OBS   : int [1:414] 405 12878 28043 62053 8135 8140 11961 41359 26686 25108 ... #>  $ TOT     : num [1:414] 44475 24827613 8907311 26962063 8584917 ... #>  $ MAX     : num [1:414] 6212 1442029 1065833 3084242 3957364 ... str(turnover_nuts_cj) #> tibble [452 x 5] (S3: tbl_df/tbl/data.frame) #>  $ NUTS : chr [1:452] \"FR10\" \"FR21\" \"FR22\" \"FR23\" ... #>  $ CJ   : chr [1:452] \"Total\" \"Total\" \"Total\" \"Total\" ... #>  $ N_OBS: int [1:452] 38462 6769 4561 5090 8611 7811 5643 10411 8179 5163 ... #>  $ TOT  : num [1:452] 33026385 2947560 1917663 3701935 5089279 ... #>  $ MAX  : num [1:452] 3084242 544763 651848 298134 1165019 ... list_data_4_tabs <- list(   act_size = turnover_act_size,   act_cj = turnover_act_cj,   nuts_size = turnover_nuts_size,   nuts_cj = turnover_nuts_cj ) str(list_data_4_tabs) #> List of 4 #>  $ act_size : tibble [414 x 5] (S3: tbl_df/tbl/data.frame) #>   ..$ ACTIVITY: chr [1:414] \"AZ\" \"BE\" \"FZ\" \"GI\" ... #>   ..$ SIZE    : chr [1:414] \"Total\" \"Total\" \"Total\" \"Total\" ... #>   ..$ N_OBS   : int [1:414] 405 12878 28043 62053 8135 8140 11961 41359 26686 25108 ... #>   ..$ TOT     : num [1:414] 44475 24827613 8907311 26962063 8584917 ... #>   ..$ MAX     : num [1:414] 6212 1442029 1065833 3084242 3957364 ... #>  $ act_cj   : tibble [406 x 5] (S3: tbl_df/tbl/data.frame) #>   ..$ ACTIVITY: chr [1:406] \"AZ\" \"BE\" \"FZ\" \"GI\" ... #>   ..$ CJ      : chr [1:406] \"Total\" \"Total\" \"Total\" \"Total\" ... #>   ..$ N_OBS   : int [1:406] 405 12878 28043 62053 8135 8140 11961 41359 26686 25108 ... #>   ..$ TOT     : num [1:406] 44475 24827613 8907311 26962063 8584917 ... #>   ..$ MAX     : num [1:406] 6212 1442029 1065833 3084242 3957364 ... #>  $ nuts_size: tibble [460 x 5] (S3: tbl_df/tbl/data.frame) #>   ..$ NUTS : chr [1:460] \"FR10\" \"FR21\" \"FR22\" \"FR23\" ... #>   ..$ SIZE : chr [1:460] \"Total\" \"Total\" \"Total\" \"Total\" ... #>   ..$ N_OBS: int [1:460] 38462 6769 4561 5090 8611 7811 5643 10411 8179 5163 ... #>   ..$ TOT  : num [1:460] 33026385 2947560 1917663 3701935 5089279 ... #>   ..$ MAX  : num [1:460] 3084242 544763 651848 298134 1165019 ... #>  $ nuts_cj  : tibble [452 x 5] (S3: tbl_df/tbl/data.frame) #>   ..$ NUTS : chr [1:452] \"FR10\" \"FR21\" \"FR22\" \"FR23\" ... #>   ..$ CJ   : chr [1:452] \"Total\" \"Total\" \"Total\" \"Total\" ... #>   ..$ N_OBS: int [1:452] 38462 6769 4561 5090 8611 7811 5643 10411 8179 5163 ... #>   ..$ TOT  : num [1:452] 33026385 2947560 1917663 3701935 5089279 ... #>   ..$ MAX  : num [1:452] 3084242 544763 651848 298134 1165019 ..."},{"path":"https://inseefrlab.github.io/rtauargus/articles/protect_multi_tables_fr.html","id":"appliquer-les-règles-de-secret-primaire","dir":"Articles","previous_headings":"Quelques exemples","what":"Appliquer les règles de secret primaire","title":"Protéger des tableaux liés","text":"Ensuite, nous devons appliquer les règles de secret primaire pour chaque table. Ici, nous appliquons 2 règles : La règle de dominance à 85% NK(1,85) et la règle de fréquence avec un seuil fixé à 3. Trois variables ont été ajoutées à chaque tableau. Seule la dernière sera utilisée pendant le processus de suppression. Les deux autres seront utiles pour indiquer l’état final des cellules.","code":"list_data_4_tabs <- list_data_4_tabs %>%   purrr::map(     function(df){       df %>%         mutate(           is_secret_freq = N_OBS > 0 & N_OBS < 3,           is_secret_dom = ifelse(MAX == 0, FALSE, MAX/TOT>0.85),           is_secret_prim = is_secret_freq | is_secret_dom         )     }   ) str(list_data_4_tabs) #> List of 4 #>  $ act_size : tibble [414 x 8] (S3: tbl_df/tbl/data.frame) #>   ..$ ACTIVITY      : chr [1:414] \"AZ\" \"BE\" \"FZ\" \"GI\" ... #>   ..$ SIZE          : chr [1:414] \"Total\" \"Total\" \"Total\" \"Total\" ... #>   ..$ N_OBS         : int [1:414] 405 12878 28043 62053 8135 8140 11961 41359 26686 25108 ... #>   ..$ TOT           : num [1:414] 44475 24827613 8907311 26962063 8584917 ... #>   ..$ MAX           : num [1:414] 6212 1442029 1065833 3084242 3957364 ... #>   ..$ is_secret_freq: logi [1:414] FALSE FALSE FALSE FALSE FALSE FALSE ... #>   ..$ is_secret_dom : logi [1:414] FALSE FALSE FALSE FALSE FALSE FALSE ... #>   ..$ is_secret_prim: logi [1:414] FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ act_cj   : tibble [406 x 8] (S3: tbl_df/tbl/data.frame) #>   ..$ ACTIVITY      : chr [1:406] \"AZ\" \"BE\" \"FZ\" \"GI\" ... #>   ..$ CJ            : chr [1:406] \"Total\" \"Total\" \"Total\" \"Total\" ... #>   ..$ N_OBS         : int [1:406] 405 12878 28043 62053 8135 8140 11961 41359 26686 25108 ... #>   ..$ TOT           : num [1:406] 44475 24827613 8907311 26962063 8584917 ... #>   ..$ MAX           : num [1:406] 6212 1442029 1065833 3084242 3957364 ... #>   ..$ is_secret_freq: logi [1:406] FALSE FALSE FALSE FALSE FALSE FALSE ... #>   ..$ is_secret_dom : logi [1:406] FALSE FALSE FALSE FALSE FALSE FALSE ... #>   ..$ is_secret_prim: logi [1:406] FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ nuts_size: tibble [460 x 8] (S3: tbl_df/tbl/data.frame) #>   ..$ NUTS          : chr [1:460] \"FR10\" \"FR21\" \"FR22\" \"FR23\" ... #>   ..$ SIZE          : chr [1:460] \"Total\" \"Total\" \"Total\" \"Total\" ... #>   ..$ N_OBS         : int [1:460] 38462 6769 4561 5090 8611 7811 5643 10411 8179 5163 ... #>   ..$ TOT           : num [1:460] 33026385 2947560 1917663 3701935 5089279 ... #>   ..$ MAX           : num [1:460] 3084242 544763 651848 298134 1165019 ... #>   ..$ is_secret_freq: logi [1:460] FALSE FALSE FALSE FALSE FALSE FALSE ... #>   ..$ is_secret_dom : logi [1:460] FALSE FALSE FALSE FALSE FALSE FALSE ... #>   ..$ is_secret_prim: logi [1:460] FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ nuts_cj  : tibble [452 x 8] (S3: tbl_df/tbl/data.frame) #>   ..$ NUTS          : chr [1:452] \"FR10\" \"FR21\" \"FR22\" \"FR23\" ... #>   ..$ CJ            : chr [1:452] \"Total\" \"Total\" \"Total\" \"Total\" ... #>   ..$ N_OBS         : int [1:452] 38462 6769 4561 5090 8611 7811 5643 10411 8179 5163 ... #>   ..$ TOT           : num [1:452] 33026385 2947560 1917663 3701935 5089279 ... #>   ..$ MAX           : num [1:452] 3084242 544763 651848 298134 1165019 ... #>   ..$ is_secret_freq: logi [1:452] FALSE FALSE FALSE FALSE FALSE FALSE ... #>   ..$ is_secret_dom : logi [1:452] FALSE FALSE FALSE FALSE FALSE FALSE ... #>   ..$ is_secret_prim: logi [1:452] FALSE FALSE FALSE FALSE FALSE FALSE ..."},{"path":"https://inseefrlab.github.io/rtauargus/articles/protect_multi_tables_fr.html","id":"préparation-de-la-liste-des-variables-explicatives","dir":"Articles","previous_headings":"Quelques exemples","what":"Préparation de la liste des variables explicatives","title":"Protéger des tableaux liés","text":"Nous allons ensuite créer la liste des variables explicatives des tableaux. Dans notre cas, les variables explicatives sont les 2 premières colonnes de chaque tableau. Les noms de la liste doivent être identiques aux noms des tableaux présent dans le paramètre list_tables.","code":"nom_var_list <- purrr::map(   list_data_4_tabs,   function(data) colnames(data)[1:2] ) nom_var_list #> $act_size #> [1] \"ACTIVITY\" \"SIZE\"     #>  #> $act_cj #> [1] \"ACTIVITY\" \"CJ\"       #>  #> $nuts_size #> [1] \"NUTS\" \"SIZE\" #>  #> $nuts_cj #> [1] \"NUTS\" \"CJ\""},{"path":"https://inseefrlab.github.io/rtauargus/articles/protect_multi_tables_fr.html","id":"préparation-de-la-liste-des-codes-pour-les-totaux","dir":"Articles","previous_headings":"Quelques exemples","what":"Préparation de la liste des codes pour les totaux","title":"Protéger des tableaux liés","text":"Les modalités utilisées pour mentionner le total de chaque variable doivent être déclarées par l’utilisateur, dans une liste nominative. Toutefois, lorsque toutes les variables ont la même modalité pour pour le total, l’information peut être spécifiée de la manière suivante :","code":"total_codes <- \"Total\""},{"path":"https://inseefrlab.github.io/rtauargus/articles/protect_multi_tables_fr.html","id":"préparation-des-fichiers-hiérarchiques","dir":"Articles","previous_headings":"Quelques exemples","what":"Préparation des fichiers hiérarchiques","title":"Protéger des tableaux liés","text":"ACTIVITY et NUTS sont duex variables hiérarchiques.utilise une table de correspondance pour chacunes d’entre elles pour créer le fichier .hrc dont τ-Argus besoin. Pour spécifier les nom des fichiers hrc, crée un vecteur nommé (ou une liste) : Les noms du vecteur doivent être identiques aux noms des variables hiérarchiques présentes dans la table","code":"data(activity_corr_table) data(nuts23_fr_corr_table) hrc_file_activity <- write_hrc2(   corr_table = activity_corr_table,   file_name = \"hrc/activity.hrc\" ) hrc_file_nuts <- write_hrc2(   corr_table = nuts23_fr_corr_table,   file_name = \"hrc/nuts.hrc\" ) hrc_files <- list(   ACTIVITY = hrc_file_activity,   NUTS = hrc_file_nuts )"},{"path":"https://inseefrlab.github.io/rtauargus/articles/protect_multi_tables_fr.html","id":"protéger-tous-les-tableaux-en-un-seul-appel","dir":"Articles","previous_headings":"Quelques exemples","what":"Protéger tous les tableaux en un seul appel","title":"Protéger des tableaux liés","text":"","code":"res <- tab_multi_manager(     list_tables = list_data_4_tabs,     list_explanatory_vars = nom_var_list,     dir_name = \"tauargus_files/ex4\",     hrc = hrc_files,     totcode = total_codes,     value = \"TOT\",     freq = \"N_OBS\",     secret_var = \"is_secret_prim\" ) #> --- Current table to treat:  act_size --- #> --- Current table to treat:  act_cj --- #> --- Current table to treat:  act_size --- #> --- Current table to treat:  nuts_size --- #> --- Current table to treat:  nuts_cj ---"},{"path":"https://inseefrlab.github.io/rtauargus/articles/protect_multi_tables_fr.html","id":"résultats-1","dir":"Articles","previous_headings":"Quelques exemples","what":"Résultats","title":"Protéger des tableaux liés","text":"","code":"list_with_status <- res %>%   purrr::map(     function(df){       df %>%         rename_with(~\"final_suppress\", last_col()) %>%         mutate(           status = case_when(             is_secret_freq ~ \"A\",             is_secret_dom ~ \"B\",             final_suppress ~ \"D\",             TRUE ~\"V\"           )         ) %>%         select(1:2, TOT, N_OBS, status)     }   ) str(list_with_status$act_size) #> 'data.frame':    414 obs. of  5 variables: #>  $ ACTIVITY: chr  \"01\" \"01\" \"02\" \"02\" ... #>  $ SIZE    : chr  \"Total\" \"tr1\" \"Total\" \"tr1\" ... #>  $ TOT     : num  853 853 43623 35503 8120 ... #>  $ N_OBS   : int  18 18 387 381 6 1 1 4 4 84 ... #>  $ status  : chr  \"V\" \"V\" \"V\" \"V\" ... list_with_status %>%   purrr::iwalk(     function(df,name){       cat(name, \"\\n\")       df %>% count(status) %>% print()     }   ) #> act_size  #>   status   n #> 1      A  52 #> 2      B  25 #> 3      D  83 #> 4      V 254 #> act_cj  #>   status   n #> 1      A  35 #> 2      B  25 #> 3      D  88 #> 4      V 258 #> nuts_size  #>   status   n #> 1      A  55 #> 2      B  17 #> 3      D  82 #> 4      V 306 #> nuts_cj  #>   status   n #> 1      A  45 #> 2      B  20 #> 3      D 101 #> 4      V 286"},{"path":"https://inseefrlab.github.io/rtauargus/articles/protect_multi_tables_fr.html","id":"traiter-les-hiérarchies-non-emboitées","dir":"Articles","previous_headings":"Quelques exemples","what":"Traiter les hiérarchies non emboitées","title":"Protéger des tableaux liés","text":"Supposons que l’veuille protéger les deux tableaux croisant ACTIVITY et SIZE d’une part et ACTIVITY et CJ d’autre part. La variable ACTIVITY est une variable hiérarchique. De plus, dans ce cas, nous aimerions publier un sous-total, appelé D_TO_M, en plus de ceux de la activity_corr_table. Ce sous-total est la somme des étiquettes D à M du niveau A21. Comme ce sous-total ne peut pas être inséré dans la hiérarchie principale, cela nous conduit à un cas de hiérarchies non emboitées. Pour confirmer le non-emboîtement des deux hiérarchies, affichons un extrait des deux. Extrait de la hiérarchie principale : Extrait de la hiérarchie alternative: Pour traiter ce cas, l’approche préférée est de créer un troisième tableau croisant ACTIVITY et SIZE avec les modalités D à M et le sous-total D_TO_M : Créons le fichier correspondant à cette hiérarchie : Ensuite, construisons la liste des tableaux et appliquons les règles de secret primaire dessus. Les arguments hrc et alt_hrc sont utilisés pour mentionner les deux hiérarchies de la variable ACTIVITY : hrc est utilisé comme dans l’exemple précédent (un vecteur nommé où les noms sont les différentes variables hiérarchiques apparaissant dans les tableaux et les valeurs sont les noms des fichiers). Ainsi, le fichier de hiérarchie par défaut sera pris dans ce vecteur. alt_hrc n’est utilisé que pour mentionner les hiérarchies alternatives. Cet argument est une liste nommée où les noms sont les tableaux où les hiérarchies alternatives doivent être appliquées. Le même raisonnement est utilisé pour remplir l’argument alt_totcode.","code":"sdcHierarchies::hier_create(   root=\"Total\",   nodes = activity_corr_table$A10 %>% unique() ) %>%   sdcHierarchies::hier_display() #> Total #> +-AZ #> +-BE #> +-FZ #> +-GI #> +-JZ #> +-KZ #> +-LZ #> +-MN #> +-OQ #> \\-RU sdcHierarchies::hier_create(   root=\"D_TO_M\",   nodes = activity_corr_table_D_TO_M$A21 ) %>%   sdcHierarchies::hier_display() #> D_TO_M #> +-D #> +-E #> +-F #> +-G #> +-H #> +-I #> +-J #> +-K #> +-L #> \\-M turnover_act_size_D_TO_M <- turnover_act_size %>%   filter(     ACTIVITY %in% LETTERS[4:13]   ) %>%   bind_rows(     turnover_act_size %>%       filter(         ACTIVITY %in% LETTERS[4:13]       ) %>%       group_by(SIZE) %>%       summarise(N_OBS = sum(N_OBS), TOT = sum(TOT), MAX = max(MAX)) %>%       mutate(ACTIVITY = \"D_TO_M\")   ) str(turnover_act_size_D_TO_M) #> tibble [44 x 5] (S3: tbl_df/tbl/data.frame) #>  $ ACTIVITY: chr [1:44] \"D\" \"E\" \"F\" \"G\" ... #>  $ SIZE    : chr [1:44] \"Total\" \"Total\" \"Total\" \"Total\" ... #>  $ N_OBS   : int [1:44] 1411 828 28043 41624 6524 13905 8135 8140 11961 28221 ... #>  $ TOT     : num [1:44] 2438454 2264393 8907311 18244309 6273334 ... #>  $ MAX     : num [1:44] 981369 306905 1065833 765244 3084242 ... activity_corr_table_D_TO_M <- activity_corr_table %>%   filter(A21 %in% LETTERS[4:13]) %>%   select(-A88) %>%   mutate(A10 = \"D_TO_M\") %>%   unique()  hrc_file_activity_D_TO_M <- activity_corr_table_D_TO_M %>%   select(-1) %>%   write_hrc2(file_name = \"hrc/activity_D_TO_M\") list_data_3_tabs_nn <- list(   act_size = turnover_act_size,   act_size_D_TO_M = turnover_act_size_D_TO_M,   act_cj = turnover_act_cj ) %>%   purrr::map(     function(df){       df %>%         mutate(           is_secret_freq = N_OBS > 0 & N_OBS < 3,           is_secret_dom = ifelse(MAX == 0, FALSE, MAX/TOT>0.85),           is_secret_prim = is_secret_freq | is_secret_dom         )     }   ) res <- tab_multi_manager(   list_tables = list_data_3_tabs_nn,   list_explanatory_vars = list(     act_size = c(\"ACTIVITY\", \"SIZE\"),     act_size_D_TO_M = c(\"ACTIVITY\", \"SIZE\"),     act_cj = c(\"ACTIVITY\", \"CJ\")   ),   hrc = c(ACTIVITY = hrc_file_activity),   alt_hrc = list(     act_size_D_TO_M = c(ACTIVITY = hrc_file_activity_D_TO_M)   ),   dir_name = \"tauargus_files/ex5\",   value = \"TOT\",   freq = \"N_OBS\",   secret_var = \"is_secret_prim\",   totcode =  \"Total\",   alt_totcode = list(     act_size_D_TO_M = c(ACTIVITY = \"D_TO_M\")   ) ) #> --- Current table to treat:  act_size --- #> --- Current table to treat:  act_size_D_TO_M --- #> --- Current table to treat:  act_cj --- #> --- Current table to treat:  act_size --- #> --- Current table to treat:  act_size_D_TO_M --- #> --- Current table to treat:  act_size --- #> --- Current table to treat:  act_cj ---"},{"path":"https://inseefrlab.github.io/rtauargus/articles/protect_multi_tables_fr.html","id":"détail-de-la-vignette","dir":"Articles","previous_headings":"Quelques exemples > Traiter les hiérarchies non emboitées","what":"Détail de la vignette","title":"Protéger des tableaux liés","text":"Last update: 17/02/2025 Version rtauargus used: 1.2.999 Version τ-Argus used : TauArgus 4.2.3 R version used : 4.3.3 summary ↑","code":""},{"path":[]},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus.html","id":"presentation-of-the-package","dir":"Articles","previous_headings":"Introduction","what":"Presentation of the package","title":"&tau;-Argus from R - tabular version","text":"rtauargus package offers R interface τ-Argus. allows : create inputs (asc, tab rda files) R data; generate sequence instructions executed batch mode (arb file); launch batch τ-Argus ; retrieve results R. syntax arguments closely matches batch syntax τ-Argus. allows large number functions used without multiplying arguments functions. package also able adapt easily possible modifications software (new methods available, additional options…). syntax rules writing batch given τ-Argus reference manual specified dedicated help section. package developed basis open source versions τ-Argus (versions 4.2 ), particular latest version available time development (4.2.3). compatible version 3.5.**_","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus.html","id":"purpose-of-this-document","dir":"Articles","previous_headings":"Introduction","what":"Purpose of this document","title":"&tau;-Argus from R - tabular version","text":"document aims explain main functionalities package, using relatively simple examples. detailed documentation function (exhaustive list arguments, technical aspects…) available via dedicated help section. summary ↑","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"&tau;-Argus from R - tabular version","text":"following setup made first use (longer afterwards)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus.html","id":"τ-argus","dir":"Articles","previous_headings":"Setup","what":"τ-Argus","title":"&tau;-Argus from R - tabular version","text":"rtauargus fonctions using τ-Argus requires software can used workstation. github repository τ-Argus : https://github.com/sdcTools/tauargus. latest releases can downloaded : https://github.com/sdcTools/tauargus/releases.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus.html","id":"dependencies","dir":"Articles","previous_headings":"Setup","what":"Dependencies","title":"&tau;-Argus from R - tabular version","text":"rtauargus requires R packages.dependencies install. package rtauargus can installed now. sommaire ↑","code":"• purrr (>= 0.2) • dplyr (>= 0.7) • tidyr • data.table • gdata, • stringr • rlang • zoo • sdcHierarchies • igraph • lifecycle"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick Start","title":"&tau;-Argus from R - tabular version","text":"section explains perform minimal configuration package apply suppressive methods single instruction.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus.html","id":"location-of-τ-argus","dir":"Articles","previous_headings":"Quick Start","what":"Location of τ-Argus","title":"&tau;-Argus from R - tabular version","text":"loading package, console displays information: particular, plausible location τ-Argus software predefined. can changed duration R session, follows: small adjustment done, package ready used. customized configuration, see specific vignettes","code":"library(rtauargus) loc_tauargus <- \"Y:/Logiciels/TauArgus/TauArgus4.2.3/TauArgus.exe\"  options(rtauargus.tauargus_exe = loc_tauargus)"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus.html","id":"protecting-a-single-tabular-data-with-tab_rtauargus-function","dir":"Articles","previous_headings":"Quick Start","what":"Protecting a single tabular data with tab_rtauargus() function","title":"&tau;-Argus from R - tabular version","text":"tab_rtauargus() function performs full processing protect table retrieves results immediately R. Completely abstracting inner workings τ-Argus, allows entire processing made single instruction. intermediate files created local directory. tab_rtauargus() requires following arguments : tabular: data.frame containing table ; dir_name: directory outputs; files_name: τ-Argus files named (different extensions); explanatory_vars: name explanatory variables tabular; secret_var safety_rules: way apply primary suppression (explain later) totcode: code total explanatory variable tabular arguments default options detailed ( ?).","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus.html","id":"minimal-example","dir":"Articles","previous_headings":"Quick Start > Protecting a single tabular data with tab_rtauargus() function","what":"Minimal example","title":"&tau;-Argus from R - tabular version","text":"following demonstration, fictitious table used: primary rules, use two following ones: n-k dominance rule n=1 k = 85 minimum frequency rule n = 3 safety range 10. get results dominance rule, need specify largest contributor cell, corresponding MAX variable tabular data. default, function displays console logbook content user can read steps run τ-Argus. can retrieved logbook.txt file. verbose = FALSE, function can silenced. default, function returns original dataset one variable , called Status, directly resulting τ-Argus describing status cell follows: -: primary secret cell frequency rule; -B: primary secret cell dominance rule (1st contributor); -C: primary secret cell frequency rule (contributors case n>1); -D: secondary secret cell; -V: valid cells - need mask. files generated function written specified directory (dir_name argument). default format protected table csv can changed. τ-Argus files (.tab, .rda, .arb .txt) written directory, . go , can consult latest version τ-Argus manual downloadable : https://research.cbs.nl/casc/Software/TauManualV4.1.pdf.","code":"act_size <-   data.frame(     ACTIVITY = c(\"01\",\"01\",\"01\",\"02\",\"02\",\"02\",\"06\",\"06\",\"06\",\"Total\",\"Total\",\"Total\"),     SIZE = c(\"tr1\",\"tr2\",\"Total\",\"tr1\",\"tr2\",\"Total\",\"tr1\",\"tr2\",\"Total\",\"tr1\",\"tr2\",\"Total\"),     VAL = c(100,50,150,30,20,50,60,40,100,190,110,300),     N_OBS = c(10,5,15,2,5,7,8,6,14,20,16,36),     MAX = c(20,15,20,20,10,20,16,38,38,20,38,38)   ) act_size #>    ACTIVITY  SIZE VAL N_OBS MAX #> 1        01   tr1 100    10  20 #> 2        01   tr2  50     5  15 #> 3        01 Total 150    15  20 #> 4        02   tr1  30     2  20 #> 5        02   tr2  20     5  10 #> 6        02 Total  50     7  20 #> 7        06   tr1  60     8  16 #> 8        06   tr2  40     6  38 #> 9        06 Total 100    14  38 #> 10    Total   tr1 190    20  20 #> 11    Total   tr2 110    16  38 #> 12    Total Total 300    36  38 ex1 <- tab_rtauargus(   act_size,   dir_name = \"tauargus_files/ex1\",   files_name = \"ex1\",   explanatory_vars = c(\"ACTIVITY\",\"SIZE\"),   safety_rules = \"FREQ(3,10)|NK(1,85)\",   value = \"VAL\",   freq = \"N_OBS\",   maxscore = \"MAX\",   totcode = c(ACTIVITY=\"Total\",SIZE=\"Total\") ) #> Start of batch procedure; file: Z:\\rtauargus\\vignettes\\tauargus_files\\ex1\\ex1.arb #> <OPENTABLEDATA> \"Z:\\rtauargus\\vignettes\\tauargus_files\\ex1\\ex1.tab\" #> <OPENMETADATA> \"Z:\\rtauargus\\vignettes\\tauargus_files\\ex1\\ex1.rda\" #> <SPECIFYTABLE> \"ACTIVITY\"\"SIZE\"|\"VAL\"|| #> <SAFETYRULE> FREQ(3,10)|NK(1,85) #> <READTABLE> 1 #> Tables have been read #> <SUPPRESS> MOD(1,5,1,0,0) #> Start of the modular protection for table ACTIVITY x SIZE | VAL #> End of modular protection. Time used 0 seconds #>                    Number of suppressions: 2 #> <WRITETABLE> (1,4,,\"Z:\\rtauargus\\vignettes\\tauargus_files\\ex1\\ex1.csv\") #> Table: ACTIVITY x SIZE | VAL has been written #>                    Output file name: Z:\\rtauargus\\vignettes\\tauargus_files\\ex1\\ex1.csv #> End of TauArgus run ex1 #>    ACTIVITY  SIZE VAL N_OBS MAX Status #> 1        01 Total 150    15  20      V #> 2        01   tr1 100    10  20      V #> 3        01   tr2  50     5  15      V #> 4        02 Total  50     7  20      V #> 5        02   tr1  30     2  20      A #> 6        02   tr2  20     5  10      D #> 7        06 Total 100    14  38      V #> 8        06   tr1  60     8  16      D #> 9        06   tr2  40     6  38      B #> 10    Total Total 300    36  38      V #> 11    Total   tr1 190    20  20      V #> 12    Total   tr2 110    16  38      V"},{"path":[]},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus.html","id":"data","dir":"Articles","previous_headings":"Quick Start > Protecting a single tabular data with tab_rtauargus() function > Example with hierarchy and primary secret already done","what":"Data","title":"&tau;-Argus from R - tabular version","text":"example, ’d like protect table companies’ turnover broken business sectors size. load data, : meaning variable : -ACTIVITY: business sector, hierarchical variables three levels described activity_corr_table dataset. root noted “Total”; -SIZE: size companies (Number employees three categories + overall category “Total”); -N_OBS: Frequency, number companies; -TOT: turnover value euros; -MAX: turnover company contributes cell.","code":"data(\"turnover_act_size\") head(turnover_act_size) #> # A tibble: 6 x 5 #>   ACTIVITY SIZE  N_OBS       TOT       MAX #>   <chr>    <chr> <int>     <dbl>     <dbl> #> 1 AZ       Total   405    44475.     6212. #> 2 BE       Total 12878 24827613.  1442029. #> 3 FZ       Total 28043  8907311.  1065833. #> 4 GI       Total 62053 26962063.  3084242. #> 5 JZ       Total  8135  8584917.  3957364. #> 6 KZ       Total  8140 62556596. 10018017."},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus.html","id":"hierarchys-file","dir":"Articles","previous_headings":"Quick Start > Protecting a single tabular data with tab_rtauargus() function > Example with hierarchy and primary secret already done","what":"Hierarchy’s file","title":"&tau;-Argus from R - tabular version","text":"performing tab_rtauargus() function, prepare hierarchical information appropriate format τ-Argus, ..e. .hrc file. correspondence table, write_hrc2() function job . , correspondence table describes nesting three levels business sectors, aggregated least one:","code":"data(activity_corr_table) head(activity_corr_table) #>   A10 A21 A88 #> 1  AZ   A  01 #> 2  AZ   A  02 #> 3  AZ   X   X #> 4  BE   B  06 #> 5  BE   B  07 #> 6  BE   B  08 hrc_file_activity <- write_hrc2(   corr_table = activity_corr_table,   file_name = \"hrc/activity.hrc\" )"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus.html","id":"primary-secret","dir":"Articles","previous_headings":"Quick Start > Protecting a single tabular data with tab_rtauargus() function > Example with hierarchy and primary secret already done","what":"Primary secret","title":"&tau;-Argus from R - tabular version","text":"example, ’ll apply primary secret , .e. help τ-Argus. idea use τ-Argus apriori file. purpose, create boolean variable specify cells don’t comply primary secret rules. Using rules , get:","code":"turnover_act_size <- turnover_act_size %>%   mutate(     is_secret_freq = N_OBS > 0 & N_OBS < 3,     is_secret_dom = MAX > TOT*0.85,     is_secret_prim = is_secret_freq | is_secret_dom   )"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus.html","id":"running-τ-argus","dir":"Articles","previous_headings":"Quick Start > Protecting a single tabular data with tab_rtauargus() function > Example with hierarchy and primary secret already done","what":"Running τ-Argus","title":"&tau;-Argus from R - tabular version","text":"Two arguments added tab_rtauargus() function: -secret_var, indicating name variable tabular containing primary secret (apriori) information; -hrc, indicating name hierarchy file use ACTIVITY variable. Since primary suppression already specified, need use arguments, safety_rules maxscore. first one set default “MAN(10)”, say 10% Interval Protection applied. default, tab_rtauargus() runs Modular method perform secondary secret. , choose use Optimal method changing suppress argument.","code":"ex2 <- tab_rtauargus(   turnover_act_size,   dir_name = \"tauargus_files/ex2\",   files_name = \"ex2\",   explanatory_vars = c(\"ACTIVITY\",\"SIZE\"),   value = \"TOT\",   freq = \"N_OBS\",   secret_var = \"is_secret_prim\",   hrc = c(ACTIVITY = hrc_file_activity),   totcode = c(ACTIVITY=\"Total\",SIZE=\"Total\"),   suppress = \"OPT(1,5)\",   verbose=FALSE )"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus.html","id":"result","dir":"Articles","previous_headings":"Quick Start > Protecting a single tabular data with tab_rtauargus() function > Example with hierarchy and primary secret already done","what":"Result","title":"&tau;-Argus from R - tabular version","text":"can see table() results, primary secret status “B” output produced τ-Argus. adjust , can :","code":"str(ex2) #> 'data.frame':    414 obs. of  9 variables: #>  $ ACTIVITY      : chr  \"01\" \"01\" \"02\" \"02\" ... #>  $ SIZE          : chr  \"Total\" \"tr1\" \"Total\" \"tr1\" ... #>  $ N_OBS         : int  18 18 387 381 6 1 1 4 4 84 ... #>  $ TOT           : num  853 853 43623 35503 8120 ... #>  $ MAX           : num  303 303 6212 6212 4812 ... #>  $ is_secret_freq: logi  FALSE FALSE FALSE FALSE FALSE TRUE ... #>  $ is_secret_dom : logi  FALSE FALSE FALSE FALSE FALSE TRUE ... #>  $ is_secret_prim: logi  FALSE FALSE FALSE FALSE FALSE TRUE ... #>  $ Status        : chr  \"V\" \"V\" \"V\" \"V\" ... table(ex2$Status) #>  #>   B   D   V  #>  77  64 273 ex2 %>%   mutate(     Status = dplyr::case_when(       is_secret_freq ~ \"A\",       TRUE ~ Status     )   ) %>%   dplyr::count(Status) #>   Status   n #> 1      A  52 #> 2      B  25 #> 3      D  64 #> 4      V 273"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus.html","id":"protecting-several-tables-at-the-same-time-with-tab_muli_manager-function","dir":"Articles","previous_headings":"Quick Start","what":"Protecting several tables at the same time, with tab_muli_manager() function","title":"&tau;-Argus from R - tabular version","text":"function tab_multi_manager() can deal whole set (linked ) tables. iterating process, performing secondary suppression one table time ensures common cells status. common cell concerned secondary suppression, reverberates secret table shares common cell. process ends secondary secret consistent every tables. See details vignettes Manage protection linked tables","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus.html","id":"data-1","dir":"Articles","previous_headings":"Quick Start > Protecting several tables at the same time, with tab_muli_manager() function","what":"Data","title":"&tau;-Argus from R - tabular version","text":"example, two tables used : second tabular dataset provides turnover companies broken business sectors (ACTIVITY) type company (CJ). latter three categories overall category noted “Total”. Since two tables share one common explanatory variable (ACTIVITY), can’t treated separately without risk inconsistent protection.","code":"data(\"turnover_act_size\") data(\"turnover_act_cj\") str(turnover_act_cj) #> tibble [406 x 5] (S3: tbl_df/tbl/data.frame) #>  $ ACTIVITY: chr [1:406] \"AZ\" \"BE\" \"FZ\" \"GI\" ... #>  $ CJ      : chr [1:406] \"Total\" \"Total\" \"Total\" \"Total\" ... #>  $ N_OBS   : int [1:406] 405 12878 28043 62053 8135 8140 11961 41359 26686 25108 ... #>  $ TOT     : num [1:406] 44475 24827613 8907311 26962063 8584917 ... #>  $ MAX     : num [1:406] 6212 1442029 1065833 3084242 3957364 ..."},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus.html","id":"primary-secret-1","dir":"Articles","previous_headings":"Quick Start > Protecting several tables at the same time, with tab_muli_manager() function","what":"Primary secret","title":"&tau;-Argus from R - tabular version","text":"first step consists indicating whether cell complies primary rules, . boolean variable created, equal TRUE cell doesn’t comply. , use rules previously.","code":"list_data_2_tabs <- list(   act_size = turnover_act_size,   act_cj = turnover_act_cj ) %>%   purrr::map(     function(df){       df %>%         mutate(           is_secret_freq = N_OBS > 0 & N_OBS < 3,           is_secret_dom = MAX > TOT*0.85,           is_secret_prim = is_secret_freq | is_secret_dom         )     }   )"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus.html","id":"running-τ-argus-1","dir":"Articles","previous_headings":"Quick Start > Protecting several tables at the same time, with tab_muli_manager() function","what":"Running τ-Argus","title":"&tau;-Argus from R - tabular version","text":"Now primary secret specified tables, can run process. default, function uses wrapper tab_rtauargus() function, called tab_rtauargus2(), apply secondary secret τ-Argus. Many default parameters set. particular: Interval Protection fixed 10; Suppress method set “MOD(1,5,1,0,0); Output. running, function displays iteration table treated. vignette Manage protection linked tables provides full presentation tab_multi_manager() function.","code":"ex3 <- tab_multi_manager(   list_tables = list_data_2_tabs,   list_explanatory_vars = list(     act_size = c(\"ACTIVITY\", \"SIZE\"),     act_cj = c(\"ACTIVITY\", \"CJ\")   ),   hrc = c(ACTIVITY = hrc_file_activity),   dir_name = \"tauargus_files/ex3\",   value = \"TOT\",   freq = \"N_OBS\",   secret_var = \"is_secret_prim\",   totcode =  \"Total\" ) #> --- Current table to treat:  act_size --- #> --- Current table to treat:  act_cj --- #> --- Current table to treat:  act_size ---"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus.html","id":"about-this-vignette","dir":"Articles","previous_headings":"Quick Start > Protecting several tables at the same time, with tab_muli_manager() function","what":"About this vignette","title":"&tau;-Argus from R - tabular version","text":"Authors: Julien Jamme & Nathanael Rastout Last update: 17/02/2025 Version rtauargus used: 1.2.999 Version τ-Argus used : TauArgus 4.2.3 R version used : 4.3.3 summary ↑","code":""},{"path":[]},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_fr.html","id":"présentation-du-package","dir":"Articles","previous_headings":"Introduction","what":"Présentation du package","title":"Tau-Argus depuis R - données tabulées","text":"Le package rtauargus offre une interface R pour τ-Argus. Il permet de : créer des input (fichiers asc, tab et rda) à partir de données R ; de générer la séquence d’instructions à exécuter en mode batch (fichier arb) ; lancer un batch τ-Argus ; récupérer les résultats dans R. La syntaxe de certains des arguments correspond étroitement à la syntaxe batch de τ-Argus. Cela permet d’utiliser un nombre important de fonctions sans multiplier les arguments des fonctions. Le package pourra également s’adapter plus facilement aux éventuelles modifications du logiciel (nouveaux algorithmes disponibles, options supplémentaires…). Les règles de syntaxes d’écriture du batch sont détaillés dans le manuel de référence de τ-Argus et sont égalements précisées dans la vignette options_safety_rules. Le package été développé sur la base de versions open source de τ-Argus (versions 4.2 et supérieures), en particulier la dernière version disponible au moment du développement (4.2.3). Il n’est pas compatible avec la version 3.5.**_.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_fr.html","id":"but-de-ce-document","dir":"Articles","previous_headings":"Introduction","what":"But de ce document","title":"Tau-Argus depuis R - données tabulées","text":"Ce document pour d’expliquer les principales fonctionnalités du package, en utilisant des exemples relativement simples. Une documentation détaillée de toute fonction (liste exhaustive des arguments, aspects techniques…) est disponible via la section d’aide dédiée. summary ↑","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_fr.html","id":"configuration","dir":"Articles","previous_headings":"","what":"Configuration","title":"Tau-Argus depuis R - données tabulées","text":"Le paramétrage suivant doit être fait avant la première utilisation (et plus après).","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_fr.html","id":"τ-argus","dir":"Articles","previous_headings":"Configuration","what":"τ-Argus","title":"Tau-Argus depuis R - données tabulées","text":"rtauargus fonctions utilisant τ-Argus nécessite que le logiciel puisse être utilisé depuis le poste de travail. Le dépôt github de τ-Argus est ici : https://github.com/sdcTools/tauargus. Les dernières versions peuvent être téléchargées ici : https://github.com/sdcTools/tauargus/releases.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_fr.html","id":"dépendances","dir":"Articles","previous_headings":"Configuration","what":"Dépendances","title":"Tau-Argus depuis R - données tabulées","text":"rtauargus nécessite quelques autres packages R. Voici les dépendances à installer. Le package rtauargus peut être installé maintenant. summary ↑","code":"• purrr (>= 0.2) • dplyr (>= 0.7) • tidyr • data.table • gdata, • stringr • rlang • zoo • sdcHierarchies • igraph • lifecycle"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_fr.html","id":"prise-en-main","dir":"Articles","previous_headings":"","what":"Prise en main","title":"Tau-Argus depuis R - données tabulées","text":"Cette section explique comment effectuer une configuration minimale du package et comment appliquer des méthodes de suppression en une seule instruction.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_fr.html","id":"location-de-τ-argus","dir":"Articles","previous_headings":"Prise en main","what":"Location de τ-Argus","title":"Tau-Argus depuis R - données tabulées","text":"Lors du chargement du package, la console affiche quelques informations : En particulier, un emplacement plausible pour le logiciel τ-Argus est prédéfini. Celui-ci peut être modifié pour la durée de la session R, comme suit : Une fois ce petit ajustement effectué, le package est prêt à être utilisé. Pour une configuration plus personnalisée, voir les vignettes spécifiques.","code":"library(rtauargus) loc_tauargus <- \"Y:/Logiciels/TauArgus/TauArgus4.2.3/TauArgus.exe\"  options(rtauargus.tauargus_exe = loc_tauargus)"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_fr.html","id":"protéger-un-seul-tableau-avec-la-fonction-tab_rtauargus-","dir":"Articles","previous_headings":"Prise en main","what":"Protéger un seul tableau avec la fonction tab_rtauargus().","title":"Tau-Argus depuis R - données tabulées","text":"La fonction tab_rtauargus() effectue un traitement complet pour protéger le tableau et récupère immédiatement les résultats dans R. En s’abstrayant complètement du fonctionnement interne de τ-Argus, elle permet de réaliser l’ensemble des traitements en une seule instruction. Tous les fichiers intermédiaires sont créés dans un répertoire local. tab_rtauargus() requiert les arguments suivants : tabular : un data.frame contenant le tableau ; dir_name : le répertoire pour les sorties ; files_name : tous les fichiers τ-Argus seront nommés ainsi(différentes extensions) ; explanatory_vars : le nom de toutes les variables explicatives dans tabular ; secret_var ou safety_rules : la manière d’appliquer la suppression primaire (expliqué plus tard) totcode : le code pour le total de chaque variable explicative dans tabular. Tous les arguments et leurs options par défaut seront détaillés ( où ?).","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_fr.html","id":"exemple-minimal","dir":"Articles","previous_headings":"Prise en main > Protéger un seul tableau avec la fonction tab_rtauargus().","what":"Exemple minimal","title":"Tau-Argus depuis R - données tabulées","text":"Pour la présentation un tableau fictif sera utilisé : Nous utiliserons ces deux règles de secret primaire : La règle de dominance n-k avec n=1 et k = 85. La règle de fréquence minimale avec n = 3 et un intervalle de protection à 10%. Pour obtenir les résultats de la règle de dominance, nous devons spécifier le plus grand contributeur de chaque cellule, correspondant à la variable MAX dans les données tabulées. Par défaut, la fonction affiche dans la console le contenu du journal de bord dans lequel l’utilisateur peut lire toutes les étapes exécutées par τ-Argus. Ceci peut être récupéré dans le fichier logbook.txt. Avec verbose = FALSE, les étapes seront seulement conservées dans le journal. Par défaut, la fonction renvoie le tableau fournit en entrée avec une variable de plus appelée Status, issue directement de τ-Argus et décrivant le statut de chaque cellule comme suit : -: cellule en secret primaire en raison de la règle de fréquence ; -B : cellule en secret primaire en raison de la règle de dominance (1er contributeur) ; -C : cellule en secret primaire en raison de la règle de dominance(plus de contributeurs dans le cas où n>1) ; -D : cellule en secret secondaire ; -V : cellules valides - pas besoin de masquer. Tous les fichiers générés par la fonction sont écrits dans le répertoire spécifié (argument dir_name). Le format par défaut du tableau protégé est csv mais il peut être modifié. Tous les fichiers τ-Argus (.tab, .rda, .arb et .txt) sont écrits dans le même répertoire. Pour aller plus loin, vous pouvez consulter la dernière version du manuel de τ-Argus téléchargeable ici : https://research.cbs.nl/casc/Software/TauManualV4.1.pdf.","code":"act_size <-   data.frame(     ACTIVITY = c(\"01\",\"01\",\"01\",\"02\",\"02\",\"02\",\"06\",\"06\",\"06\",\"Total\",\"Total\",\"Total\"),     SIZE = c(\"tr1\",\"tr2\",\"Total\",\"tr1\",\"tr2\",\"Total\",\"tr1\",\"tr2\",\"Total\",\"tr1\",\"tr2\",\"Total\"),     VAL = c(100,50,150,30,20,50,60,40,100,190,110,300),     N_OBS = c(10,5,15,2,5,7,8,6,14,20,16,36),     MAX = c(20,15,20,20,10,20,16,38,38,20,38,38)   ) act_size #>    ACTIVITY  SIZE VAL N_OBS MAX #> 1        01   tr1 100    10  20 #> 2        01   tr2  50     5  15 #> 3        01 Total 150    15  20 #> 4        02   tr1  30     2  20 #> 5        02   tr2  20     5  10 #> 6        02 Total  50     7  20 #> 7        06   tr1  60     8  16 #> 8        06   tr2  40     6  38 #> 9        06 Total 100    14  38 #> 10    Total   tr1 190    20  20 #> 11    Total   tr2 110    16  38 #> 12    Total Total 300    36  38 ex1 <- tab_rtauargus(   act_size,   dir_name = \"tauargus_files/ex1\",   files_name = \"ex1\",   explanatory_vars = c(\"ACTIVITY\",\"SIZE\"),   safety_rules = \"FREQ(3,10)|NK(1,85)\",   value = \"VAL\",   freq = \"N_OBS\",   maxscore = \"MAX\",   totcode = c(ACTIVITY=\"Total\",SIZE=\"Total\") ) #> Start of batch procedure; file: Z:\\rtauargus\\vignettes\\tauargus_files\\ex1\\ex1.arb #> <OPENTABLEDATA> \"Z:\\rtauargus\\vignettes\\tauargus_files\\ex1\\ex1.tab\" #> <OPENMETADATA> \"Z:\\rtauargus\\vignettes\\tauargus_files\\ex1\\ex1.rda\" #> <SPECIFYTABLE> \"ACTIVITY\"\"SIZE\"|\"VAL\"|| #> <SAFETYRULE> FREQ(3,10)|NK(1,85) #> <READTABLE> 1 #> Tables have been read #> <SUPPRESS> MOD(1,5,1,0,0) #> Start of the modular protection for table ACTIVITY x SIZE | VAL #> End of modular protection. Time used 0 seconds #>                    Number of suppressions: 2 #> <WRITETABLE> (1,4,,\"Z:\\rtauargus\\vignettes\\tauargus_files\\ex1\\ex1.csv\") #> Table: ACTIVITY x SIZE | VAL has been written #>                    Output file name: Z:\\rtauargus\\vignettes\\tauargus_files\\ex1\\ex1.csv #> End of TauArgus run ex1 #>    ACTIVITY  SIZE VAL N_OBS MAX Status #> 1        01 Total 150    15  20      V #> 2        01   tr1 100    10  20      V #> 3        01   tr2  50     5  15      V #> 4        02 Total  50     7  20      V #> 5        02   tr1  30     2  20      A #> 6        02   tr2  20     5  10      D #> 7        06 Total 100    14  38      V #> 8        06   tr1  60     8  16      D #> 9        06   tr2  40     6  38      B #> 10    Total Total 300    36  38      V #> 11    Total   tr1 190    20  20      V #> 12    Total   tr2 110    16  38      V"},{"path":[]},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_fr.html","id":"données","dir":"Articles","previous_headings":"Prise en main > Protéger un seul tableau avec la fonction tab_rtauargus(). > Exemple avec une hiérarchie et pose du secret primaire via R","what":"Données","title":"Tau-Argus depuis R - données tabulées","text":"Dans cet exemple, nous souhaitons protéger un tableau dans lequel le chiffre d’affaires des entreprises est ventilé par secteur d’activité et par taille. Pour charger les données : La signification de chaque variable est la suivante : -ACTIVITY : secteur d’activité, variables hiérarchiques à trois niveaux décrites dans l’ensemble de données activity_corr_table. La racine est notée “Total” ; -SIZE : taille des entreprises (Nombre d’employés dans trois modalités + la marge “Total”) ; -N_OBS : Fréquence, nombre d’entreprises ; -TOT : valeur du chiffre d’affaires en euros ; -MAX : chiffre d’affaires de l’entreprise qui contribue le plus à la cellule.","code":"data(\"turnover_act_size\") head(turnover_act_size) #> # A tibble: 6 x 5 #>   ACTIVITY SIZE  N_OBS       TOT       MAX #>   <chr>    <chr> <int>     <dbl>     <dbl> #> 1 AZ       Total   405    44475.     6212. #> 2 BE       Total 12878 24827613.  1442029. #> 3 FZ       Total 28043  8907311.  1065833. #> 4 GI       Total 62053 26962063.  3084242. #> 5 JZ       Total  8135  8584917.  3957364. #> 6 KZ       Total  8140 62556596. 10018017."},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_fr.html","id":"fichier-hiérarchique","dir":"Articles","previous_headings":"Prise en main > Protéger un seul tableau avec la fonction tab_rtauargus(). > Exemple avec une hiérarchie et pose du secret primaire via R","what":"Fichier hiérarchique","title":"Tau-Argus depuis R - données tabulées","text":"Avant d’exécuter la fonction tab_rtauargus(), nous devons renseigner les imbrications de la hiérarchie dans le format approprié pour τ-Argus, ..e. un fichier .hrc. partir d’un tableau de correspondance, la fonction write_hrc2() fait le travail pour vous. Ici, le tableau de correspondance décrit l’imbrication des trois niveaux de secteurs d’activité, du plus agrégé au moins agrégé :","code":"data(activity_corr_table) head(activity_corr_table) #>   A10 A21 A88 #> 1  AZ   A  01 #> 2  AZ   A  02 #> 3  AZ   X   X #> 4  BE   B  06 #> 5  BE   B  07 #> 6  BE   B  08 hrc_file_activity <- write_hrc2(   corr_table = activity_corr_table,   file_name = \"hrc/activity.hrc\" )"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_fr.html","id":"secret-primaire","dir":"Articles","previous_headings":"Prise en main > Protéger un seul tableau avec la fonction tab_rtauargus(). > Exemple avec une hiérarchie et pose du secret primaire via R","what":"Secret primaire","title":"Tau-Argus depuis R - données tabulées","text":"Dans cet exemple, nous appliquerons nous-mêmes le secret primaire, c’est-à-dire sans l’aide de τ-Argus. L’idée est d’utiliser τ-Argus avec un fichier apriori (.hst). Qui permet de spécifier directement au logiciel quelles cellules sont à placer en secret primaire. Pour cela, nous créons une variable booléenne pour spécifier quelles cellules ne respectent pas les règles du secret primaire. En utilisant les mêmes règles que précédemment, obtient :","code":"turnover_act_size <- turnover_act_size %>%   mutate(     is_secret_freq = N_OBS > 0 & N_OBS < 3,     is_secret_dom = MAX > TOT*0.85,     is_secret_prim = is_secret_freq | is_secret_dom   )"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_fr.html","id":"exécution-de-τ-argus","dir":"Articles","previous_headings":"Prise en main > Protéger un seul tableau avec la fonction tab_rtauargus(). > Exemple avec une hiérarchie et pose du secret primaire via R","what":"Exécution de τ-Argus","title":"Tau-Argus depuis R - données tabulées","text":"Deux arguments doivent être ajoutés à la fonction tab_rtauargus() : -secret_var, indiquant le nom de la variable dans tabular qui renseigne le secret primaire ; -hrc, indiquant le nom du fichier hiérarchique à utiliser pour la variable ACTIVITY. Puisque le secret primaire été spécifié, il n’est pas nécessaire d’utiliser les arguments, safety_rules et maxscore. Le premier est fixé par défaut à “MAN(10)”, afin d’appliquer un intervalle de protection à 10%. Par défaut, tab_rtauargus() exécute la méthode Modular pour effectuer le secret secondaire. Ici, nous choisissons d’utiliser la méthode Optimal en modifiant l’argument suppress.","code":"ex2 <- tab_rtauargus(   turnover_act_size,   dir_name = \"tauargus_files/ex2\",   files_name = \"ex2\",   explanatory_vars = c(\"ACTIVITY\",\"SIZE\"),   value = \"TOT\",   freq = \"N_OBS\",   secret_var = \"is_secret_prim\",   hrc = c(ACTIVITY = hrc_file_activity),   totcode = c(ACTIVITY=\"Total\",SIZE=\"Total\"),   suppress = \"OPT(1,5)\",   verbose=FALSE )"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_fr.html","id":"résultat","dir":"Articles","previous_headings":"Prise en main > Protéger un seul tableau avec la fonction tab_rtauargus(). > Exemple avec une hiérarchie et pose du secret primaire via R","what":"Résultat","title":"Tau-Argus depuis R - données tabulées","text":"Comme peut le voir dans les résultats du table(),dans la sortie produite par τ-Argus tous les secrets primaires ont le statut “B”. Pour corriger cela, nous pouvons faire :","code":"str(ex2) #> 'data.frame':    414 obs. of  9 variables: #>  $ ACTIVITY      : chr  \"01\" \"01\" \"02\" \"02\" ... #>  $ SIZE          : chr  \"Total\" \"tr1\" \"Total\" \"tr1\" ... #>  $ N_OBS         : int  18 18 387 381 6 1 1 4 4 84 ... #>  $ TOT           : num  853 853 43623 35503 8120 ... #>  $ MAX           : num  303 303 6212 6212 4812 ... #>  $ is_secret_freq: logi  FALSE FALSE FALSE FALSE FALSE TRUE ... #>  $ is_secret_dom : logi  FALSE FALSE FALSE FALSE FALSE TRUE ... #>  $ is_secret_prim: logi  FALSE FALSE FALSE FALSE FALSE TRUE ... #>  $ Status        : chr  \"V\" \"V\" \"V\" \"V\" ... table(ex2$Status) #>  #>   B   D   V  #>  77  64 273 ex2 %>%   mutate(     Status = dplyr::case_when(       is_secret_freq ~ \"A\",       TRUE ~ Status     )   ) %>%   dplyr::count(Status) #>   Status   n #> 1      A  52 #> 2      B  25 #> 3      D  64 #> 4      V 273"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_fr.html","id":"protéger-plusieurs-tableaux-en-même-temps-avec-la-fonction-tab_muli_manager-","dir":"Articles","previous_headings":"Prise en main","what":"Protéger plusieurs tableaux en même temps, avec la fonction tab_muli_manager().","title":"Tau-Argus depuis R - données tabulées","text":"La fonction tab_multi_manager() permet de traiter un ensemble de tableaux (liés ou non). C’est un processus itératif, qui effectue la pose de secret secondaire d’un tableau à la fois et qui s’assure que les cellules communes ont le même statut. Lorsqu’une cellule commune est concernée par le secret secondaire, elle répercute le secret sur chaque tableau qui partage cette cellule commune. Le processus se termine lorsque le secret secondaire est cohérent pour tous les tableaux. Voir plus de détails dans les vignettes Gérer la protection des tableaux liés.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_fr.html","id":"données-1","dir":"Articles","previous_headings":"Prise en main > Protéger plusieurs tableaux en même temps, avec la fonction tab_muli_manager().","what":"Données","title":"Tau-Argus depuis R - données tabulées","text":"Pour cet exemple, deux tableaux seront utilisés : Le deuxième tableau fournit le chiffre d’affaires des entreprises ventilé par secteurs d’activité (ACTIVITY) et par type d’entreprise (CJ). Les deux tableaux ayant une variable explicative commune (ACTIVITY), ils ne peuvent être traités séparément sans générer risque de rupture du secret secondaire.","code":"data(\"turnover_act_size\") data(\"turnover_act_cj\") str(turnover_act_cj) #> tibble [406 x 5] (S3: tbl_df/tbl/data.frame) #>  $ ACTIVITY: chr [1:406] \"AZ\" \"BE\" \"FZ\" \"GI\" ... #>  $ CJ      : chr [1:406] \"Total\" \"Total\" \"Total\" \"Total\" ... #>  $ N_OBS   : int [1:406] 405 12878 28043 62053 8135 8140 11961 41359 26686 25108 ... #>  $ TOT     : num [1:406] 44475 24827613 8907311 26962063 8584917 ... #>  $ MAX     : num [1:406] 6212 1442029 1065833 3084242 3957364 ..."},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_fr.html","id":"secret-primaire-1","dir":"Articles","previous_headings":"Prise en main > Protéger plusieurs tableaux en même temps, avec la fonction tab_muli_manager().","what":"Secret primaire","title":"Tau-Argus depuis R - données tabulées","text":"La première étape consiste à indiquer si chaque cellule respecte les règles primaires, ou non. Une variable booléenne est créée, égale à TRUE si la cellule n’est pas conforme. Ici, utilise les mêmes règles que précédemment.","code":"list_data_2_tabs <- list(   act_size = turnover_act_size,   act_cj = turnover_act_cj ) %>%   purrr::map(     function(df){       df %>%         mutate(           is_secret_freq = N_OBS > 0 & N_OBS < 3,           is_secret_dom = MAX > TOT*0.85,           is_secret_prim = is_secret_freq | is_secret_dom         )     }   )"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_fr.html","id":"exécution-de-τ-argus-1","dir":"Articles","previous_headings":"Prise en main > Protéger plusieurs tableaux en même temps, avec la fonction tab_muli_manager().","what":"Exécution de τ-Argus","title":"Tau-Argus depuis R - données tabulées","text":"Maintenant que le secret primaire été spécifié pour les deux tableaux, nous pouvons lancer le processus. Par défaut, la fonction utilise un wrapper de la fonction tab_rtauargus(), appelé tab_rtauargus2(), pour appliquer le secret secondaire avec τ-Argus. De nombreux paramètres par défaut sont définis. En particulier : Intervalle de protection fixé à 10 ; Méthode de suppression fixée à “MOD(1,5,1,0,0) ; Output au format csv. Lors de son exécution, la fonction affiche à chaque itération quel tableau est traité. La vignette Gérer la protection des tableaux liés fournit une présentation complète de la fonction tab_multi_manager().","code":"ex3 <- tab_multi_manager(   list_tables = list_data_2_tabs,   list_explanatory_vars = list(     act_size = c(\"ACTIVITY\", \"SIZE\"),     act_cj = c(\"ACTIVITY\", \"CJ\")   ),   hrc = c(ACTIVITY = hrc_file_activity),   dir_name = \"tauargus_files/ex3\",   value = \"TOT\",   freq = \"N_OBS\",   secret_var = \"is_secret_prim\",   totcode =  \"Total\" ) #> --- Current table to treat:  act_size --- #> --- Current table to treat:  act_cj --- #> --- Current table to treat:  act_size ---"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_fr.html","id":"détail-de-la-vignette","dir":"Articles","previous_headings":"Prise en main > Protéger plusieurs tableaux en même temps, avec la fonction tab_muli_manager().","what":"Détail de la vignette","title":"Tau-Argus depuis R - données tabulées","text":"Authors: Julien Jamme & Nathanael Rastout Last update: 17/02/2025 Version rtauargus used: 1.2.999 Version τ-Argus used : TauArgus 4.2.3 R version used : 4.3.3 summary ↑","code":""},{"path":[]},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"presentation-of-the-package","dir":"Articles","previous_headings":"Introduction","what":"Presentation of the package","title":"&tau;-Argus from R - microdata version","text":"rtauargus package provides R interface τ-Argus. allows : create inputs (asc rda files) data R format; generate sequence instructions executed batch mode (arb file) ; launch batch τ-Argus command line; retrieve results R. different operations can performed , also modular way. allow integration tasks performed τ-Argus processing chain written R. syntax arguments closely matches batch syntax τ-Argus. allows use large number features without multiply arguments functions. package can also adapted easily possible modifications software (new available methods, additional options…). Syntax rules batch writing reference manual τ-Argus. package developed basis open source versions τ Argus (versions 4.1 higher), especially latest version available development (4.2.3)._ compatible version 3.5.**_ moment, microdata accepted input (data already tabulated).","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"purpose-of-this-document","dir":"Articles","previous_headings":"Introduction","what":"Purpose of this document","title":"&tau;-Argus from R - microdata version","text":"document aims show main features can articulated, based relatively simple examples. detailed documentation function (exhaustive list arguments, technical aspects…) available via dedicated help section. following demonstration, fictitious microdata set used : summary ↑","code":"microdata <-   data.frame(     V1    = c(\"A\", \"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"C\"),     V2    = c(\"Y\", \"Z\"),     V3    = c(\"T1\", \"T2\", \"T1\", \"S_\", \"T1\", \"T1\", \"T1\", \"S_\"),     VAL   = c(100, 0, 7, 25, 0, 4, 0, 5),     WEIGHT = c(1, 2.71, 4.2, 1)   ) microdata #>   V1 V2 V3 VAL WEIGHT #> 1  A  Y T1 100   1.00 #> 2  A  Z T2   0   2.71 #> 3  A  Y T1   7   4.20 #> 4  A  Z S_  25   1.00 #> 5  B  Y T1   0   1.00 #> 6  B  Z T1   4   2.71 #> 7  B  Y T1   0   4.20 #> 8  C  Z S_   5   1.00"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"&tau;-Argus from R - microdata version","text":"following installations must carried first use (later).","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"τ-argus","dir":"Articles","previous_headings":"Installation","what":"τ-Argus","title":"&tau;-Argus from R - microdata version","text":"functions rtauargus calling τ-Argus require software accessible workstation. download τ-Argus can found dedicated page Dutch statistical office. However, functions execute τ-Argus (creation microdata…). computer problem.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"dependencies","dir":"Articles","previous_headings":"Installation","what":"Dependencies","title":"&tau;-Argus from R - microdata version","text":"work, rtauargus depends R packages. installed beforehand (brackets minimum versions required).","code":"- purrr (>= 0.2) - dplyr (>= 0.7) - tidyr - data.table - gdata, - stringr - rlang - zoo - sdcHierarchies - igraph - lifecycle"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"package","dir":"Articles","previous_headings":"Installation","what":"Package","title":"&tau;-Argus from R - microdata version","text":"rtauargus package ready installed. summary ↑","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick start","title":"&tau;-Argus from R - microdata version","text":"part explains perform minimal configuration package apply statistical confidentiality single instruction.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"location-of-τ-argus","dir":"Articles","previous_headings":"Quick start","what":"Location of τ-Argus","title":"&tau;-Argus from R - microdata version","text":"package loaded, console displays information: particular, plausible location τ-Argus software predefined. possible change duration R session. message indicates location unknown, modify : small adjustment, package ready used. customized configuration, see section package-options._","code":"library(rtauargus) loc_tauargus <- \"Y:/Logiciels/TauArgus/TauArgus4.2.3/TauArgus.exe\"  options(rtauargus.tauargus_exe = loc_tauargus)"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"function-rtauargus-","dir":"Articles","previous_headings":"Quick start","what":"Function rtauargus.","title":"&tau;-Argus from R - microdata version","text":"function micro_rtauargus performs processing retrieves results immediately R. Completely abstaining internal workings τ-Argus, allows perform entire process single instruction (specifically, intermediate files created temporary directory deleted end R session). rtauargus takes mandatory arguments : data.frame containing microdata ; list 1 10 tabs composed data.frame variables (alone example ); rule(s) applied primary secrecy ; method(s) deleting secondary secret boxes. last two arguments use batch syntax τ-Argus.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"minimalist-example","dir":"Articles","previous_headings":"Quick start > Function rtauargus.","what":"Minimalist example","title":"&tau;-Argus from R - microdata version","text":"response variable given, count made (“<freq>”).","code":"micro_rtauargus(   microdata = microdata,   explanatory_vars = \"V1\",   safety_rules = \"FREQ(3,10)\",   suppress = \"GH(1,100)\" ) #> Start of batch procedure; file: C:\\Users\\KQCFFL\\AppData\\Local\\Temp\\Rtmpm05wlj\\RTA_13aa85f527816.arb #> <OPENMICRODATA> \"C:\\Users\\KQCFFL\\AppData\\Local\\Temp\\Rtmpm05wlj\\RTA_13aa866f06f26.asc\" #> <OPENMETADATA> \"C:\\Users\\KQCFFL\\AppData\\Local\\Temp\\Rtmpm05wlj\\RTA_13aa866f06f26.rda\" #> <SPECIFYTABLE> \"V1\"|\"<freq>\"|| #> <SAFETYRULE> FREQ(3,10) #> <READMICRODATA> #> Start explore file: C:\\Users\\KQCFFL\\AppData\\Local\\Temp\\Rtmpm05wlj\\RTA_13aa866f06f26.asc #> Start computing tables #> Table: V1 | <freq> has been specified #> Tables have been computed #> Micro data file read; processing time 0 seconds #> Tables from microdata have been read #> <SUPPRESS> GH(1,100) #> Start of the hypercube protection for table V1 | <freq> #> End of hypercube protection. Time used 1 seconds #>                    Number of suppressions: 1 #> The hypercube procedure has been applied #>                    1 cells have been suppressed #> <WRITETABLE> (1,4,AS+SE+,\"C:\\Users\\KQCFFL\\AppData\\Local\\Temp\\Rtmpm05wlj\\RTA_13aa826e25069.sbs\") #> Table: V1 | <freq> has been written #>                    Output file name: C:\\Users\\KQCFFL\\AppData\\Local\\Temp\\Rtmpm05wlj\\RTA_13aa826e25069.sbs #> End of TauArgus run #> NULL"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"elaborate-example","dir":"Articles","previous_headings":"Quick start > Function rtauargus.","what":"Elaborate example","title":"&tau;-Argus from R - microdata version","text":"parameters available. example, can add previous instruction : second tabulation (two tables treated independently) ; parameter allowing display status secret FIRST TABLE; parameter hide log τ-Argus console. addition, tables produced longer simply sent console. stored secret1 object (list consisting two data.frame), can continue manipulate. Note writing suppress = \"GH(.,100)\" :_ first parameter expected τ-Argus tab number. , want apply method deleting secondary secret table. one method several tabs, characters parenthesis first comma ignored automatically calculated tabulation numbers. function help describes 4 mandatory arguments. arguments available documented basic functions constituent (micro_asc_rda, micro_arb, run_arb, import). argument functions can used rtauargus. following section provides details operation system. summary ↑","code":"secret1 <-   micro_rtauargus(     microdata = microdata,     explanatory_vars = list(\"V1\", c(\"V1\", \"V2\")), # 2 tabs (V1, V1xV2)     safety_rules = \"FREQ(3,10)\",     suppress = \"GH(.,100)\", # . replaces the tab number     output_options = c(\"\", \"AS+\"), # no status for the 1st array     show_batch_console = FALSE # to hide the log   ) #> Start of batch procedure; file: C:\\Users\\KQCFFL\\AppData\\Local\\Temp\\Rtmpm05wlj\\RTA_13aa821eb5b19.arb #> <OPENMICRODATA> \"C:\\Users\\KQCFFL\\AppData\\Local\\Temp\\Rtmpm05wlj\\RTA_13aa85d87423f.asc\" #> <OPENMETADATA> \"C:\\Users\\KQCFFL\\AppData\\Local\\Temp\\Rtmpm05wlj\\RTA_13aa85d87423f.rda\" #> <SPECIFYTABLE> \"V1\"|\"<freq>\"|| #> <SAFETYRULE> FREQ(3,10) #> <SPECIFYTABLE> \"V1\"\"V2\"|\"<freq>\"|| #> <SAFETYRULE> FREQ(3,10) #> <READMICRODATA> #> Start explore file: C:\\Users\\KQCFFL\\AppData\\Local\\Temp\\Rtmpm05wlj\\RTA_13aa85d87423f.asc #> Start computing tables #> Table: V1 | <freq> has been specified #> Table: V1 x V2 | <freq> has been specified #> Tables have been computed #> Micro data file read; processing time 0 seconds #> Tables from microdata have been read #> <SUPPRESS> GH(1,100) #> Start of the hypercube protection for table V1 | <freq> #> End of hypercube protection. Time used 1 seconds #>                    Number of suppressions: 1 #> The hypercube procedure has been applied #>                    1 cells have been suppressed #> <WRITETABLE> (1,4,,\"C:\\Users\\KQCFFL\\AppData\\Local\\Temp\\Rtmpm05wlj\\RTA_13aa861ea459a.sbs\") #> Table: V1 | <freq> has been written #>                    Output file name: C:\\Users\\KQCFFL\\AppData\\Local\\Temp\\Rtmpm05wlj\\RTA_13aa861ea459a.sbs #> <SUPPRESS> GH(2,100) #> Start of the hypercube protection for table V1 x V2 | <freq> #> End of hypercube protection. Time used 1 seconds #>                    Number of suppressions: 2 #> The hypercube procedure has been applied #>                    2 cells have been suppressed #> <WRITETABLE> (2,4,AS+,\"C:\\Users\\KQCFFL\\AppData\\Local\\Temp\\Rtmpm05wlj\\RTA_13aa844945238.sbs\") #> Table: V1 x V2 | <freq> has been written #>                    Output file name: C:\\Users\\KQCFFL\\AppData\\Local\\Temp\\Rtmpm05wlj\\RTA_13aa844945238.sbs #> End of TauArgus run secret1 #> NULL"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"process-decomposition","dir":"Articles","previous_headings":"","what":"Process decomposition","title":"&tau;-Argus from R - microdata version","text":"Using micro_rtauargus function convenient terms lines code enter. However, approach can quite cumbersome tables secreted common certain number characteristics. example, like generate asc rda files, run several batches using files. case examples seen far, intermediate files systematically regenerated, even content identical. , can use functions called successively function micro_rtauargus, namely : micro_asc_rda()   →  micro_arb()   →  run_arb()   →   import()","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"function-micro_asc_rda-","dir":"Articles","previous_headings":"Process decomposition","what":"[1] Function micro_asc_rda.","title":"&tau;-Argus from R - microdata version","text":"Argus accepts microdata input well-defined form: text file fixed length columns, without column headers (.asc file) ; variable description file (.rda file). function micro_asc_rda produces two files data.frame.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"minimalist-example-1","dir":"Articles","previous_headings":"Process decomposition > [1] Function micro_asc_rda.","what":"Minimalist example","title":"&tau;-Argus from R - microdata version","text":"data name asc file entered . name metadata file specified, takes name asc, extension .rda. Content files created : package functions accept file locations form relative path. example, asc_filename = \"microdata.asc\" working directory Z:/ equivalent asc_filename = \"Z:/microdata.asc\"._","code":"micro_asc_rda(microdata, asc_filename = \"Z:/microdata.asc\") file.show(\"Z:/microdata.asc\", \"Z:/microdata.rda\", pager = \"internal\") microdata.asc     microdata.rda                                               A Y T1 100 1.00   V1 1 1               A Z T2   0 2.71     <RECODEABLE>       A Y T1   7 4.20     <TOTCODE> \"Total\"  A Z S_  25 1.00   V2 3 1               B Y T1   0 1.00     <RECODEABLE>       B Z T1   4 2.71     <TOTCODE> \"Total\"  B Y T1   0 4.20   V3 5 2               C Z S_   5 1.00     <RECODEABLE>                           <TOTCODE> \"Total\"                    VAL 8 3                                  <NUMERIC>                              <DECIMALS> 0                         WEIGHT 12 4                              <NUMERIC>                              <DECIMALS> 2"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"elaborate-example-1","dir":"Articles","previous_headings":"Process decomposition > [1] Function micro_asc_rda.","what":"Elaborate example","title":"&tau;-Argus from R - microdata version","text":"add previous example : weight variable ; information hierarchical variable ; differentiated codes totals; minimum number decimal places written numerical variables. Content files created :","code":"micro_asc_rda(   microdata = microdata,   asc_filename = \"Z:/microdata.asc\",   weight_var = \"WEIGHT\",   hrc = c(V3 = \"1 1\"),   totcode = c(\"Ensemble\", V2 = \"TOTAL\"),   decimals = 1 ) file.show(\"Z:/microdata.asc\", \"Z:/microdata.rda\", pager = \"internal\") microdata.asc       microdata.rda                                                       A Y T1 100.0 1.00   V1 1 1                  A Z T2   0.0 2.71     <RECODEABLE>          A Y T1   7.0 4.20     <TOTCODE> \"Ensemble\"  A Z S_  25.0 1.00   V2 3 1                  B Y T1   0.0 1.00     <RECODEABLE>          B Z T1   4.0 2.71     <TOTCODE> \"TOTAL\"     B Y T1   0.0 4.20   V3 5 2                  C Z S_   5.0 1.00     <RECODEABLE>                                <TOTCODE> \"Ensemble\"                        <HIERARCHICAL>                              <HIERLEVELS> 1 1                          VAL 8 5                                       <NUMERIC>                                   <DECIMALS> 1                              WEIGHT 14 4                                   <WEIGHT>                                    <DECIMALS> 2"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"temporary-files","dir":"Articles","previous_headings":"Process decomposition > [1] Function micro_asc_rda.","what":"Temporary files","title":"&tau;-Argus from R - microdata version","text":"parameter *_filename filled, generated files placed temporary folder. possible retrieve location name (random) files return value function. summary ↑","code":"names_asc_rda <- micro_asc_rda(microdata) names_asc_rda #> $asc_filename #> [1] \"C:\\\\Users\\\\KQCFFL\\\\AppData\\\\Local\\\\Temp\\\\Rtmpm05wlj\\\\RTA_13aa875d56ea.asc\" #>  #> $rda_filename #> [1] \"C:\\\\Users\\\\KQCFFL\\\\AppData\\\\Local\\\\Temp\\\\Rtmpm05wlj\\\\RTA_13aa875d56ea.rda\""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"function-micro_arb-","dir":"Articles","previous_headings":"Process decomposition","what":"[2] Function micro_arb.","title":"&tau;-Argus from R - microdata version","text":"function builds batch file executable τ-Argus. takes mandatory arguments: asc file name ; tab(s) (10, list) ; primary secrecy rule(s); method(s) managing secondary secrecy. function also needs name rda file. specified, name asc file .rda extension used. function check existence specified directories files. generates file instructions, without evaluating validity._","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"minimalist-example-2","dir":"Articles","previous_headings":"Process decomposition > [2] Function micro_arb.","what":"Minimalist example","title":"&tau;-Argus from R - microdata version","text":"Content file created :","code":"micro_arb(   arb_filename = \"Z:/microdata.arb\",   asc_filename = \"Z:/microdata.asc\",   explanatory_vars = \"V1\",   safety_rules = \"FREQ(3,10)\",   suppress = \"GH(.,100)\",   output_names = \"Z:/results/secretV1.csv\" ) file.show(\"Z:/microdata.arb\", pager = \"internal\") // Batch generated by package *rtauargus* // (2025-02-17 12:14:22 CET) <OPENMICRODATA> \"Z:\\microdata.asc\" <OPENMETADATA> \"Z:\\microdata.rda\" <SPECIFYTABLE> \"V1\"|\"<freq>\"|| <SAFETYRULE> FREQ(3,10) <READMICRODATA> <SUPPRESS> GH(1,100) <WRITETABLE> (1,4,AS+SE+,\"Z:\\results\\secretV1.csv\")"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"elaborate-example-2","dir":"Articles","previous_headings":"Process decomposition > [2] Function micro_arb.","what":"Elaborate example","title":"&tau;-Argus from R - microdata version","text":"previous example completed : second tab ; response variable summed (instead count) ; addition 85% dominance second table; weighting first table (second); deletion empty crossovers tables (SE+). Passing single value option applies treatment tab. differentiated options, necessary pass vector containing many values tabs. ``{r arb2} micro_arb( arb_filename = “Z:/microdata.arb”, asc_filename = “Z:/microdata.asc”, explanatory_vars = list(“V1”, c(“V2”, “V3”)), response_var = “VAL”, safety_rules = c(“FREQ(3,10)”, “FREQ(3,10)|NK(1,85)”), weighted = c(TRUE, FALSE), suppress = “GH(.,100)”, output_options = “+SE+” )","code":"``` r file.show(\"Z:/microdata.arb\", pager = \"internal\") // Batch generated by package *rtauargus* // (2025-02-17 12:14:22 CET) <OPENMICRODATA> \"Z:\\microdata.asc\" <OPENMETADATA> \"Z:\\microdata.rda\" <SPECIFYTABLE> \"V1\"|\"<freq>\"|| <SAFETYRULE> FREQ(3,10) <READMICRODATA> <SUPPRESS> GH(1,100) <WRITETABLE> (1,4,AS+SE+,\"Z:\\results\\secretV1.csv\")"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"temporary-files-1","dir":"Articles","previous_headings":"Process decomposition > [2] Function micro_arb.","what":"Temporary files","title":"&tau;-Argus from R - microdata version","text":"previous example, output file names (output_names) specified, led generation file names temporary. Specifying name .arb file mandatory either. information can retrieved return value function. summary ↑","code":"infos_arb <-   micro_arb(     asc_filename = \"Z:/microdata.asc\",     explanatory_vars = list(\"V1\", c(\"V2\", \"V3\")),     safety_rules = \"FREQ(3,10)\",     suppress = \"GH(.,100)\",     output_type = \"4\"   ) infos_arb #> $arb_filename #> [1] \"C:\\\\Users\\\\KQCFFL\\\\AppData\\\\Local\\\\Temp\\\\Rtmpm05wlj\\\\RTA_13aa83d136448.arb\" #>  #> $output_names #> [1] \"C:\\\\Users\\\\KQCFFL\\\\AppData\\\\Local\\\\Temp\\\\Rtmpm05wlj\\\\RTA_13aa81a11772c.sbs\" #> [2] \"C:\\\\Users\\\\KQCFFL\\\\AppData\\\\Local\\\\Temp\\\\Rtmpm05wlj\\\\RTA_13aa822675f41.sbs\""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"function-run_arb","dir":"Articles","previous_headings":"Process decomposition","what":"[3] Function run_arb","title":"&tau;-Argus from R - microdata version","text":"Now instructions generated .arb file, can submit τ-Argus batch mode. get list tables secreted : run_arb function package runs τ-Argus. requires software accessible workstation. arb_filename argument mandatory, information present .arb file. Optional parameters also available: missing_dir : action perform folder result written exist (trigger error create ) tauargus_exe : change executable (override rtauargus.tauargus_exe time function) ; logbook : location name file containing error log; show_batch_on_console` : display batch progress console ; import : disabled, function generates text files without importing R (see next section details). tabs given name micro_arb, names used list data.frames output run_arb (names defined example ). Checks made actual launch τ-Argus : existence software workstation, asc rda files, folders write results, variables used (crosses, variable response, …) metadata (rda file)._ summary ↑","code":"secret2 <- run_arb(\"Z:/microdata.arb\", missing_dir = \"create\") #> Start of batch procedure; file: Z:\\microdata.arb #> <OPENMICRODATA> \"Z:\\microdata.asc\" #> <OPENMETADATA> \"Z:\\microdata.rda\" #> <SPECIFYTABLE> \"V1\"|\"<freq>\"|| #> <SAFETYRULE> FREQ(3,10) #> <READMICRODATA> #> Start explore file: Z:\\microdata.asc #> Start computing tables #> Table: V1 | <freq> has been specified #> Tables have been computed #> Micro data file read; processing time 0 seconds #> Tables from microdata have been read #> <SUPPRESS> GH(1,100) #> Start of the hypercube protection for table V1 | <freq> #> End of hypercube protection. Time used 1 seconds #>                    Number of suppressions: 1 #> The hypercube procedure has been applied #>                    1 cells have been suppressed #> <WRITETABLE> (1,4,AS+SE+,\"Z:\\results\\secretV1.csv\") #> Table: V1 | <freq> has been written #>                    Output file name: Z:\\results\\secretV1.csv #> End of TauArgus run secret2 #> NULL"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"import-function","dir":"Articles","previous_headings":"Process decomposition","what":"[4] Import function","title":"&tau;-Argus from R - microdata version","text":"function imports results produced τ-Argus (text files) information contained arb file. therefore requires batch completed without error files still present. last reason, import function typically called run_arb setting import = TRUE. can also used independently (e.g. don’t want restart batch took long time execute).","code":"secret2 <- import(\"Z:/microdata.arb\") # produces the same result as run_arb(\"Z:/microdata.arb\", import = TRUE)"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"accepted-formats","dir":"Articles","previous_headings":"Process decomposition > [4] Import function","what":"Accepted formats","title":"&tau;-Argus from R - microdata version","text":"possible (moment) import results type : 2: csv pivot-table 4: sbs output format import impossible given tab, empty data.frame returned (warning message).","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"tab-attributes","dir":"Articles","previous_headings":"Process decomposition > [4] Import function","what":"Tab attributes","title":"&tau;-Argus from R - microdata version","text":"data.frame list associated set attributes, metadata keeping track specifications passed τ-Argus. example, secret2[[2]] (second array secret2), parameters passed function (correspond default values package). summary ↑","code":"str(secret2[[2]]) #>  NULL"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"package-options","dir":"Articles","previous_headings":"","what":"Package options","title":"&tau;-Argus from R - microdata version","text":"package options define default behavior functions. options used mandatory argument function filled . allow repeat systematically parameter call function. option name name argument function preceded rtauargus. : example, rtauargus.decimals value used argument decimals micro_asc_rda function filled user. loading, package assigns default value options rtauargus yet declared. options already defined user keep values. available options default values listed :","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"display","dir":"Articles","previous_headings":"Package options","what":"Display","title":"&tau;-Argus from R - microdata version","text":"view options set current session: values identical default values, except location τ-Argus, previously modified. appear order alphabetical. summary ↑","code":"rtauargus_options() #> $rtauargus.decimals #> [1] 0 #>  #> $rtauargus.hierleadstring #> [1] \"@\" #>  #> $rtauargus.import #> [1] FALSE #>  #> $rtauargus.is_tabular #> [1] TRUE #>  #> $rtauargus.linked #> [1] FALSE #>  #> $rtauargus.missing #> [1] \"\" #>  #> $rtauargus.missing_dir #> [1] \"stop\" #>  #> $rtauargus.output_options #> [1] \"AS+SE+\" #>  #> $rtauargus.output_type #> [1] \"4\" #>  #> $rtauargus.response_var #> [1] \"<freq>\" #>  #> $rtauargus.separator #> [1] \",\" #>  #> $rtauargus.show_batch_console #> [1] FALSE #>  #> $rtauargus.tauargus_exe #> [1] \"Y:/Logiciels/TauArgus/TauArgus4.2.3/TauArgus.exe\" #>  #> $rtauargus.totcode #> [1] \"Total\" #>  #> $rtauargus.weighted #> [1] FALSE"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"modification-reset","dir":"Articles","previous_headings":"Package options","what":"Modification, reset","title":"&tau;-Argus from R - microdata version","text":"modify one options, use following syntax () one used modify location τ-Argus) : reset certain options: reset values default (including path τ-Argus modified beginning demonstration), specify argument: summary ↑","code":"options(   rtauargus.show_batch_console = FALSE,   rtauargus.output_options = \"AS+SE+\",   rtauargus.output_type = \"4\",   rtauargus.response_var = \"VAL\" )  str(rtauargus_options()) #> List of 15 #>  $ rtauargus.decimals          : int 0 #>  $ rtauargus.hierleadstring    : chr \"@\" #>  $ rtauargus.import            : logi FALSE #>  $ rtauargus.is_tabular        : logi TRUE #>  $ rtauargus.linked            : logi FALSE #>  $ rtauargus.missing           : chr \"\" #>  $ rtauargus.missing_dir       : chr \"stop\" #>  $ rtauargus.output_options    : chr \"AS+SE+\" #>  $ rtauargus.output_type       : chr \"4\" #>  $ rtauargus.response_var      : chr \"VAL\" #>  $ rtauargus.separator         : chr \",\" #>  $ rtauargus.show_batch_console: logi FALSE #>  $ rtauargus.tauargus_exe      : chr \"Y:/Logiciels/TauArgus/TauArgus4.2.3/TauArgus.exe\" #>  $ rtauargus.totcode           : chr \"Total\" #>  $ rtauargus.weighted          : logi FALSE reset_rtauargus_options(\"rtauargus.response_var\", \"rtauargus.output_type\")  # It is possible to omit the prefix 'rtauargus. # The following instruction is equivalent: reset_rtauargus_options(\"response_var\", \"output_type\")  str(rtauargus_options()) #> List of 15 #>  $ rtauargus.decimals          : int 0 #>  $ rtauargus.hierleadstring    : chr \"@\" #>  $ rtauargus.import            : logi FALSE #>  $ rtauargus.is_tabular        : logi TRUE #>  $ rtauargus.linked            : logi FALSE #>  $ rtauargus.missing           : chr \"\" #>  $ rtauargus.missing_dir       : chr \"stop\" #>  $ rtauargus.output_options    : chr \"AS+SE+\" #>  $ rtauargus.output_type       : chr \"4\" #>  $ rtauargus.response_var      : chr \"<freq>\" #>  $ rtauargus.separator         : chr \",\" #>  $ rtauargus.show_batch_console: logi FALSE #>  $ rtauargus.tauargus_exe      : chr \"Y:/Logiciels/TauArgus/TauArgus4.2.3/TauArgus.exe\" #>  $ rtauargus.totcode           : chr \"Total\" #>  $ rtauargus.weighted          : logi FALSE reset_rtauargus_options()"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"local-or-global-reach","dir":"Articles","previous_headings":"Package options","what":"Local or global reach","title":"&tau;-Argus from R - microdata version","text":"Like R function, parameterization done specifying arguments function called (local scope). option system package allows instructions options(rtauargus.<option> = <value>) define options global. Depending instructions written, configuration last less long: script, effect current session ; user configuration file (.Rprofile…), allow user keep track presets session . second way recommended chain treatment intended reproducible. Indeed, identical script executed two different machines produce two results different._ summary ↑","code":""},{"path":[]},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"other-features","dir":"Articles","previous_headings":"Other information","what":"Other features","title":"&tau;-Argus from R - microdata version","text":"features package mentioned getting started: management linked arrays (argument linked micro_arb) creation hierarchical variables microdata (function write_hrc). taking account apriori file (argument apriori micro_arb) use micro_rtauargus function microdata already text file (data.frame) optimized launch large number crosses parameters (primary secrecy rules, secondary secrecy method, …) : function rtauargus_plus See help functions information.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"ideas-for-the-future","dir":"Articles","previous_headings":"Other information","what":"Ideas for the future","title":"&tau;-Argus from R - microdata version","text":"implement request parameters… take account tabulated input data …","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"report-a-problem-suggest-an-improvement","dir":"Articles","previous_headings":"Other information","what":"Report a problem, suggest an improvement","title":"&tau;-Argus from R - microdata version","text":"package construction. features τ-Argus integrated (purpose integrate , frequently used). return error report, please use link (click “New issue”). Requires connected gitlab-Insee.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro.html","id":"about-this-vignette","dir":"Articles","previous_headings":"Other information","what":"About this vignette","title":"&tau;-Argus from R - microdata version","text":"Author: Pierre-Yves Berrard Updated : Julien Jamme Last update: 17/02/2025 Version rtauargus used: 1.2.999 Version τ-Argus used : TauArgus 4.2.3 R version used : 4.3.3 summary ↑","code":""},{"path":[]},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"présentation-du-package","dir":"Articles","previous_headings":"Introduction","what":"Présentation du package","title":"Tau-Argus depuis R - sur microdonnées","text":"Le package rtauargus offre une interface R pour τ-Argus. Il permet de : créer les inputs (fichiers asc et rda) à partir de données au format R ; générer la séquence d’instructions à exécuter en mode batch (fichier arb) ; lancer un batch τ-Argus en ligne de commande ; récupérer les résultats dans R. Ces différentes opérations peuvent être exécutées en une seule fois, mais aussi de manière modulaire. Elles permettent d’intégrer les tâches réalisées par τ-Argus dans une chaîne de traitement écrite en R. La syntaxe de certains arguments colle au plus près à la syntaxe batch de τ-Argus. Ceci permet d’utiliser un grand nombre de fonctionnalités sans multiplier les arguments des fonctions. Le package pourra en outre s’adapter plus facilement à d’éventuelles modifications du logiciel (nouvelles méthodes disponibles, options supplémentaires…). Les règles de syntaxe pour l’écriture de batch figurent dans le manuel de référence de τ-Argus. Le package été développé sur la base des versions open source de τ -Argus (versions 4.1 et supérieures), en particulier la dernière version disponible lors du développement (4.2.3). Il n’est pas compatible avec la version 3.5. Pour l’instant, seules les microdonnées sont acceptées en entrée (pas les données déjà tabulées).","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"objectif-de-ce-document","dir":"Articles","previous_headings":"Introduction","what":"Objectif de ce document","title":"Tau-Argus depuis R - sur microdonnées","text":"Ce document vise à montrer comment les fonctionnalités principales du package peuvent être articulées, à partir d’exemples relativement simples. Une documentation détaillée d’une fonction (liste exhaustive des arguments, aspects techniques…) est disponible via la rubrique d’aide dédiée. Pour la démonstration qui va suivre, un jeu de microdonnées fictif sera utilisé : sommaire ↑","code":"donnees <-   data.frame(     V1    = c(\"A\", \"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"C\"),     V2    = c(\"Y\", \"Z\"),     V3    = c(\"T1\", \"T2\", \"T1\", \"S_\", \"T1\", \"T1\", \"T1\", \"S_\"),     VAL   = c(100, 0, 7, 25, 0, 4, 0, 5),     POIDS = c(1, 2.71, 4.2, 1)   ) donnees #>   V1 V2 V3 VAL POIDS #> 1  A  Y T1 100  1.00 #> 2  A  Z T2   0  2.71 #> 3  A  Y T1   7  4.20 #> 4  A  Z S_  25  1.00 #> 5  B  Y T1   0  1.00 #> 6  B  Z T1   4  2.71 #> 7  B  Y T1   0  4.20 #> 8  C  Z S_   5  1.00"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Tau-Argus depuis R - sur microdonnées","text":"Les installations suivantes sont à réaliser avant la première utilisation (et plus par la suite).","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"τ-argus","dir":"Articles","previous_headings":"Installation","what":"τ-Argus","title":"Tau-Argus depuis R - sur microdonnées","text":"Les fonctions de rtauargus appelant τ-Argus nécessitent que ce logiciel soit accessible depuis le poste de travail. Le téléchargement de τ-Argus se fait sur la page dédiée du site de l’office néerlandais de statistiques. Cependant, toutes les fonctions n’exécutent pas τ-Argus (création des microdonnées…). Ne pas l’avoir sur son poste n’est donc pas bloquant.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"dépendances","dir":"Articles","previous_headings":"Installation","what":"Dépendances","title":"Tau-Argus depuis R - sur microdonnées","text":"Pour fonctionner, rtauargus dépend d’autres packages R. Ceux-ci sont à installer au préalable (entre parenthèses les versions minimales requises).","code":"• purrr (>= 0.2) • dplyr (>= 0.7) • tidyr • data.table • gdata, • stringr • rlang • zoo • sdcHierarchies • igraph • lifecycle"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"package","dir":"Articles","previous_headings":"Installation","what":"Package","title":"Tau-Argus depuis R - sur microdonnées","text":"Le package rtauargus est prêt à être installé. sommaire ↑","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"prise-en-main-rapide","dir":"Articles","previous_headings":"","what":"Prise en main rapide","title":"Tau-Argus depuis R - sur microdonnées","text":"Cette partie explique comment effectuer une configuration minimale du package et comment appliquer le secret statistique en une seule instruction.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"emplacement-de-τ-argus","dir":"Articles","previous_headings":"Prise en main rapide","what":"Emplacement de τ-Argus","title":"Tau-Argus depuis R - sur microdonnées","text":"Au chargement du package, la console affiche quelques informations : En particulier, un emplacement plausible pour le logiciel τ-Argus est prédéfini. Il est possible de le changer pour toute la durée de la session R. Un message indique que cet emplacement est inconnu, le modifie donc : Ce petit réglage effectué, le package est prêt à être utilisé. Pour une configuration plus personnalisée, consulter la section options du package.","code":"library(rtauargus) loc_tauargus <- \"Y:/Logiciels/TauArgus/TauArgus4.2.3/TauArgus.exe\"  options(rtauargus.tauargus_exe = loc_tauargus)"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"fonction-rtauargus","dir":"Articles","previous_headings":"Prise en main rapide","what":"Fonction rtauargus","title":"Tau-Argus depuis R - sur microdonnées","text":"La fonction éponyme rtauargus effectue un traitement et récupère les résultats immédiatement dans R. S’abstrayant totalement des rouages internes de τ-Argus, elle permet de réaliser l’ensemble du traitement en une seule instruction (concrètement, tous les fichiers intermédiaires sont créés dans un répertoire temporaire qui est effacé à la fin de la session R). rtauargus prend comme arguments obligatoires : un data.frame contenant les microdonnées ; une liste de 1 à 10 tabulations composées de variables du data.frame (une seule dans l’exemple ci-après) ; la (les) règle(s) à appliquer pour le secret primaire ; la (les) méthode(s) pour la suppression des cases en secret secondaire. Les deux derniers arguments utilisent la syntaxe batch τ-Argus.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"exemple-minimaliste","dir":"Articles","previous_headings":"Prise en main rapide > Fonction rtauargus","what":"Exemple minimaliste","title":"Tau-Argus depuis R - sur microdonnées","text":"Comme aucune variable de réponse n’est renseignée, un comptage est effectué (“<freq>”).","code":"rtauargus(   microdata        = donnees,   explanatory_vars = \"V1\",   safety_rules     = \"FREQ(3,10)\",   suppress         = \"GH(1,100)\" ) #> Error in rtauargus(microdata = donnees, explanatory_vars = \"V1\", safety_rules = \"FREQ(3,10)\", : impossible de trouver la fonction \"rtauargus\""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"exemple-élaboré","dir":"Articles","previous_headings":"Prise en main rapide > Fonction rtauargus","what":"Exemple élaboré","title":"Tau-Argus depuis R - sur microdonnées","text":"D’autres paramètres sont disponibles. peut par exemple compléter l’instruction précédente avec : une deuxième tabulation (les deux tableaux seront traités indépendamment) ; un paramètre permettant de ne pas afficher le statut du secret pour le premier tableau ; un paramètre permettant de masquer le journal de τ-Argus dans la console. De plus, les tables produites ne sont plus simplement envoyées dans la console. Elles sont stockées dans un objet secret1 (une liste constituée de deux data.frame), que l’pourra continuer de manipuler. Note sur l’écriture suppress = \"GH(.,100)\" : Le premier paramètre attendu par τ-Argus est le numéro de la tabulation. Ici, souhaite appliquer la même méthode de suppression du secret secondaire à chaque tableau. S’il n’y qu’une méthode et plusieurs tabulations, les caractères entre la parenthèse et la première virgule sont ignorés et les numéros des tabulations calculés automatiquement. L’aide de la fonction ne décrit que les 4 arguments obligatoires. Les arguments optionnels disponibles sont documentés dans les fonctions élémentaires la constituant (micro_asc_rda, micro_arb, run_arb, import). Tout argument de ces fonctions peut être utilisé dans rtauargus. Leur fonctionnement est détaillé dans la section qui suit. sommaire ↑","code":"secret1 <-   rtauargus(     microdata          = donnees,     explanatory_vars   = list(\"V1\", c(\"V1\", \"V2\")), # 2 tabulations (V1, V1xV2)     safety_rules       = \"FREQ(3,10)\",     suppress           = \"GH(.,100)\",  # . remplace le numéro de tabulation     output_options     = c(\"\", \"AS+\"), # pas de statut pour le 1er tableau     show_batch_console = FALSE         # pour masquer le journal   ) #> Error in rtauargus(microdata = donnees, explanatory_vars = list(\"V1\", : impossible de trouver la fonction \"rtauargus\" secret1 #> NULL"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"décomposition-du-processus","dir":"Articles","previous_headings":"","what":"Décomposition du processus","title":"Tau-Argus depuis R - sur microdonnées","text":"Utiliser la fonction rtauargus est pratique en terme de lignes de code à saisir. Toutefois, cette manière de procéder peut s’avérer assez lourde si les tableaux à secrétiser ont en commun un certain nombre de caractéristiques. voudrait par exemple ne générer que les fichiers asc et rda, puis lancer plusieurs batch utilisant ces mêmes fichiers. Ce n’était pas le cas dans les exemples vus jusqu’à maintenant, où tous les fichiers intermédiaires étaient systématiquement regénérés, même si leur contenu était identique. Pour cela, peut utiliser les fonctions appelées successivement par la fonction rtauargus, à savoir : micro_asc_rda()   →   micro_arb()   →   run_arb()   →   import()","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"fonction-micro_asc_rda","dir":"Articles","previous_headings":"Décomposition du processus","what":"[1] Fonction micro_asc_rda","title":"Tau-Argus depuis R - sur microdonnées","text":"τ-Argus n’accepte en entrée que des microdonnées sous une forme bien spécifique : un fichier texte aux colonnes de longueur fixe, sans en-tête de colonnes (fichier .asc) ; un fichier de description des variables (fichier .rda). La fonction micro_asc_rda produit ces deux fichiers à partir d’un data.frame.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"exemple-minimaliste-1","dir":"Articles","previous_headings":"Décomposition du processus > [1] Fonction micro_asc_rda","what":"Exemple minimaliste","title":"Tau-Argus depuis R - sur microdonnées","text":"ne renseigne ici que les données et le nom du fichier asc. Comme le nom du fichier de métadonnées n’est pas spécifié, il prend le même nom que le fichier asc, mais avec l’extension .rda. Contenu des fichiers créés : Les fonctions du package acceptent les emplacements de fichiers sous forme de chemin relatif. Par exemple, asc_filename = \"donnees.asc\" avec un répertoire de travail sur Z:/ est équivalent à asc_filename = \"Z:/donnees.asc\".","code":"micro_asc_rda(donnees, asc_filename = \"Z:/donnees.asc\") file.show(\"Z:/donnees.asc\", \"Z:/donnees.rda\", pager = \"internal\") donnees.asc            donnees.rda                                                      A Y T1 100 1.00        V1 1 1               A Z T2   0 2.71          <RECODEABLE>       A Y T1   7 4.20          <TOTCODE> \"Total\"  A Z S_  25 1.00        V2 3 1               B Y T1   0 1.00          <RECODEABLE>       B Z T1   4 2.71          <TOTCODE> \"Total\"  B Y T1   0 4.20        V3 5 2               C Z S_   5 1.00          <RECODEABLE>                                <TOTCODE> \"Total\"                         VAL 8 3                                       <NUMERIC>                                   <DECIMALS> 0                              POIDS 12 4                                    <NUMERIC>                                   <DECIMALS> 2"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"exemple-élaboré-1","dir":"Articles","previous_headings":"Décomposition du processus > [1] Fonction micro_asc_rda","what":"Exemple élaboré","title":"Tau-Argus depuis R - sur microdonnées","text":"ajoute à l’exemple précédent : une variable de poids ; les informations sur une variable hiérarchique ; des codes différenciés pour les totaux ; un nombre minimal de décimales à écrire pour les variables numériques. Contenu des fichiers créés :","code":"micro_asc_rda(   microdata    = donnees,   asc_filename = \"Z:/donnees.asc\",   weight_var   = \"POIDS\",   hrc          = c(V3 = \"1 1\"),   totcode      = c(\"Ensemble\", V2 = \"TOTAL\"),   decimals     = 1 ) file.show(\"Z:/donnees.asc\", \"Z:/donnees.rda\", pager = \"internal\") donnees.asc              donnees.rda                                                              A Y T1 100.0 1.00        V1 1 1                  A Z T2   0.0 2.71          <RECODEABLE>          A Y T1   7.0 4.20          <TOTCODE> \"Ensemble\"  A Z S_  25.0 1.00        V2 3 1                  B Y T1   0.0 1.00          <RECODEABLE>          B Z T1   4.0 2.71          <TOTCODE> \"TOTAL\"     B Y T1   0.0 4.20        V3 5 2                  C Z S_   5.0 1.00          <RECODEABLE>                                     <TOTCODE> \"Ensemble\"                             <HIERARCHICAL>                                   <HIERLEVELS> 1 1                               VAL 8 5                                            <NUMERIC>                                        <DECIMALS> 1                                   POIDS 14 4                                         <WEIGHT>                                         <DECIMALS> 2"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"fichiers-temporaires","dir":"Articles","previous_headings":"Décomposition du processus > [1] Fonction micro_asc_rda","what":"Fichiers temporaires","title":"Tau-Argus depuis R - sur microdonnées","text":"Pour tout paramètre *_filename non renseigné, les fichiers générés sont placés dans un dossier temporaire. Il est possible de récupérer l’emplacement et le nom (aléatoire) de ces fichiers dans la valeur de retour de la fonction. sommaire ↑","code":"noms_asc_rda <- micro_asc_rda(donnees) noms_asc_rda #> $asc_filename #> [1] \"C:\\\\Users\\\\KQCFFL\\\\AppData\\\\Local\\\\Temp\\\\Rtmpm05wlj\\\\RTA_13aa860265f1f.asc\" #>  #> $rda_filename #> [1] \"C:\\\\Users\\\\KQCFFL\\\\AppData\\\\Local\\\\Temp\\\\Rtmpm05wlj\\\\RTA_13aa860265f1f.rda\""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"fonction-micro_arb","dir":"Articles","previous_headings":"Décomposition du processus","what":"[2] Fonction micro_arb","title":"Tau-Argus depuis R - sur microdonnées","text":"Cette fonction construit un fichier batch exécutable par τ-Argus. Elle prend comme arguments obligatoires : nom du fichier asc ; tabulation(s) (jusqu’à 10, sous forme de liste) ; règle(s) de secret primaire ; méthode(s) de gestion du secret secondaire. La fonction également besoin du nom du fichier rda. S’il n’est pas spécifié, le même nom que le fichier asc avec l’extension .rda est utilisé. La fonction ne vérifie pas l’existence des répertoires ou fichiers spécifiés. Elle ne fait que générer un fichier d’instructions, sans en évaluer la validité.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"exemple-minimaliste-2","dir":"Articles","previous_headings":"Décomposition du processus > [2] Fonction micro_arb","what":"Exemple minimaliste","title":"Tau-Argus depuis R - sur microdonnées","text":"Contenu du fichier créé :","code":"micro_arb(   arb_filename     = \"Z:/donnees.arb\",   asc_filename     = \"Z:/donnees.asc\",   explanatory_vars = \"V1\",   safety_rules     = \"FREQ(3,10)\",   suppress         = \"GH(.,100)\",   output_names     = \"Z:/resultats/secretV1.csv\" ) file.show(\"Z:/donnees.arb\", pager = \"internal\") // Batch generated by package *rtauargus* // (2025-02-17 12:15:37 CET) <OPENMICRODATA> \"Z:\\donnees.asc\" <OPENMETADATA> \"Z:\\donnees.rda\" <SPECIFYTABLE> \"V1\"|\"<freq>\"|| <SAFETYRULE> FREQ(3,10) <READMICRODATA> <SUPPRESS> GH(1,100) <WRITETABLE> (1,4,AS+SE+,\"Z:\\resultats\\secretV1.csv\")"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"exemple-élaboré-2","dir":"Articles","previous_headings":"Décomposition du processus > [2] Fonction micro_arb","what":"Exemple élaboré","title":"Tau-Argus depuis R - sur microdonnées","text":"complète l’exemple précédent avec : une deuxième tabulation ; une variable de réponse à sommer (au lieu d’un comptage) ; l’ajout d’une dominance à 85 % pour le deuxième tableau ; une pondération au premier tableau (mais pas au deuxième) ; la suppression des croisements vides dans les deux tableaux (SE+). Passer une seule valeur pour une option applique le même traitement à chaque tabulation. Pour des options différenciées, il faut impérativement passer un vecteur contenant autant de valeurs que de tabulations.","code":"micro_arb(   arb_filename     = \"Z:/donnees.arb\",   asc_filename     = \"Z:/donnees.asc\",   explanatory_vars = list(\"V1\", c(\"V2\", \"V3\")),   response_var     = \"VAL\",   safety_rules     = c(\"FREQ(3,10)\", \"FREQ(3,10)|NK(1,85)\"),   weighted         = c(TRUE, FALSE),   suppress         = \"GH(.,100)\",   output_options   = \"AS+SE+\" ) file.show(\"Z:/donnees.arb\", pager = \"internal\") // Batch generated by package *rtauargus* // (2025-02-17 12:15:37 CET) <OPENMICRODATA> \"Z:\\donnees.asc\" <OPENMETADATA> \"Z:\\donnees.rda\" <SPECIFYTABLE> \"V1\"|\"VAL\"|| <SAFETYRULE> FREQ(3,10)|Wgt(1) <SPECIFYTABLE> \"V2\"\"V3\"|\"VAL\"|| <SAFETYRULE> FREQ(3,10)|NK(1,85) <READMICRODATA> <SUPPRESS> GH(1,100) <WRITETABLE> (1,4,AS+SE+,\"C:\\Users\\KQCFFL\\AppData\\Local\\Temp\\Rtmpm05wlj\\RTA_13aa84f670af.sbs\") <SUPPRESS> GH(2,100) <WRITETABLE> (2,4,AS+SE+,\"C:\\Users\\KQCFFL\\AppData\\Local\\Temp\\Rtmpm05wlj\\RTA_13aa836d5f26.sbs\")"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"fichiers-temporaires-1","dir":"Articles","previous_headings":"Décomposition du processus > [2] Fonction micro_arb","what":"Fichiers temporaires","title":"Tau-Argus depuis R - sur microdonnées","text":"Dans l’exemple précédent, les noms des fichiers en sortie (output_names) n’étaient pas précisés, ce qui conduit à la génération de noms de fichiers temporaires. Préciser le nom du fichier .arb n’est pas obligatoire non plus. Ces informations sont récupérables dans la valeur de retour de la fonction. sommaire ↑","code":"infos_arb <-   micro_arb(     asc_filename     = \"Z:/donnees.asc\",     explanatory_vars = list(\"V1\", c(\"V2\", \"V3\")),     safety_rules     = \"FREQ(3,10)\",     suppress         = \"GH(.,100)\",     output_type      = \"4\"   ) infos_arb #> $arb_filename #> [1] \"C:\\\\Users\\\\KQCFFL\\\\AppData\\\\Local\\\\Temp\\\\Rtmpm05wlj\\\\RTA_13aa810e14665.arb\" #>  #> $output_names #> [1] \"C:\\\\Users\\\\KQCFFL\\\\AppData\\\\Local\\\\Temp\\\\Rtmpm05wlj\\\\RTA_13aa83f037ada.sbs\" #> [2] \"C:\\\\Users\\\\KQCFFL\\\\AppData\\\\Local\\\\Temp\\\\Rtmpm05wlj\\\\RTA_13aa842b273bd.sbs\""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"fonction-run_arb","dir":"Articles","previous_headings":"Décomposition du processus","what":"[3] Fonction run_arb","title":"Tau-Argus depuis R - sur microdonnées","text":"Maintenant que les instructions ont été générées dans un fichier .arb, peut le soumettre à τ-Argus en mode batch. récupère la liste des tableaux secrétisés : run_arb est la seule fonction du package qui exécute τ-Argus. Elle nécessite donc que le logiciel soit accessible depuis le poste de travail. Seul l’argument arb_filename est obligatoire, car toutes les informations nécessaires sont présentes dans le fichier .arb. Des paramètres optionnels sont également disponibles : missing_dir : action à effectuer si un dossier où sera écrit le résultat n’existe pas (déclencher une erreur ou le créer) tauargus_exe : pour changer l’exécutable (surcharge l’option rtauargus.tauargus_exe le temps de la fonction) ; logbook : emplacement et nom du fichier contenant le journal d’erreurs ; show_batch_on_console : pour afficher ou non le déroulement du batch dans la console ; import : si désactivé, la fonction ne fait que générer les fichiers texte sans les importer dans R (voir section suivante pour plus de détails). Si les tabulations ont reçu un nom dans micro_arb, ces noms sont utilisés pour la liste de data.frames en sortie de run_arb (pas de noms définis dans l’exemple ci-dessus). Des vérifications sont effectuées avant le lancement effectif de τ-Argus : existence du logiciel sur le poste, des fichiers asc et rda, des dossiers où écrire les résultats, des variables à utiliser (croisements, variable de réponse, …) dans les métadonnées (fichier rda). sommaire ↑","code":"secret2 <- run_arb(\"Z:/donnees.arb\") #> Start of batch procedure; file: Z:\\donnees.arb #> <OPENMICRODATA> \"Z:\\donnees.asc\" #> <OPENMETADATA> \"Z:\\donnees.rda\" #> <SPECIFYTABLE> \"V1\"|\"VAL\"|| #> <SAFETYRULE> FREQ(3,10)|Wgt(1) #> <SPECIFYTABLE> \"V2\"\"V3\"|\"VAL\"|| #> <SAFETYRULE> FREQ(3,10)|NK(1,85) #> <READMICRODATA> #> Start explore file: Z:\\donnees.asc #> Start computing tables #> Table: V1 | VAL has been specified #> Table: V2 x V3 | VAL has been specified #> Tables have been computed #> Micro data file read; processing time 0 seconds #> Tables from microdata have been read #> <SUPPRESS> GH(1,100) #> Start of the hypercube protection for table V1 | VAL #> End of hypercube protection. Time used 1 seconds #>                    Number of suppressions: 1 #> The hypercube procedure has been applied #>                    1 cells have been suppressed #> <WRITETABLE> (1,4,AS+SE+,\"C:\\Users\\KQCFFL\\AppData\\Local\\Temp\\Rtmpm05wlj\\RTA_13aa84f670af.sbs\") #> Table: V1 | VAL has been written #>                    Output file name: C:\\Users\\KQCFFL\\AppData\\Local\\Temp\\Rtmpm05wlj\\RTA_13aa84f670af.sbs #> <SUPPRESS> GH(2,100) #> Start of the hypercube protection for table V2 x V3 | VAL #> End of hypercube protection. Time used 1 seconds #>                    Number of suppressions: 2 #> The hypercube procedure has been applied #>                    2 cells have been suppressed #> <WRITETABLE> (2,4,AS+SE+,\"C:\\Users\\KQCFFL\\AppData\\Local\\Temp\\Rtmpm05wlj\\RTA_13aa836d5f26.sbs\") #> Table: V2 x V3 | VAL has been written #>                    Output file name: C:\\Users\\KQCFFL\\AppData\\Local\\Temp\\Rtmpm05wlj\\RTA_13aa836d5f26.sbs #> End of TauArgus run secret2 #> NULL"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"fonction-import","dir":"Articles","previous_headings":"Décomposition du processus","what":"[4] Fonction import","title":"Tau-Argus depuis R - sur microdonnées","text":"Cette fonction importe les résultats produits par τ-Argus (fichiers texte) à partir des informations contenues dans un fichier arb. Elle nécessite donc que le batch se soit déroulé sans erreur et que les fichiers soient toujours présents. Pour cette dernière raison, la fonction import est typiquement appelée depuis run_arb en paramétrant import = TRUE. Elle est aussi utilisable de manière indépendante (par exemple si ne souhaite pas relancer un batch qui mis beaucoup de temps à s’exécuter).","code":"secret2 <- import(\"Z:/donnees.arb\") #  produit le même résultat que run_arb(\"Z:/donnees.arb\", import = TRUE)"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"formats-acceptés","dir":"Articles","previous_headings":"Décomposition du processus > [4] Fonction import","what":"Formats acceptés","title":"Tau-Argus depuis R - sur microdonnées","text":"Il n’est possible (à l’heure actuelle) que d’importer les résultats de type : \"2\" : csv pivot-table \"4\" : sbs output format Si l’import est impossible pour une tabulation donnée, un data.frame vide est retourné (avec un message d’avertissement).","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"attributs-des-tabulations","dir":"Articles","previous_headings":"Décomposition du processus > [4] Fonction import","what":"Attributs des tabulations","title":"Tau-Argus depuis R - sur microdonnées","text":"À chaque data.frame de la liste est associé un ensemble d’attributs, des métadonnées gardant une trace des spécifications passées à τ-Argus. Par exemple, pour secret2[[2]] (le deuxième tableau de secret2), y retrouve les paramètres que l’transmis à la fonction (les autres correspondent à des valeurs par défaut du package). sommaire ↑","code":"str(secret2[[2]]) #>  NULL"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"options-du-package","dir":"Articles","previous_headings":"","what":"Options du package","title":"Tau-Argus depuis R - sur microdonnées","text":"Les options du package définissent les comportements par défaut des fonctions. Ces options sont utilisées si un argument obligatoire d’une fonction n’est pas renseigné. Elles permettent de ne pas répéter systématiquement le même paramètre à chaque appel d’une fonction. Le nom de l’option est le nom de l’argument d’une fonction précédé de rtauargus. : Par exemple, rtauargus.decimals sera la valeur utilisée si l’argument decimals de la fonction micro_asc_rda n’est pas renseigné par l’utilisateur. Au chargement, le package attribue une valeur par défaut à toutes les options de rtauargus qui ne sont pas encore déclarées. Les options déjà définies par l’utilisateur gardent leurs valeurs. Les options disponibles ainsi que leurs valeurs par défaut sont listées ci-dessous :","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"affichage","dir":"Articles","previous_headings":"Options du package","what":"Affichage","title":"Tau-Argus depuis R - sur microdonnées","text":"Pour afficher les options définies pour la session en cours : Les valeurs sont identiques aux valeurs par défaut, hormis l’emplacement de τ-Argus, qui été préalablement modifié. Elles apparaissent dans l’ordre alphabétique. sommaire ↑","code":"rtauargus_options() #> $rtauargus.decimals #> [1] 0 #>  #> $rtauargus.hierleadstring #> [1] \"@\" #>  #> $rtauargus.import #> [1] FALSE #>  #> $rtauargus.is_tabular #> [1] TRUE #>  #> $rtauargus.linked #> [1] FALSE #>  #> $rtauargus.missing #> [1] \"\" #>  #> $rtauargus.missing_dir #> [1] \"stop\" #>  #> $rtauargus.output_options #> [1] \"AS+SE+\" #>  #> $rtauargus.output_type #> [1] \"4\" #>  #> $rtauargus.response_var #> [1] \"<freq>\" #>  #> $rtauargus.separator #> [1] \",\" #>  #> $rtauargus.show_batch_console #> [1] FALSE #>  #> $rtauargus.tauargus_exe #> [1] \"Y:/Logiciels/TauArgus/TauArgus4.2.3/TauArgus.exe\" #>  #> $rtauargus.totcode #> [1] \"Total\" #>  #> $rtauargus.weighted #> [1] FALSE"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"modification-réinitialisation","dir":"Articles","previous_headings":"Options du package","what":"Modification, réinitialisation","title":"Tau-Argus depuis R - sur microdonnées","text":"Pour modifier une ou plusieurs options, utiliser la syntaxe suivante (la même que celle employée pour modifier l’emplacement de τ-Argus) : Pour réinitialiser certaines options : Pour remettre toutes les valeurs par défaut (y compris le chemin vers τ-Argus modifié en début de démonstration), ne spécifier aucun argument : sommaire ↑","code":"options(   rtauargus.show_batch_console = FALSE,   rtauargus.output_options     = \"AS+SE+\",   rtauargus.output_type        = \"4\",   rtauargus.response_var       = \"VAL\" )  str(rtauargus_options()) #> List of 15 #>  $ rtauargus.decimals          : int 0 #>  $ rtauargus.hierleadstring    : chr \"@\" #>  $ rtauargus.import            : logi FALSE #>  $ rtauargus.is_tabular        : logi TRUE #>  $ rtauargus.linked            : logi FALSE #>  $ rtauargus.missing           : chr \"\" #>  $ rtauargus.missing_dir       : chr \"stop\" #>  $ rtauargus.output_options    : chr \"AS+SE+\" #>  $ rtauargus.output_type       : chr \"4\" #>  $ rtauargus.response_var      : chr \"VAL\" #>  $ rtauargus.separator         : chr \",\" #>  $ rtauargus.show_batch_console: logi FALSE #>  $ rtauargus.tauargus_exe      : chr \"Y:/Logiciels/TauArgus/TauArgus4.2.3/TauArgus.exe\" #>  $ rtauargus.totcode           : chr \"Total\" #>  $ rtauargus.weighted          : logi FALSE reset_rtauargus_options(\"rtauargus.response_var\", \"rtauargus.output_type\")  # Il est possible d'omettre le préfixe 'rtauargus.' # L'instruction suivante est équivalente : reset_rtauargus_options(\"response_var\", \"output_type\")  str(rtauargus_options()) #> List of 15 #>  $ rtauargus.decimals          : int 0 #>  $ rtauargus.hierleadstring    : chr \"@\" #>  $ rtauargus.import            : logi FALSE #>  $ rtauargus.is_tabular        : logi TRUE #>  $ rtauargus.linked            : logi FALSE #>  $ rtauargus.missing           : chr \"\" #>  $ rtauargus.missing_dir       : chr \"stop\" #>  $ rtauargus.output_options    : chr \"AS+SE+\" #>  $ rtauargus.output_type       : chr \"4\" #>  $ rtauargus.response_var      : chr \"<freq>\" #>  $ rtauargus.separator         : chr \",\" #>  $ rtauargus.show_batch_console: logi FALSE #>  $ rtauargus.tauargus_exe      : chr \"Y:/Logiciels/TauArgus/TauArgus4.2.3/TauArgus.exe\" #>  $ rtauargus.totcode           : chr \"Total\" #>  $ rtauargus.weighted          : logi FALSE reset_rtauargus_options()"},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"portée-locale-ou-globale","dir":"Articles","previous_headings":"Options du package","what":"Portée locale ou globale","title":"Tau-Argus depuis R - sur microdonnées","text":"Comme toute fonction R, le paramétrage s’effectue en spécifiant chacun des arguments au moment de l’appel de la fonction (portée locale). Le système d’options du package permet par les instructions options(rtauargus.<option> = <valeur>) de définir des options de manière plus globale. Selon l’endroit où sont écrites ces instructions, la configuration perdurera plus ou moins longtemps : dans le script, pour un effet sur la session en cours uniquement ; dans un fichier de configuration utilisateur (.Rprofile…), pour permettre à un utilisateur de garder en mémoire ses préréglages d’une session sur l’autre. Le deuxième façon de procéder est à déconseiller si la chaîne de traitement se veut reproductible. En effet, un script identique exécuté sur deux machines différentes pourrait produire deux résultats différents. sommaire ↑","code":""},{"path":[]},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"autres-fonctionnalités","dir":"Articles","previous_headings":"Autres informations","what":"Autres fonctionnalités","title":"Tau-Argus depuis R - sur microdonnées","text":"Certaines fonctionnalités du package ne sont pas évoquées dans ce document de prise en main : gestion de tableaux liés (argument linked dans micro_arb) création de variables hiérarchiques à partir de microdonnées (fonction write_hrc). prise en compte de fichier apriori (argument apriori dans micro_arb) utilisation de la fonction rtauargus à partir de microdonnées déjà sous forme de fichier texte (et non de data.frame) lancement optimisé d’un grand nombre de croisements ayant les mêmes paramètres (règles de secret primaire, méthode de secret secondaire, …) : fonction rtauargus_plus Consulter l’aide de ces fonctions pour plus d’informations.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"idées-pour-la-suite","dir":"Articles","previous_headings":"Autres informations","what":"Idées pour la suite","title":"Tau-Argus depuis R - sur microdonnées","text":"implémenter paramètres request… prendre en compte des données tabulées en entrée …","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"signaler-un-problème-suggérer-une-amélioration","dir":"Articles","previous_headings":"Autres informations","what":"Signaler un problème, suggérer une amélioration","title":"Tau-Argus depuis R - sur microdonnées","text":"Le package est en cours de construction. Toutes les fonctionnalités de τ-Argus n’ont pas été intégrées (la finalité n’est pas de les intégrer toutes, seulement les plus fréquemment utilisées). Pour tout retour ou signalement d’erreur, utiliser de préférence ce lien (cliquer sur “New issue”). Nécessite d’être connecté au gitlab-Insee.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/rtauargus_micro_fr.html","id":"à-propos-de-cette-vignette","dir":"Articles","previous_headings":"Autres informations","what":"À propos de cette vignette","title":"Tau-Argus depuis R - sur microdonnées","text":"Auteur : Pierre-Yves Berrard Dernière mise à jour : 17/02/2025 Version de rtauargus utilisée : 1.2.999 Version de τ-Argus utilisée : TauArgus 4.2.3 Version de R utilisée : 4.3.3 sommaire ↑","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/split_tab_fr.html","id":"comment-la-réduction-dun-tableau-à-4-ou-5-dimensions-est-elle-réalisée","dir":"Articles","previous_headings":"","what":"Comment la réduction d’un tableau à 4 ou 5 dimensions est-elle réalisée ?","title":"Comment poser du secret sur des tableaux à 4 ou 5 dimensions avec `rtauargus`?","text":"Pour passer de 5 à 3 dimensions, utilise deux fois de suite la méthode utilisée pour réduire un tableau en sous-tableaux ayant une dimension de moins. Le passage de 4 à 3 dimensions consiste d’abord à fusionner deux des quatre dimensions du tableau original, c’est-à-dire qu’remplace deux des variables de départ par une seule dont les modalités sont la fusion des modalités des deux variables choisies. Dans l’exemple ci-dessous, fusionne par exemple les deux variables SEX et AGE pour n’en faire qu’une seule appelée SEX_AGE.  Mais, la nouvelle variable contient des modalités non-emboîtées entre elles, comme, par exemple, les modalités Femme_Total et Ensemble_Adulte. , nous savons gérer la présence de hiérarchies non-emboîtées dans un tableau. Il suffit, en effet, de construire les sous-tableaux de même structure de telle sorte que dans chacun de ces sous-tableaux la variable incriminée soit restreinte à une partie parfaitement emboîtée de ses modalités. Pour poser le secret sur les sous-tableaux liés engendrés, il est fait appel à la fonction tab_multi_manager, spécialement conçue pour assurer la cohérence du secret entre tableaux liés. Ici, la fusion nécessite la construction de deux sous-tableaux, chacun ayant une variable SEX__AGE parfaitement hiérarchique. Le premier rassemble les modalités Total_Ensemble, Total_Adulte et Total_Enfant, le second Total_Ensemble, Femme_Ensemble et Homme_Ensemble. Cet exemple est le plus simple qu’il soit: en fusionnant deux variables non hiérarchiques, est amené à générer deux sous-tableaux. Lorsque l’une des variables fusionnées est elle-même hiérarchique, la construction des sous-tableaux s’appuie sur les différents sous-totaux présents dans la hiérarchie, comme indiqué dans la figure ci-dessous:","code":"Total_Ensemble = Total_Adulte + Total_Enfant Total_Ensemble = Femme_Ensemble + Homme_Ensemble"},{"path":"https://inseefrlab.github.io/rtauargus/articles/split_tab_fr.html","id":"pour-aller-plus-loin","dir":"Articles","previous_headings":"","what":"Pour aller plus loin","title":"Comment poser du secret sur des tableaux à 4 ou 5 dimensions avec `rtauargus`?","text":"Article présentant la méthode et des résultats de simulation","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/split_tab_fr.html","id":"les-principaux-arguments-ajoutés-à-tab_rtauargus-et-tab_multi_manager","dir":"Articles","previous_headings":"","what":"Les principaux arguments ajoutés à tab_rtauargus() et tab_multi_manager()","title":"Comment poser du secret sur des tableaux à 4 ou 5 dimensions avec `rtauargus`?","text":"Pour activer le découpage des tableaux de dimension 4 ou 5 en sous-tableaux de 3 dimensions, l’utilisateur doit activer l’argument split_tab en le passant à TRUE. Cette valeur est sa valeur par défaut. Ainsi, l’utilisateur veillera à passer cet argument à FALSE s’il souhaite qu’un tableau à 4 dimensions soit traité directement par Tau-Argus. L’argument nb_tab_option permet de préciser la façon dont le tableau est découpé: L’option \"min\" consiste à construire le minimum de tables à 3 dimensions lors de la fusion. Ce sont donc des variables non hiérarchiques qui seront fusionnées en priorité. L’option \"max\" au contraire construit le maximum de tables à 3 dimensions possible lors de la fusion. Ce sont donc des variables hiérarchiques qui seront fusionnées en priorité. Cette option est intéressante pour réduire la taille des sous-tableaux produits et donc augmenter les chances que Tau-Argus puisse les traiter. L’inconvénient de cette option est qu’elle peut générer un très grand nombre de tableaux, nombre dépendant du nombre de noeuds dans les hiérarchies. L’option \"smart\" va chercher à construire le minimum de tables à 3 dimensions tout en cherchant à respecter une limite de taille (nombre de lignes) pour les sous-tableaux construits. Cette limite est fixée par l’argument limit. Par défaut, la valeur est fixée à 14 700 - choisie de par notre expérience. Si la limite n’est pas atteignable, un avertissement est affiché mais cela ne bloque pas la construction des tables et la pose du masque. Par défaut, l’argument nb_tab_option est fixé à \"smart\". Il est déconseillé de changer cette valeur dans un premier temps. L’argument nb_tab = \"min\" est intéressant en termes de secret car c’est l’option qui génèrera le moins de sur-secret puisqu’elle construira le moins possible de sous-tableaux liés. Il peut être intéressant à utiliser si la table de départ contient un nombre de lignes raisonnables, c’est-à-dire si chaque dimension n’est pas trop ventilée. L’argument nb_tab = \"max\" créant le plus de tableaux possibles engendrera nécessairement le plus de secret, mais elle pourra aussi convenir quand les tableaux d’origine sont très longs et nécessitent d’être beaucoup découpés pour que la pose du secret soit possible avec Tau-Argus.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/split_tab_fr.html","id":"exemple","dir":"Articles","previous_headings":"","what":"Exemple","title":"Comment poser du secret sur des tableaux à 4 ou 5 dimensions avec `rtauargus`?","text":"Comme tout est géré par la fonction tab_rtauargus, la pose du secret sur un tableau à 4 ou 5 dimensions n’ajoute pas de difficultés particulières pour l’utilisateur en réalité. Nous présentons ici un exemple de pose de secret sur un tableau à 4 dimensions.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/articles/split_tab_fr.html","id":"préparation-des-données","dir":"Articles","previous_headings":"Exemple","what":"Préparation des données","title":"Comment poser du secret sur des tableaux à 4 ou 5 dimensions avec `rtauargus`?","text":"","code":"library(tictoc) library(dplyr) library(rtauargus) options(   rtauargus.tauargus_exe =     \"Y:/Logiciels/TauArgus/TauArgus4.2.3/TauArgus.exe\" ) data(\"datatest1\") str(datatest1) #> tibble [689 x 12] (S3: tbl_df/tbl/data.frame) #>  $ treff         : chr [1:689] \"tr1\" \"tr2\" \"tr3\" \"Total\" ... #>  $ cj            : chr [1:689] \"Total\" \"Total\" \"Total\" \"PA\" ... #>  $ type_distrib  : chr [1:689] \"Total\" \"Total\" \"Total\" \"Total\" ... #>  $ A10           : chr [1:689] \"Total\" \"Total\" \"Total\" \"Total\" ... #>  $ nb_obs        : num [1:689] 227093 7803 227 1443 125904 ... #>  $ pizzas_tot    : num [1:689] 5900938 6538420 6794859 15128 10168928 ... #>  $ pizzas_max    : num [1:689] 135444 267177 852749 2756 523505 ... #>  $ is_secret_freq: logi [1:689] FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ is_secret_dom : logi [1:689] FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ is_secret_prim: logi [1:689] FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ nb_obs_rnd    : num [1:689] 227094 7804 228 1444 125905 ... #>  $ pizzas_tot_abs: num [1:689] 5900938 6538420 6794859 15128 10168928 ... #>  - attr(*, \".internal.selfref\")=<externalptr>"},{"path":"https://inseefrlab.github.io/rtauargus/articles/split_tab_fr.html","id":"préparation-des-arguments-pour-tab_rtauargus","dir":"Articles","previous_headings":"Exemple","what":"Préparation des arguments pour tab_rtauargus","title":"Comment poser du secret sur des tableaux à 4 ou 5 dimensions avec `rtauargus`?","text":"","code":"totcode <- c(treff =\"Total\",cj =\"Total\", A10 = \"Total\", type_distrib =\"Total\") explanatory_vars<- names(totcode)"},{"path":"https://inseefrlab.github.io/rtauargus/articles/split_tab_fr.html","id":"pose-du-secret-primaire","dir":"Articles","previous_headings":"Exemple","what":"Pose du secret primaire","title":"Comment poser du secret sur des tableaux à 4 ou 5 dimensions avec `rtauargus`?","text":"","code":"datatest1_with_prim <- datatest1 %>%     mutate(       is_secret_freq = (nb_obs > 0 & nb_obs < 3),       is_secret_dom = (pizzas_tot != 0) & (pizzas_max > 0.85*pizzas_tot),       pizzas_tot= round(abs(pizzas_tot),2)     ) %>%     mutate(       is_secret_prim =  is_secret_freq ,       nb_obs = ceiling(nb_obs)     )"},{"path":"https://inseefrlab.github.io/rtauargus/articles/split_tab_fr.html","id":"pose-du-secret-secondaire-avec-rtauargus","dir":"Articles","previous_headings":"Exemple","what":"Pose du secret secondaire avec rtauargus","title":"Comment poser du secret sur des tableaux à 4 ou 5 dimensions avec `rtauargus`?","text":"Pour poser le secret secondaire, utilise la fonction tab_rtauargus avec l’argument split_tab = TRUE. Ainsi, Tau-Argus n’aura pas à traiter directement le secret sur la table à 4 dimensions. La fonction tab_rtauargus va découper la table originale en un certain nombre de tables qui seront protégées comme des tables liées avec un appel sous-jacent à tab_multi_manager. La réduction de dimensions conduit à construire deux sous-tableaux de 3 dimensions à partir du tableau original. Avec l’option de découpage du tableau de départ, la pose du secret sur le tableau à 4 dimensions génère 278 suppressions secondaires.","code":"tictoc::tic() res_wi_split <- tab_rtauargus(     tabular = datatest1_with_prim,     files_name = \"datatest1\",     dir_name = \"example_1\",     explanatory_vars = explanatory_vars,     totcode = totcode,     value = \"pizzas_tot\",     freq = \"nb_obs\",     secret_var = \"is_secret_prim\",     verbose = TRUE,     split_tab = TRUE ) #>  #> Reducing dims... #>  tab  #>  #> Choosing variables... #>  #> Reducing from 4 to 3... #> tab has generated 2 tables in total #>  #> Spliting... #>  treff___cj  #> tab has generated 2 tables in total #>  #> --- Current table to treat:  tab1 --- #> --- Current table to treat:  tab2 --- #> --- Current table to treat:  tab1 --- #> --- Current table to treat:  tab2 --- #> --- Current table to treat:  tab1 --- tictoc::toc() #> 45.31 sec elapsed str(res_wi_split) #> 'data.frame':    689 obs. of  17 variables: #>  $ treff         : chr  \"Total\" \"tr1\" \"tr1\" \"tr1\" ... #>  $ cj            : chr  \"Total\" \"LL\" \"SP\" \"Total\" ... #>  $ type_distrib  : chr  \"1\" \"1\" \"1\" \"1\" ... #>  $ A10           : chr  \"AZ\" \"AZ\" \"AZ\" \"AZ\" ... #>  $ nb_obs        : num  115 89 21 110 6 ... #>  $ pizzas_tot    : num  8447 769 1301 532 7915 ... #>  $ pizzas_max    : num  1471.2 13.8 96.4 96.4 1471.2 ... #>  $ is_secret_freq: logi  FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ is_secret_dom : logi  FALSE TRUE FALSE FALSE FALSE FALSE ... #>  $ is_secret_prim: logi  FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ nb_obs_rnd    : num  115 89 21 110 6 ... #>  $ pizzas_tot_abs: num  8447 769 1301 532 7915 ... #>  $ is_secret_1   : logi  FALSE TRUE FALSE TRUE TRUE TRUE ... #>  $ is_secret_2   : logi  FALSE TRUE TRUE TRUE TRUE TRUE ... #>  $ is_secret_3   : logi  FALSE TRUE TRUE TRUE TRUE TRUE ... #>  $ is_secret_4   : logi  FALSE TRUE TRUE TRUE TRUE TRUE ... #>  $ is_secret_5   : logi  FALSE TRUE TRUE TRUE TRUE TRUE ... stats_wi_split <- res_wi_split %>%     rename_with( ~\"final_suppress\", last_col()) %>%     mutate(       flag = case_when(         is_secret_freq ~ \"A\",         is_secret_dom ~ \"B\",         final_suppress ~ \"D\",         TRUE ~\"V\"       )     ) %>%     count(flag) stats_wi_split #>   flag   n #> 1    A  79 #> 2    B  35 #> 3    D 278 #> 4    V 297"},{"path":"https://inseefrlab.github.io/rtauargus/articles/split_tab_fr.html","id":"comparaison-avec-une-pose-du-secret-sans-réduire-la-dimension-de-la-table","dir":"Articles","previous_headings":"Exemple","what":"Comparaison avec une pose du secret sans réduire la dimension de la table","title":"Comment poser du secret sur des tableaux à 4 ou 5 dimensions avec `rtauargus`?","text":"Tau-Argus est en capacité de poser le secret secondaire sur un tableau à 4 dimensions avec Modular, mais, en plus d’émettre un avertissement sur le fait qu’avec ce nombre de dimensions, la qualité du résultat n’est pas garantie, il est aussi beaucoup plus long à poser le secret secondaire que lorsqu’il traite deux tables liées issues du tableau original. Avec seulement 689 lignes et aucune variable hiérarchique, la pose directe du secret prend environ 5 minutes à Tau-Argus. La pose directe du secret sur le tableau à 4 dimensions génère 265 suppressions secondaires. peut observer que le traitement de la table à 4 dimensions directement génère un masque un peu moins chargé en secret: 266 cellules en secret secondaire, contre 278 avec une réduction de dimensions. Il est difficile d’anticiper cette différence puisqu’elle est très dépendante de la structuration des données, de la présence du secret primaire au sein du tableau original et de la façon dont les sous-tableaux vont être construits.","code":"tictoc::tic() res_wo_split <- tab_rtauargus(     tabular = datatest1_with_prim,     files_name = \"datatest1\",     dir_name = \"example_1/wo_split\",     explanatory_vars = explanatory_vars,     totcode = totcode,     value = \"pizzas_tot\",     freq = \"nb_obs\",     secret_var = \"is_secret_prim\",     verbose = TRUE,     split_tab = FALSE ) #> Warning : #> It is highly recommended to use split_tab = TRUE when using rtauargus with 4 or 5 dimensions tables. #> It allows to split the table in several tables with 3 dimensions. #>  #> With split_tab = FALSE, tauargus treats the table in 4 or 5 dimensions. #> In this case, the secondary secret may not being optimal according to tauargus itself #> and the process may take longer. #> Start of batch procedure; file: Z:\\SDC\\OutilsConfidentialite\\rtauargus\\vignettes\\example_1\\wo_split\\datatest1.arb #> <OPENTABLEDATA> \"Z:\\SDC\\OutilsConfidentialite\\rtauargus\\vignettes\\example_1\\wo_split\\datatest1.tab\" #> <OPENMETADATA> \"Z:\\SDC\\OutilsConfidentialite\\rtauargus\\vignettes\\example_1\\wo_split\\datatest1.rda\" #> <SPECIFYTABLE> \"treff\"\"cj\"\"A10\"\"type_distrib\"|\"pizzas_tot\"|| #> <SAFETYRULE> MAN(10) #> <READTABLE> 1 #> Tables have been read #> <APRIORI> \"Z:\\SDC\\OutilsConfidentialite\\rtauargus\\vignettes\\example_1\\wo_split\\datatest1.hst\",1,\",\",0,0 #> Apriory file: Z:\\SDC\\OutilsConfidentialite\\rtauargus\\vignettes\\example_1\\wo_split\\datatest1.hst has been applied #>                    to table: treff x cj x A10 x type_distrib | pizzas_tot #> Apriori file Z:\\SDC\\OutilsConfidentialite\\rtauargus\\vignettes\\example_1\\wo_split\\datatest1.hst has been read #> <SUPPRESS> MOD(1,5,1,0,0) #> Start of the modular protection for table treff x cj x A10 x type_distrib | pizzas_tot #> WARNING: The table has 4 dimensions. #>                    Running Modular can take a lot of time and maybe it is difficult to obtain a correct result. #>                    Please check the results carefully. #>                     #> End of modular protection. Time used 301 seconds #>                    Number of suppressions: 291 #> <WRITETABLE> (1,4,,\"Z:\\SDC\\OutilsConfidentialite\\rtauargus\\vignettes\\example_1\\wo_split\\datatest1.csv\") #> Table: treff x cj x A10 x type_distrib | pizzas_tot has been written #>                    Output file name: Z:\\SDC\\OutilsConfidentialite\\rtauargus\\vignettes\\example_1\\wo_split\\datatest1.csv #> End of TauArgus run tictoc::toc() #> 306.34 sec elapsed stats_wo_split <- res_wo_split %>%     mutate(       flag = case_when(         is_secret_freq ~ \"A\",         is_secret_dom ~ \"B\",         TRUE ~ Status       )     ) %>%     count(flag) stats_wo_split #>   flag   n #> 1    A  79 #> 2    B  35 #> 3    D 265 #> 4    V 310"},{"path":"https://inseefrlab.github.io/rtauargus/articles/split_tab_fr.html","id":"détail-de-la-vignette","dir":"Articles","previous_headings":"","what":"Détail de la vignette","title":"Comment poser du secret sur des tableaux à 4 ou 5 dimensions avec `rtauargus`?","text":"Authors:  Wistan Pomel  &  Andre-Raymond Socard  & Julien Jamme & Nathanael Rastout Last update: 11/01/2024 Version rtauargus used: 1.2.0 Version τ-Argus used : TauArgus 4.2.3 R version used : 4.2.3  summary ↑","code":""},{"path":"https://inseefrlab.github.io/rtauargus/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Pierre-Yves Berrard. Author. Julien Jamme. Author, maintainer. Nathanaël Rastout. Author. Jeanne Pointet. Author. Félix Beroud. Author. André-Raymond Socard. Author. Wistan Pomel. Author. Clara Baudry. Author. Institut National de la Statistique et des Études Économiques. Copyright holder.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Berrard P, Jamme J, Rastout N, Pointet J, Beroud F, Socard , Pomel W, Baudry C (2025). rtauargus: Using Tau-Argus R. R package version 1.2.999, https://github.com/inseefrlab/rtauargus, https://inseefrlab.github.io/rtauargus/, https://inseefrlab.github.io/rtauargus.","code":"@Manual{,   title = {rtauargus: Using Tau-Argus from R},   author = {Pierre-Yves Berrard and Julien Jamme and Nathanaël Rastout and Jeanne Pointet and Félix Beroud and André-Raymond Socard and Wistan Pomel and Clara Baudry},   year = {2025},   note = {R package version 1.2.999,     https://github.com/inseefrlab/rtauargus,     https://inseefrlab.github.io/rtauargus/},   url = {https://inseefrlab.github.io/rtauargus}, }"},{"path":"https://inseefrlab.github.io/rtauargus/index.html","id":"rtauargus-","dir":"","previous_headings":"","what":"Using Tau-Argus from R","title":"Using Tau-Argus from R","text":"package documentation available .","code":""},{"path":"https://inseefrlab.github.io/rtauargus/index.html","id":"run-τ-argus-from-r","dir":"","previous_headings":"","what":"Run τ-Argus from R","title":"Using Tau-Argus from R","text":"rtauargus package provides R interface τ-Argus. allows : create inputs (rda, arb, hst tab files) data R format ; generate sequence instructions executed batch mode (arb file); launch τ-Argus batch command line; retrieve results R. different operations can executed one go, also modular way. allow integrate tasks performed τ-Argus processing chain written R. package presents additional functionalities, : managing protection several tables ; creating hierarchical variable correspondence table. ’s possible choose tabular microdata approach, tabular one , now , encouraged.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Using Tau-Argus from R","text":"recent stable version (recommended) Insee agents: Elsewhere: version development install specific version, add directory reference (commit tag), example \"inseefrlab/rtauargus@v-0.4.1\".","code":"install.packages(   \"rtauargus\",   repos = \"https://nexus.insee.fr/repository/r-public\",   type = \"source\" ) install.packages(\"remotes\") remotes::install_github(   \"InseeFrLab/rtauargus\",   build_vignettes = FALSE,   upgrade = \"never\" )"},{"path":"https://inseefrlab.github.io/rtauargus/index.html","id":"simple-example","dir":"","previous_headings":"","what":"Simple example","title":"Using Tau-Argus from R","text":"loading package, console displays information: particular, plausible location τ-Argus software predefined. can changed duration R session, follows: small adjustment done, package ready used. following demonstration, fictitious table used: primary rules, use two following ones: n-k dominance rule n=1 k = 85 minimum frequency rule n = 3 safety range 10. get results dominance rule, need specify largest contributor cell, corresponding MAX variable tabular data. default, function displays console logbook content user can read steps run τ-Argus. can retrieved logbook.txt file. verbose = FALSE, function can silenced. default, function returns original dataset one variable , called Status, directly resulting τ-Argus describing status cell follows: -: primary secret cell frequency rule; -B: primary secret cell dominance rule (1st contributor); -C: primary secret cell frequency rule (contributors case n>1); -D: secondary secret cell; -V: valid cells - need mask. files generated function written specified directory (dir_name argument). default format protected table csv can changed. τ-Argus files (.tab, .rda, .arb .txt) written directory, . go , can consult latest version τ-Argus manual downloadable : https://research.cbs.nl/casc/Software/TauManualV4.1.pdf. detailed overview available via vignette(\"rtauargus\").","code":"library(rtauargus) loc_tauargus <- \"Y:/Logiciels/TauArgus/TauArgus4.2.2b1/TauArgus.exe\" options(rtauargus.tauargus_exe = loc_tauargus) act_size <-   data.frame(     ACTIVITY = c(\"01\",\"01\",\"01\",\"02\",\"02\",\"02\",\"06\",\"06\",\"06\",\"Total\",\"Total\",\"Total\"),     SIZE = c(\"tr1\",\"tr2\",\"Total\",\"tr1\",\"tr2\",\"Total\",\"tr1\",\"tr2\",\"Total\",\"tr1\",\"tr2\",\"Total\"),     VAL = c(100,50,150,30,20,50,60,40,100,190,110,300),     N_OBS = c(10,5,15,2,5,7,8,6,14,20,16,36),     MAX = c(20,15,20,20,10,20,16,38,38,20,38,38)   ) ex1 <- tab_rtauargus(   act_size,   dir_name = \"tauargus_files\",   files_name = \"ex1\",   explanatory_vars = c(\"ACTIVITY\",\"SIZE\"),   safety_rules = \"FREQ(3,10)|NK(1,85)\",   value = \"VAL\",   freq = \"N_OBS\",   maxscore = \"MAX\",   totcode = c(ACTIVITY=\"Total\",SIZE=\"Total\") ) #> Start of batch procedure; file: Z:\\SDC\\OutilsConfidentialite\\rtauargus\\tauargus_files\\ex1.arb #> <OPENTABLEDATA> \"Z:\\SDC\\OutilsConfidentialite\\rtauargus\\tauargus_files\\ex1.tab\" #> <OPENMETADATA> \"Z:\\SDC\\OutilsConfidentialite\\rtauargus\\tauargus_files\\ex1.rda\" #> <SPECIFYTABLE> \"ACTIVITY\"\"SIZE\"|\"VAL\"|| #> <SAFETYRULE> FREQ(3,10)|NK(1,85) #> <READTABLE> 1 #> Tables have been read #> <SUPPRESS> MOD(1,5,1,0,0) #> Start of the modular protection for table ACTIVITY x SIZE | VAL #> End of modular protection. Time used 0 seconds #>                    Number of suppressions: 2 #> <WRITETABLE> (1,4,,\"Z:\\SDC\\OutilsConfidentialite\\rtauargus\\tauargus_files\\ex1.csv\") #> Table: ACTIVITY x SIZE | VAL has been written #>                    Output file name: Z:\\SDC\\OutilsConfidentialite\\rtauargus\\tauargus_files\\ex1.csv #> End of TauArgus run ex1 #>    ACTIVITY  SIZE VAL N_OBS MAX Status #> 1        01 Total 150    15  20      V #> 2        01   tr1 100    10  20      V #> 3        01   tr2  50     5  15      V #> 4        02 Total  50     7  20      V #> 5        02   tr1  30     2  20      A #> 6        02   tr2  20     5  10      D #> 7        06 Total 100    14  38      V #> 8        06   tr1  60     8  16      D #> 9        06   tr2  40     6  38      B #> 10    Total Total 300    36  38      V #> 11    Total   tr1 190    20  20      V #> 12    Total   tr2 110    16  38      V"},{"path":"https://inseefrlab.github.io/rtauargus/index.html","id":"important-notes","dir":"","previous_headings":"","what":"Important notes","title":"Using Tau-Argus from R","text":"functions rtauargus calling τ-Argus require software accessible workstation. download τ-Argus done dedicated page sdcTools git repository. _The package developed basis open source versions τ-Argus (versions 4.2 ), particular version used version τ-Argus 4.2.3. compatible version 3.5.**_","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/activity_corr_table.html","id":null,"dir":"Reference","previous_headings":"","what":"data - Correspondence table describing the business sectors hierarchy. — activity_corr_table","title":"data - Correspondence table describing the business sectors hierarchy. — activity_corr_table","text":"dataset describing nesting three levels business sectors, useful working ACTIVITY variables turnover_ datasets.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/activity_corr_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data - Correspondence table describing the business sectors hierarchy. — activity_corr_table","text":"","code":"activity_corr_table"},{"path":"https://inseefrlab.github.io/rtauargus/reference/activity_corr_table.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"data - Correspondence table describing the business sectors hierarchy. — activity_corr_table","text":"data frame 92 rows 3 variables: A10 business sectors 10 categories A21 business sectors 21 categories A88 business sectors 88 categories","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/activity_corr_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"data - Correspondence table describing the business sectors hierarchy. — activity_corr_table","text":"Use write_hrc2 function create .hrc file correspondence table.","code":""},{"path":[]},{"path":"https://inseefrlab.github.io/rtauargus/reference/analyse_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyse Metadata of Tables Needing Secondary Tabular Data Protection — analyse_metadata","text":"","code":"analyse_metadata(df_metadata, verbose = FALSE)"},{"path":"https://inseefrlab.github.io/rtauargus/reference/analyse_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyse Metadata of Tables Needing Secondary Tabular Data Protection — analyse_metadata","text":"df_metadata dataframe containing metadata wide format. verbose Logical. TRUE, returns detailed list intermediate results processing step. FALSE, returns cluster assignments. Defaults FALSE.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/analyse_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyse Metadata of Tables Needing Secondary Tabular Data Protection — analyse_metadata","text":"list dataframe, depending value verbose parameter: verbose = TRUE, returns list detailed intermediate results: identify_hrc data frame renamed variables grouped response variables. info_var mapping original variable names renamed counterparts. split_in_clusters list clusters obtained splitting data. create_edges list edges created describing relationships. grp_tab_names Translation tables generated renaming regrouping. grp_tab_in_clusters Independent tables grouped clusters. tab_to_treat Cluster assignments tables treated. df_tab_to_treat dataframe summarizing tables clusters. verbose = FALSE, returns cluster assignments (tab_to_treat).","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/analyse_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyse Metadata of Tables Needing Secondary Tabular Data Protection — analyse_metadata","text":"function analyzes metadata dataframe determine tables treated together cluster. also rearranges groups tables based hierarchical relationships, creating structured output processing. function performs following steps: Converts metadata wide format long format using wide_to_long. Identifies hierarchical relationships renames variables identify_hrc. Splits hierarchical relationships clusters using split_in_clusters. Creates edges describe relationships via create_edges. Generates translation tables regrouping grp_tab_names. Regroups tables independent clusters grp_tab_in_cluster. Identifies tables treated together using tab_to_treat. Produces final dataframe summarizing cluster assignments using dataframe_result.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/analyse_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyse Metadata of Tables Needing Secondary Tabular Data Protection — analyse_metadata","text":"","code":"data(metadata_pizza_lettuce)  # View the structure of the original data str(metadata_pizza_lettuce) #> 'data.frame':\t12 obs. of  9 variables: #>  $ table_name    : chr  \"T1\" \"T2\" \"T3\" \"T4\" ... #>  $ field         : chr  \"france_entreprises_2023\" \"france_entreprises_2023\" \"france_entreprises_2023\" \"france_entreprises_2023\" ... #>  $ hrc_field     : logi  NA NA NA NA NA NA ... #>  $ indicator     : chr  \"to_pizza\" \"to_pizza\" \"to_pizza\" \"to_pizza\" ... #>  $ hrc_indicator : chr  NA NA NA NA ... #>  $ spanning_1    : chr  \"nuts2\" \"nuts3\" \"a10\" \"a10\" ... #>  $ hrc_spanning_1: chr  \"hrc_nuts\" \"hrc_nuts\" \"hrc_naf\" \"hrc_naf\" ... #>  $ spanning_2    : chr  \"size\" \"size\" \"nuts2\" \"nuts3\" ... #>  $ hrc_spanning_2: chr  NA NA \"hrc_nuts\" \"hrc_nuts\" ...  # Run the analysis detailed_analysis <- analyse_metadata(metadata_pizza_lettuce, verbose = TRUE)  # Simplified output (non-verbose) cluster_id_dataframe <- analyse_metadata(metadata_pizza_lettuce, verbose = FALSE)"},{"path":"https://inseefrlab.github.io/rtauargus/reference/contains_non_total.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Non-Total Values in a Data Frame — contains_non_total","title":"Check for Non-Total Values in a Data Frame — contains_non_total","text":"function checks column data frame contains values part given set totals.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/contains_non_total.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Non-Total Values in a Data Frame — contains_non_total","text":"","code":"contains_non_total(data, totals)"},{"path":"https://inseefrlab.github.io/rtauargus/reference/contains_non_total.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Non-Total Values in a Data Frame — contains_non_total","text":"data data frame containing data checked. totals vector values considered totals.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/contains_non_total.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Non-Total Values in a Data Frame — contains_non_total","text":"logical value: TRUE least one non-total value exists, otherwise FALSE.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/contains_non_total.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for Non-Total Values in a Data Frame — contains_non_total","text":"","code":"if (FALSE) { # \\dontrun{ df <- data.frame(   col1 = c(\"A\", \"B\", \"TOTAL\"),   col2 = c(\"X\", \"TOTAL\", \"TOTAL\") ) contains_non_total(df, c(\"TOTAL\")) # Returns TRUE } # }"},{"path":"https://inseefrlab.github.io/rtauargus/reference/create_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Data Frame of Table Inclusion Relationships — create_edges","title":"Create a Data Frame of Table Inclusion Relationships — create_edges","text":"function analyzes list data frames (clusters tables) identifies inclusion relationships tables. table considered include another spanning variables (columns defining structure table) contained within spanning variables table.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/create_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Data Frame of Table Inclusion Relationships — create_edges","text":"","code":"create_edges(list_split)"},{"path":"https://inseefrlab.github.io/rtauargus/reference/create_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Data Frame of Table Inclusion Relationships — create_edges","text":"list_split list clusters tables, cluster contains nested data frames. Typically, output split_in_clusters function.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/create_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Data Frame of Table Inclusion Relationships — create_edges","text":"list data frames (list_desc_links), data frame describes inclusion relationships () within cluster tables. row data frame indicates table column fully included table column.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/create_edges.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Data Frame of Table Inclusion Relationships — create_edges","text":"example, consider two tables published: T1: company_turnover = {nuts x size} T2: company_turnover = {nuts x size x pollution} information T1 included T2. protecting T2, cells T1 also protected. function identifies inclusion relationships outputs data frame describes links.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/create_edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Data Frame of Table Inclusion Relationships — create_edges","text":"","code":"if (FALSE) { # \\dontrun{ data(metadata_pizza_lettuce)  # Convert wide metadata to long format metadata_pizza_lettuce_long <- wide_to_long(metadata_pizza_lettuce)  # Identify hierarchical relationships list_hrc_identified <- identify_hrc(metadata_pizza_lettuce_long)  # Split tables into clusters list_split <- split_in_clusters(list_hrc_identified)  # Identify inclusion relationships between tables list_desc_links <- create_edges(list_split)  # View the structure of the result str(list_desc_links) } # }"},{"path":"https://inseefrlab.github.io/rtauargus/reference/dataframe_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine List of Dataframes into a Single Dataframe with Cluster Identification — dataframe_result","title":"Combine List of Dataframes into a Single Dataframe with Cluster Identification — dataframe_result","text":"function consolidates list dataframes, representing cluster tables, single dataframe. includes additional column, cluster, identify cluster table belongs .","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/dataframe_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine List of Dataframes into a Single Dataframe with Cluster Identification — dataframe_result","text":"","code":"dataframe_result(list_independent_tables)"},{"path":"https://inseefrlab.github.io/rtauargus/reference/dataframe_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine List of Dataframes into a Single Dataframe with Cluster Identification — dataframe_result","text":"list_independent_tables list tibbles, typically output grp_tab_in_cluster() tab_to_treat(). tibble contains metadata tables grouped within specific cluster.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/dataframe_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine List of Dataframes into a Single Dataframe with Cluster Identification — dataframe_result","text":"single dataframe (dfMetadata_to_treat) following structure: cluster: Identifier cluster table belongs . table_name: name table. field: field name associated table. indicator: Indicators related table. spanning_*: Columns derived spanning metadata, ordered numeric suffix. hrc_spanning_*: Columns derived hierarchical spanning metadata, ordered numeric suffix.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/dataframe_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine List of Dataframes into a Single Dataframe with Cluster Identification — dataframe_result","text":"","code":"if (FALSE) { # \\dontrun{ # Example data data(metadata_pizza_lettuce)  # Convert wide metadata to long format metadata_pizza_lettuce_long <- wide_to_long(metadata_pizza_lettuce)  # Identify hierarchical relationships list_hrc_identified <- identify_hrc(metadata_pizza_lettuce_long)  # Split tables into clusters list_split <- split_in_clusters(list_hrc_identified)  # Detect inclusion relationships list_desc_links <- create_edges(list_split)  # Group tables based on inclusion relationships list_translation_tables <- grp_tab_names(list_desc_links)  # Regroup tables within each cluster list_independent_tables <- grp_tab_in_cluster(list_split, list_translation_tables)  # Flatten the nested data for downstream use list_tab_to_treat <- tab_to_treat(list_independent_tables)  # Create a dataframe with a cluster id dataframe_cluster_id <- dataframe_result(list_tab_to_treat)  # View the result dataframe dataframe_cluster_id } # }"},{"path":"https://inseefrlab.github.io/rtauargus/reference/datatest1.html","id":null,"dir":"Reference","previous_headings":"","what":"data crossing 4 categorical variables, none are hierarchical. — datatest1","title":"data crossing 4 categorical variables, none are hierarchical. — datatest1","text":"data crossing 4 categorical variables, none hierarchical.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/datatest1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data crossing 4 categorical variables, none are hierarchical. — datatest1","text":"","code":"datatest1"},{"path":"https://inseefrlab.github.io/rtauargus/reference/datatest1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"data crossing 4 categorical variables, none are hierarchical. — datatest1","text":"tibble/data frame 689 rows 12 variables: A10 business sector, hierarchical cj legal category, hierarchical type_distrib type distribution, hierarchical treff Number employees (categorical), hierarchical nb_obs Frequency, number companies nb_obs_rnd Frequency rounded, number companies pizzas_tot turnover value euros pizzas_tot_abs turnover absolute value euros pizzas_max turnover max value euros is_secret_freq Boolean, TRUE primary secret frequency rule is_secret_dom Boolean, TRUE primary secret dominance rule is_secret_prim Boolean, TRUE primary secret rule","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/datatest2.html","id":null,"dir":"Reference","previous_headings":"","what":"data crossing 5 categorical variables, none are hierarchical. — datatest2","title":"data crossing 5 categorical variables, none are hierarchical. — datatest2","text":"data crossing 5 categorical variables, none hierarchical.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/datatest2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data crossing 5 categorical variables, none are hierarchical. — datatest2","text":"","code":"datatest2"},{"path":"https://inseefrlab.github.io/rtauargus/reference/datatest2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"data crossing 5 categorical variables, none are hierarchical. — datatest2","text":"tibble/data frame 5 612 rows 15 variables: A10 business sector, hierarchical cj legal category, hierarchical type_distrib type distribution, hierarchical treff Number employees (categorical), hierarchical nuts1 NUTS region, hierarchical nb_obs Frequency, number companies nb_obs_rnd Frequency rounded, number companies pizzas_tot turnover value euros pizzas_tot_abs turnover absolute value euros pizzas_max turnover max value euros is_secret_freq Boolean, TRUE primary secret frequency rule is_secret_dom Boolean, TRUE primary secret dominance rule is_secret_prim Boolean, TRUE primary secret rule","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/enterprise_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract of SBS Eurostat template. — enterprise_template","title":"Extract of SBS Eurostat template. — enterprise_template","text":"dataset describing cells expected Eurostat.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/enterprise_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract of SBS Eurostat template. — enterprise_template","text":"","code":"enterprise_template"},{"path":"https://inseefrlab.github.io/rtauargus/reference/enterprise_template.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Extract of SBS Eurostat template. — enterprise_template","text":"data frame 3 168 rows 5 variables: TIME_PERIOD Integer. year observation (e.g., 2022). INDICATOR Character. type indicator (e.g., \"SAL\"). ACTIVITY Character. sector activity coded using standard classification (e.g., \"B\"). NUMBER_EMPL Character. Employment size category (e.g., \"E0\", \"E1T4\", \"E5T9\", \"EGE10\"). LEGAL_FORM Character. Legal form enterprise, \"_T\" represents legal forms combined.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/filter_on_marginal_of_spanning_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a Data Frame Based on Marginal Criteria — filter_on_marginal_of_spanning_var","title":"Filter a Data Frame Based on Marginal Criteria — filter_on_marginal_of_spanning_var","text":"function filters rows data frame based marginal criteria. applies filtering conditions subset keys corresponding values, excludes rows keys match given totals.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/filter_on_marginal_of_spanning_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a Data Frame Based on Marginal Criteria — filter_on_marginal_of_spanning_var","text":"","code":"filter_on_marginal_of_spanning_var(data, criteria, subset_keys)"},{"path":"https://inseefrlab.github.io/rtauargus/reference/filter_on_marginal_of_spanning_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a Data Frame Based on Marginal Criteria — filter_on_marginal_of_spanning_var","text":"data data frame filtered. criteria named list vector names column names, values totals values used filtering. subset_keys character vector keys (column names) included filter criteria.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/filter_on_marginal_of_spanning_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter a Data Frame Based on Marginal Criteria — filter_on_marginal_of_spanning_var","text":"filtered data frame rows meet specified criteria exclude subset keys.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/filter_on_marginal_of_spanning_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter a Data Frame Based on Marginal Criteria — filter_on_marginal_of_spanning_var","text":"","code":"if (FALSE) { # \\dontrun{ df <- data.frame(   col1 = c(\"A\", \"B\", \"TOTAL\"),   col2 = c(\"X\", \"TOTAL\", \"Y\"),   col3 = c(\"Z\", \"Z\", \"Z\") ) criteria <- list(col1 = \"TOTAL\", col2 = \"TOTAL\", col3 = \"TOTAL\") filter_on_marginal_of_spanning_var(df, criteria, subset_keys = c(\"col1\", \"col2\")) # Filters the data frame based on the criteria and subset_keys. } # }"},{"path":[]},{"path":"https://inseefrlab.github.io/rtauargus/reference/format_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determines the tables described in a template gathering all the published cells — format_template","text":"","code":"format_template(data, indicator_column, spanning_var_tot, field_columns)"},{"path":"https://inseefrlab.github.io/rtauargus/reference/format_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determines the tables described in a template gathering all the published cells — format_template","text":"data template gathering published cells indicator_column name column indicators spanning_var_tot named list spanning variables totals field_columns vecotr columns fields (ex: year collect)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/format_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determines the tables described in a template gathering all the published cells — format_template","text":"named list dataframe describing tables (metadata) list modalities hierarchical variable (modalities)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/format_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determines the tables described in a template gathering all the published cells — format_template","text":"","code":"data(enterprise_template)  template_formatted <- format_template(   data = enterprise_template,   indicator_column = \"INDICATOR\",   spanning_var_tot = list(     ACTIVITY = \"BTSXO_S94\",     NUMBER_EMPL = \"_T\",     LEGAL_FORM = \"_T\"),   field_columns = c(\"TIME_PERIOD\") ) View(template_formatted$metadata) #> Error in check_for_XQuartz(file.path(R.home(\"modules\"), \"R_de.so\")): X11 library is missing: install XQuartz from www.xquartz.org"},{"path":"https://inseefrlab.github.io/rtauargus/reference/from_4_to_3.html","id":null,"dir":"Reference","previous_headings":"","what":"Function reducing from 4 to 3 categorical variables — from_4_to_3","title":"Function reducing from 4 to 3 categorical variables — from_4_to_3","text":"Function reducing 4 3 categorical variables","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/from_4_to_3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function reducing from 4 to 3 categorical variables — from_4_to_3","text":"","code":"from_4_to_3(   dfs,   dfs_name,   totcode,   hrcfiles = NULL,   sep_dir = FALSE,   hrc_dir = \"hrc_alt\",   v1 = NULL,   v2 = NULL,   sep = \"_\",   maximize_nb_tabs = FALSE )"},{"path":"https://inseefrlab.github.io/rtauargus/reference/from_4_to_3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function reducing from 4 to 3 categorical variables — from_4_to_3","text":"dfs data.frame 4 categorical variables (n >= 2 general case) dfs_name name dataframe totcode named vector totals categorical variables hrcfiles named vector indicating hrc files hierarchical variables among categorical variables dfs sep_dir allows forcing writing hrc separate folder, default FALSE hrc_dir folder write hrc files writing new folder forced folder specified hrcfiles v1 allows forcing value first variable merge, specified default (NULL) v2 allows forcing value second variable merge, specified default (NULL) sep separator used concatenation variables maximize_nb_tabs specifies whether prefer selecting hierarchical variables nodes priority (TRUE), generating tables smaller sizes, non-hierarchical variables fewest modalities (FALSE) create fewer tables","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/from_4_to_3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function reducing from 4 to 3 categorical variables — from_4_to_3","text":"list containing following components: tabs: named list 3-dimensional dataframes (n-1 dimensions general case) nested hierarchies hrc: named list hrc specific variable created merging alt_tot: named list totals vars: named list vectors representing merged variables two stages dimension reduction","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/from_4_to_3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function reducing from 4 to 3 categorical variables — from_4_to_3","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union data <- expand.grid(   ACT = c(\"Total\", \"A\", \"B\", \"A1\", \"A2\", \"B1\", \"B2\"),   GEO = c(\"Total\", \"G1\", \"G2\"),   SEX = c(\"Total\", \"F\", \"M\"),   AGE = c(\"Total\", \"AGE1\", \"AGE2\"),   stringsAsFactors = FALSE ) %>%   as.data.frame()  data <- data %>% mutate(VALUE = 1)  hrc_act <- \"hrc_ACT.hrc\"  sdcHierarchies::hier_create(root = \"Total\", nodes = c(\"A\",\"B\")) %>%   sdcHierarchies::hier_add(root = \"A\", nodes = c(\"A1\",\"A2\")) %>%   sdcHierarchies::hier_add(root = \"B\", nodes = c(\"B1\",\"B2\")) %>%   sdcHierarchies::hier_convert(as = \"argus\") %>%   slice(-1) %>%   mutate(levels = substring(paste0(level,name),3)) %>%   select(levels) %>%   write.table(file = hrc_act, row.names = FALSE, col.names = FALSE, quote = FALSE)  # Results of the function res1 <- from_4_to_3(   dfs = data,   dfs_name = \"tab\",   totcode = c(SEX = \"Total\", AGE = \"Total\", GEO = \"Total\", ACT = \"Total\"),   hrcfiles = c(ACT = hrc_act),   sep_dir = TRUE,   hrc_dir = \"output\" )  # Maximize the number of tables res2 <- from_4_to_3(   dfs = data,   dfs_name = \"tab\",   totcode = c(SEX = \"Total\", AGE = \"Total\", GEO = \"Total\", ACT = \"Total\"),   hrcfiles = c(ACT = hrc_act),   sep_dir = TRUE,   hrc_dir = \"output\",   maximize_nb_tabs = TRUE )"},{"path":"https://inseefrlab.github.io/rtauargus/reference/from_4_to_3_case_0_hr.html","id":null,"dir":"Reference","previous_headings":"","what":"Transition from 4 to 3 variables by merging two non-hierarchical variables — from_4_to_3_case_0_hr","title":"Transition from 4 to 3 variables by merging two non-hierarchical variables — from_4_to_3_case_0_hr","text":"Transition 4 3 variables merging two non-hierarchical variables","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/from_4_to_3_case_0_hr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transition from 4 to 3 variables by merging two non-hierarchical variables — from_4_to_3_case_0_hr","text":"","code":"from_4_to_3_case_0_hr(dfs, dfs_name, v1, v2, totcode, dir_name, sep = \"_\")"},{"path":"https://inseefrlab.github.io/rtauargus/reference/from_4_to_3_case_0_hr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transition from 4 to 3 variables by merging two non-hierarchical variables — from_4_to_3_case_0_hr","text":"dfs data.frame 4 categorical variables (n >= 2 general case) dfs_name name data.frame list provided user v1 non-hierarchical categorical variable v2 non-hierarchical categorical variable totcode named vector totals categorical variables dir_name folder write hrc files folder specified hrcfiles sep separator used concatenating variables","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/from_4_to_3_case_0_hr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transition from 4 to 3 variables by merging two non-hierarchical variables — from_4_to_3_case_0_hr","text":"list containing: tabs: named list 3-dimensional dataframes (n-1 dimensions general case) nested hierarchies hrc: named list hrc specific variable created via merging alt_tot: named list totals vars: named list vectors representing merged variables two steps dimension reduction","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/from_4_to_3_case_0_hr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transition from 4 to 3 variables by merging two non-hierarchical variables — from_4_to_3_case_0_hr","text":"","code":"library(dplyr) data <- expand.grid(   ACT = c(\"Total\", \"A\", \"B\", \"A1\", \"A2\", \"B1\", \"B2\"),   SEX = c(\"Total\", \"F\", \"M\",\"F1\",\"F2\",\"M1\",\"M2\"),   AGE = c(\"Total\", \"AGE1\", \"AGE2\", \"AGE11\", \"AGE12\", \"AGE21\", \"AGE22\"),   ECO = c(\"PIB\",\"Households\",\"Companies\"),   stringsAsFactors = FALSE,   KEEP.OUT.ATTRS = FALSE ) %>%   as.data.frame()  data <- data %>% mutate(VALUE = 1:n())  hrc_act <- \"hrc_ACT.hrc\" sdcHierarchies::hier_create(root = \"Total\", nodes = c(\"A\",\"B\")) %>%   sdcHierarchies::hier_add(root = \"A\", nodes = c(\"A1\",\"A2\")) %>%   sdcHierarchies::hier_convert(as = \"argus\") %>%   slice(-1) %>%   mutate(levels = substring(paste0(level,name),3)) %>%   select(levels) %>%   write.table(file = hrc_act, row.names = FALSE, col.names = FALSE, quote = FALSE)  hrc_sex <- \"hrc_SEX.hrc\" sdcHierarchies::hier_create(root = \"Total\", nodes = c(\"F\",\"M\")) %>%   sdcHierarchies::hier_add(root = \"F\", nodes = c(\"F1\",\"F2\")) %>%   sdcHierarchies::hier_add(root = \"M\", nodes = c(\"M1\",\"M2\")) %>%   sdcHierarchies::hier_convert(as = \"argus\") %>%   slice(-1) %>%   mutate(levels = substring(paste0(level,name),3)) %>%   select(levels) %>%   write.table(file = hrc_sex, row.names = FALSE, col.names = FALSE, quote = FALSE)  res1 <- from_4_to_3_case_0_hr(dfs = data,                                 dfs_name = \"dfs_name\",                                 v1 = \"ECO\",v2 = \"AGE\",                                 totcode = c(ACT = \"Total\",SEX = \"Total\",                                             AGE = \"Total\",ECO = \"PIB\"),                                 dir_name = \"output\")"},{"path":"https://inseefrlab.github.io/rtauargus/reference/from_4_to_3_case_1_hr.html","id":null,"dir":"Reference","previous_headings":"","what":"Transition from 4 to 3 variables by merging a hierarchical and a non-hierarchical variable — from_4_to_3_case_1_hr","title":"Transition from 4 to 3 variables by merging a hierarchical and a non-hierarchical variable — from_4_to_3_case_1_hr","text":"Transition 4 3 variables merging hierarchical non-hierarchical variable","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/from_4_to_3_case_1_hr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transition from 4 to 3 variables by merging a hierarchical and a non-hierarchical variable — from_4_to_3_case_1_hr","text":"","code":"from_4_to_3_case_1_hr(   dfs,   dfs_name,   v1,   v2,   totcode,   hrcfiles,   dir_name,   sep = \"_\" )"},{"path":"https://inseefrlab.github.io/rtauargus/reference/from_4_to_3_case_1_hr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transition from 4 to 3 variables by merging a hierarchical and a non-hierarchical variable — from_4_to_3_case_1_hr","text":"dfs data.frame 4 categorical variables (n >= 2 general case) dfs_name name data.frame list provided user v1 non-hierarchical categorical variable v2 hierarchical categorical variable totcode named vector totals categorical variables hrcfiles named vector indicating hrc files hierarchical variables among categorical variables dfs dir_name directory write hrc files folder specified hrcfiles sep separator used concatenating variables","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/from_4_to_3_case_1_hr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transition from 4 to 3 variables by merging a hierarchical and a non-hierarchical variable — from_4_to_3_case_1_hr","text":"list containing: tabs: named list 3-dimensional dataframes (n-1 dimensions general case) nested hierarchies hrc: named list hrc specific variable created fusion alt_tot: named list totals vars: named list vectors representing merged variables two stages dimension reduction","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/from_4_to_3_case_1_hr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transition from 4 to 3 variables by merging a hierarchical and a non-hierarchical variable — from_4_to_3_case_1_hr","text":"","code":"library(dplyr) data <- expand.grid(   ACT = c(\"Total\", \"A\", \"B\", \"A1\", \"A2\", \"B1\", \"B2\"),   SEX = c(\"Total\", \"F\", \"M\",\"F1\",\"F2\",\"M1\",\"M2\"),   AGE = c(\"Total\", \"AGE1\", \"AGE2\", \"AGE11\", \"AGE12\", \"AGE21\", \"AGE22\"),   ECO = c(\"PIB\",\"Ménages\",\"Entreprises\"),   stringsAsFactors = FALSE,   KEEP.OUT.ATTRS = FALSE ) %>%   as.data.frame()  data <- data %>% mutate(VALUE = 1:n())  hrc_act <- \"hrc_ACT.hrc\" sdcHierarchies::hier_create(root = \"Total\", nodes = c(\"A\",\"B\")) %>%   sdcHierarchies::hier_add(root = \"A\", nodes = c(\"A1\",\"A2\")) %>%   sdcHierarchies::hier_convert(as = \"argus\") %>%   slice(-1) %>%   mutate(levels = substring(paste0(level,name),3)) %>%   select(levels) %>%   write.table(file = hrc_act, row.names = FALSE, col.names = FALSE, quote = FALSE)  hrc_sex <- \"hrc_SEX.hrc\" sdcHierarchies::hier_create(root = \"Total\", nodes = c(\"F\",\"M\")) %>%   sdcHierarchies::hier_add(root = \"F\", nodes = c(\"F1\",\"F2\")) %>%   sdcHierarchies::hier_add(root = \"M\", nodes = c(\"M1\",\"M2\")) %>%   sdcHierarchies::hier_convert(as = \"argus\") %>%   slice(-1) %>%   mutate(levels = substring(paste0(level,name),3)) %>%   select(levels) %>%   write.table(file = hrc_sex, row.names = FALSE, col.names = FALSE, quote = FALSE)  res1 <- from_4_to_3_case_1_hr(dfs = data,                                 dfs_name = \"dfs_name\",                                 v1 = \"ECO\",v2 = \"SEX\",                                 totcode = c(ACT = \"Total\",SEX = \"Total\",                                             AGE = \"Total\",ECO = \"PIB\"),                                 hrcfiles = c(ACT = hrc_act, SEX = hrc_sex),                                 dir_name = \"output\")"},{"path":"https://inseefrlab.github.io/rtauargus/reference/from_4_to_3_case_2_hr.html","id":null,"dir":"Reference","previous_headings":"","what":"Transition from 4 to 3 variables via the merging of two hierarchical variables — from_4_to_3_case_2_hr","title":"Transition from 4 to 3 variables via the merging of two hierarchical variables — from_4_to_3_case_2_hr","text":"Transition 4 3 variables via merging two hierarchical variables","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/from_4_to_3_case_2_hr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transition from 4 to 3 variables via the merging of two hierarchical variables — from_4_to_3_case_2_hr","text":"","code":"from_4_to_3_case_2_hr(   dfs,   dfs_name,   v1,   v2,   totcode,   hrcfiles,   dir_name,   sep = \"_\" )"},{"path":"https://inseefrlab.github.io/rtauargus/reference/from_4_to_3_case_2_hr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transition from 4 to 3 variables via the merging of two hierarchical variables — from_4_to_3_case_2_hr","text":"dfs data.frame 4 categorical variables (n >= 2 general case) dfs_name name data.frame list provided user v1 hierarchical categorical variable v2 hierarchical categorical variable totcode named vector totals categorical variables hrcfiles named vector indicating hrc files hierarchical variables among categorical variables dfs dir_name folder write hrc files folder specified hrcfiles sep separator used concatenation variables","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/from_4_to_3_case_2_hr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transition from 4 to 3 variables via the merging of two hierarchical variables — from_4_to_3_case_2_hr","text":"list containing following components: tabs: named list 3-dimensional dataframes (n-1 dimensions general case) nested hierarchies hrcs: named list hrc specific variable created via merge alt_tot: named list totals vars: named list vectors representing merged variables two stages dimension reduction","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/from_4_to_3_case_2_hr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transition from 4 to 3 variables via the merging of two hierarchical variables — from_4_to_3_case_2_hr","text":"","code":"library(dplyr) data <- expand.grid(   ACT = c(\"Total\", \"A\", \"B\", \"A1\", \"A2\", \"B1\", \"B2\"),   SEX = c(\"Total\", \"F\", \"M\",\"F1\",\"F2\",\"M1\",\"M2\"),   AGE = c(\"Total\", \"AGE1\", \"AGE2\", \"AGE11\", \"AGE12\", \"AGE21\", \"AGE22\"),   ECO = c(\"PIB\",\"Ménages\",\"Entreprises\"),   stringsAsFactors = FALSE,   KEEP.OUT.ATTRS = FALSE ) %>%   as.data.frame()  data <- data %>% mutate(VALUE = 1:n())  hrc_act <- \"hrc_ACT.hrc\" sdcHierarchies::hier_create(root = \"Total\", nodes = c(\"A\",\"B\")) %>%   sdcHierarchies::hier_add(root = \"A\", nodes = c(\"A1\",\"A2\")) %>%   sdcHierarchies::hier_convert(as = \"argus\") %>%   slice(-1) %>%   mutate(levels = substring(paste0(level,name),3)) %>%   select(levels) %>%   write.table(file = hrc_act, row.names = FALSE, col.names = FALSE, quote = FALSE)  hrc_sex <- \"hrc_SEX.hrc\" sdcHierarchies::hier_create(root = \"Total\", nodes = c(\"F\",\"M\")) %>%   sdcHierarchies::hier_add(root = \"F\", nodes = c(\"F1\",\"F2\")) %>%   sdcHierarchies::hier_add(root = \"M\", nodes = c(\"M1\",\"M2\")) %>%   sdcHierarchies::hier_convert(as = \"argus\") %>%   slice(-1) %>%   mutate(levels = substring(paste0(level,name),3)) %>%   select(levels) %>%   write.table(file = hrc_sex, row.names = FALSE, col.names = FALSE, quote = FALSE)  res <- from_4_to_3_case_2_hr(dfs = data,                                 dfs_name = \"dfs_name\",                                 v1 = \"ACT\",v2 = \"SEX\",                                 totcode = c(ACT = \"Total\",SEX = \"Total\",                                             AGE = \"Total\",ECO = \"PIB\"),                                 hrcfiles = c(ACT = hrc_act, SEX = hrc_sex),                                 dir_name = \"output\")"},{"path":"https://inseefrlab.github.io/rtauargus/reference/from_5_to_3.html","id":null,"dir":"Reference","previous_headings":"","what":"Function reducing from 5 to 3 categorical variables — from_5_to_3","title":"Function reducing from 5 to 3 categorical variables — from_5_to_3","text":"Function reducing 5 3 categorical variables","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/from_5_to_3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function reducing from 5 to 3 categorical variables — from_5_to_3","text":"","code":"from_5_to_3(   dfs,   dfs_name,   totcode,   hrcfiles = NULL,   sep_dir = FALSE,   hrc_dir = \"hrc_alt\",   v1 = NULL,   v2 = NULL,   v3 = NULL,   v4 = NULL,   sep = \"_\",   maximize_nb_tabs = FALSE,   verbose = FALSE )"},{"path":"https://inseefrlab.github.io/rtauargus/reference/from_5_to_3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function reducing from 5 to 3 categorical variables — from_5_to_3","text":"dfs data.frame 5 categorical variables (n >= 3 general case) dfs_name name data.frame list provided user totcode named vector totals categorical variables hrcfiles named vector indicating hrc files hierarchical variables among categorical variables dfs sep_dir allows forcing writing hrc files separate folder defaulted FALSE hrc_dir folder write hrc files forcing writing new folder folder specified hrcfiles v1 allows forcing value first variable merge reducing 5 4 dimensions, specified default (NULL) v2 allows forcing value second variable merge reducing 5 4 dimensions, specified default (NULL) v3 allows forcing value first variable merge reducing 4 3 dimensions, specified default (NULL) v4 allows forcing value second variable merge reducing 4 3 dimensions, specified default (NULL) sep separator used concatenation variables maximize_nb_tabs specifies whether prefer selecting hierarchical variables nodes priority (TRUE), generates tables smaller size, non-hierarchical variables least modality (FALSE) create fewer tables verbose prints different steps function notify user progress, mainly general function gen_tabs_5_4_to_3()","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/from_5_to_3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function reducing from 5 to 3 categorical variables — from_5_to_3","text":"list containing following components: tabs: named list dataframes 3 dimensions (n-2 dimensions general case) endowed nested hierarchies hrcs5_4: named list hrc specific variable created via merge reducing 5 4 dimensions hrcs4_3: named list hrc specific variable created via merge reducing 4 3 dimensions alt_tot5_4: named list totals reducing 5 4 dimensions alt_tot4_3: named list totals reducing 4 3 dimensions vars: named list vectors representing merged variables two steps dimension reduction","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/from_5_to_3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function reducing from 5 to 3 categorical variables — from_5_to_3","text":"","code":"library(dplyr) data <- expand.grid(   ACT = c(\"Total\", \"A\", \"B\", \"A1\", \"A2\", \"B1\", \"B2\"),   GEO = c(\"Total\", \"GA\", \"GB\", \"GA1\", \"GA2\", \"GB1\", \"GB2\"),   SEX = c(\"Total\", \"F\", \"M\",\"F1\",\"F2\",\"M1\",\"M2\"),   AGE = c(\"Total\", \"AGE1\", \"AGE2\", \"AGE11\", \"AGE12\", \"AGE21\", \"AGE22\"),   ECO = c(\"PIB\",\"Ménages\",\"Entreprises\"),   stringsAsFactors = FALSE,   KEEP.OUT.ATTRS = FALSE ) %>%   as.data.frame()  data <- data %>% mutate(VALUE = 1:n())  hrc_act <- \"hrc_ACT.hrc\" sdcHierarchies::hier_create(root = \"Total\", nodes = c(\"A\",\"B\")) %>%   sdcHierarchies::hier_add(root = \"A\", nodes = c(\"A1\",\"A2\")) %>%   sdcHierarchies::hier_convert(as = \"argus\") %>%   slice(-1) %>%   mutate(levels = substring(paste0(level,name),3)) %>%   select(levels) %>%   write.table(file = hrc_act, row.names = FALSE, col.names = FALSE, quote = FALSE)  hrc_geo <- \"hrc_GEO.hrc\" sdcHierarchies::hier_create(root = \"Total\", nodes = c(\"GA\",\"GB\")) %>%   sdcHierarchies::hier_add(root = \"GA\", nodes = c(\"GA1\",\"GA2\")) %>%   sdcHierarchies::hier_add(root = \"GB\", nodes = c(\"GB1\",\"GB2\")) %>%   sdcHierarchies::hier_convert(as = \"argus\") %>%   slice(-1) %>%   mutate(levels = substring(paste0(level,name),3)) %>%   select(levels) %>%   write.table(file = hrc_geo, row.names = FALSE, col.names = FALSE, quote = FALSE)  hrc_sex <- \"hrc_SEX.hrc\" sdcHierarchies::hier_create(root = \"Total\", nodes = c(\"F\",\"M\")) %>%   sdcHierarchies::hier_add(root = \"F\", nodes = c(\"F1\",\"F2\")) %>%   sdcHierarchies::hier_add(root = \"M\", nodes = c(\"M1\",\"M2\")) %>%   sdcHierarchies::hier_convert(as = \"argus\") %>%   slice(-1) %>%   mutate(levels = substring(paste0(level,name),3)) %>%   select(levels) %>%   write.table(file = hrc_sex, row.names = FALSE, col.names = FALSE, quote = FALSE)  # Results of the function res1 <- from_5_to_3(   dfs = data,   dfs_name = \"tab\",   totcode = c(SEX=\"Total\",AGE=\"Total\", GEO=\"Total\", ACT=\"Total\", ECO = \"PIB\"),   hrcfiles = c(ACT = hrc_act, GEO = hrc_geo, SEX = hrc_sex),   sep_dir = TRUE,   hrc_dir = \"output\",   v1 = \"ACT\",   v2 = \"AGE\",   v3 = \"SEX\",   v4 = \"ECO\" )  res2 <- from_5_to_3(   dfs = data,   dfs_name = \"tab\",   totcode = c(SEX=\"Total\",AGE=\"Total\", GEO=\"Total\", ACT=\"Total\", ECO = \"PIB\"),   hrcfiles = c(ACT = hrc_act, GEO = hrc_geo, SEX = hrc_sex),   sep_dir = TRUE,   hrc_dir = \"output\",   verbose = TRUE ) #> tab has generated 2 tables in total #> Reducing from 4 to 3..."},{"path":"https://inseefrlab.github.io/rtauargus/reference/get_combinations.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate All Combinations of spanning variables — get_combinations","title":"Generate All Combinations of spanning variables — get_combinations","text":"function generates possible combinations keys given named list vector.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/get_combinations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate All Combinations of spanning variables — get_combinations","text":"","code":"get_combinations(criteria)"},{"path":"https://inseefrlab.github.io/rtauargus/reference/get_combinations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate All Combinations of spanning variables — get_combinations","text":"criteria named list vector, names represent keys.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/get_combinations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate All Combinations of spanning variables — get_combinations","text":"list combinations, combination character vector key names.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/get_combinations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate All Combinations of spanning variables — get_combinations","text":"","code":"if (FALSE) { # \\dontrun{ criteria <- list(key1 = \"value1\", key2 = \"value2\", key3 = \"value3\") get_combinations(criteria) # Returns a list of combinations: c(\"key1\"), c(\"key2\"), c(\"key3\"), c(\"key1\", \"key2\"), ... } # }"},{"path":"https://inseefrlab.github.io/rtauargus/reference/grp_tab_in_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Regroup Tables Inside Clusters Based on Inclusion Relationships — grp_tab_in_cluster","title":"Regroup Tables Inside Clusters Based on Inclusion Relationships — grp_tab_in_cluster","text":"function processes clusters tables regroups tables included within cluster. leverages relationships identified grp_tab_names() uses grouped structure tables list_split.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/grp_tab_in_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regroup Tables Inside Clusters Based on Inclusion Relationships — grp_tab_in_cluster","text":"","code":"grp_tab_in_cluster(list_split, list_translation_tables)"},{"path":"https://inseefrlab.github.io/rtauargus/reference/grp_tab_in_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regroup Tables Inside Clusters Based on Inclusion Relationships — grp_tab_in_cluster","text":"list_split list clusters tables, cluster contains nested data frames. Typically, output split_in_clusters() function. list_translation_tables list results grp_tab_names() containing inclusion relationships mappings table names respective groups.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/grp_tab_in_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regroup Tables Inside Clusters Based on Inclusion Relationships — grp_tab_in_cluster","text":"list tibbles (big_tibble_eg) cluster, tibble contains: table_name: updated table name based grouping. data: Nested data corresponding original table structure. spanning: Columns define structure table. tab_inclus: list original table names included within grouped table.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/grp_tab_in_cluster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Regroup Tables Inside Clusters Based on Inclusion Relationships — grp_tab_in_cluster","text":"resulting tibble contains updated table names (align group mapping) metadata independent table cluster. Additionally, tracks tables included within group.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/grp_tab_in_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regroup Tables Inside Clusters Based on Inclusion Relationships — grp_tab_in_cluster","text":"","code":"if (FALSE) { # \\dontrun{ data(metadata_pizza_lettuce)  # Convert wide metadata to long format metadata_pizza_lettuce_long <- wide_to_long(metadata_pizza_lettuce)  # Identify hierarchical relationships list_hrc_identified <- identify_hrc(metadata_pizza_lettuce_long)  # Split tables into clusters list_split <- split_in_clusters(list_hrc_identified)  # Detect inclusion relationships list_desc_links <- create_edges(list_split)  # Group tables based on inclusion relationships list_translation_tables <- grp_tab_names(list_desc_links)  # Regroup tables within each cluster list_independent_tables <- grp_tab_in_cluster(list_split, list_translation_tables)  # View structure of the results str(list_independent_tables) } # }"},{"path":"https://inseefrlab.github.io/rtauargus/reference/grp_tab_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Group Tables Based on Inclusion Relationships — grp_tab_names","title":"Group Tables Based on Inclusion Relationships — grp_tab_names","text":"function regroups tables included clusters, keeping tables necessary protection. Based inclusion relationships detected create_edges() function, tables aggregated minimize redundancy. output identifies final tables need protected provides mapping original table names respective groups.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/grp_tab_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group Tables Based on Inclusion Relationships — grp_tab_names","text":"","code":"grp_tab_names(list_split)"},{"path":"https://inseefrlab.github.io/rtauargus/reference/grp_tab_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group Tables Based on Inclusion Relationships — grp_tab_names","text":"list_split list data frames, data frame describes inclusion relationships () tables cluster. Typically, output create_edges() function.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/grp_tab_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group Tables Based on Inclusion Relationships — grp_tab_names","text":"list results cluster, result list containing: tab_finales: data frame describing final relationships grouped tables. includes tables necessary protection. passage_nom_tab: data frame mapping original table names (Original) respective groups (Group).","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/grp_tab_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group Tables Based on Inclusion Relationships — grp_tab_names","text":"","code":"if (FALSE) { # \\dontrun{ # Example data data(metadata_pizza_lettuce)  # Convert wide metadata to long format metadata_pizza_lettuce_long <- wide_to_long(metadata_pizza_lettuce)  # Identify hierarchical relationships list_hrc_identified <- identify_hrc(metadata_pizza_lettuce_long)  # Split tables into clusters list_split <- split_in_clusters(list_hrc_identified)  # Detect inclusion relationships list_desc_links <- create_edges(list_split)  # Group tables based on inclusion relationships list_translation_tables <- grp_tab_names(list_desc_links)  # View structure of the results str(list_translation_tables) } # }"},{"path":"https://inseefrlab.github.io/rtauargus/reference/identify_hrc.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename Variables Based on Their Hierarchies — identify_hrc","title":"Rename Variables Based on Their Hierarchies — identify_hrc","text":"function renames variables long-format metadata data frame based hierarchical groupings. Spanning variables renamed using name hierarchy uppercase, response variables linked equation (specified hrc_indicator column) grouped together, new grouping variable created.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/identify_hrc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename Variables Based on Their Hierarchies — identify_hrc","text":"","code":"identify_hrc(df_metadata_long)"},{"path":"https://inseefrlab.github.io/rtauargus/reference/identify_hrc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename Variables Based on Their Hierarchies — identify_hrc","text":"df_metadata_long data frame long format following required columns: table_name: Identifies table. field : name field table. indicator: name indicator table. hrc_indicator: Specifies linked response variables. spanning_*, hrc_spanning_*: Spanning variables hierarchies.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/identify_hrc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename Variables Based on Their Hierarchies — identify_hrc","text":"list_hrc_identified, list two elements: df_indicators: updated data frame renamed variables grouped response variables. df_variable_info: data frame mapping original variable names (spanning_old) renamed counterparts (spanning).","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/identify_hrc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename Variables Based on Their Hierarchies — identify_hrc","text":"","code":"if (FALSE) { # \\dontrun{ data(metadata_pizza_lettuce)  metadata_pizza_lettuce_long <- wide_to_long(metadata_pizza_lettuce)  list_hrc_identified <- identify_hrc(metadata_pizza_lettuce_long)  str(list_hrc_identified) } # }"},{"path":"https://inseefrlab.github.io/rtauargus/reference/import.html","id":null,"dir":"Reference","previous_headings":"","what":"Imports results from Tau-Argus — import","title":"Imports results from Tau-Argus — import","text":"Imports R results generated Tau-Argus information contained arb file.  (Importe dans R les résultats générés par Tau-Argus à partir des informations contenues dans un fichier arb.)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/import.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Imports results from Tau-Argus — import","text":"","code":"import(arb_filename)"},{"path":"https://inseefrlab.github.io/rtauargus/reference/import.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Imports results from Tau-Argus — import","text":"arb_filename name arb file (extension) containing information needed import.  (nom du fichier arb (avec extension) contenant les informations nécessaires à l'import.)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/import.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Imports results from Tau-Argus — import","text":"list one data.frames. data.frame corresponds result tabulation. names tables filled lines batch form // <TABLE_ID> \"...\" recovered.  (Une liste d'un ou plusieurs data.frames. Chaque data.frame correspond au résultat d'une tabulation. Les noms des tableaux renseignés dans les lignes du batch de la forme // <TABLE_ID> \"...\" sont récupérés.)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/import.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Imports results from Tau-Argus — import","text":"Requires batch executed finished without error. order import immediately batch executed, function often called via link{run_arb} (setting import = TRUE). possible (moment) import results type \"2\" (csv pivot-table) \"4\" (sbs). possible import given tabulation, empty data.frame returned (message). (Nécessite que le batch ait été exécuté et se soit terminé sans erreur. Afin d'importer immédiatement après exécution du batch, cette fonction sera ainsi le plus souvent appelée via run_arb() (en paramétrant import = TRUE). Il n'est possible (pour l'instant) que d'importer les résultats de type \"2\" (csv pivot-table) et \"4\" (sbs). En cas d'impossibilité de l'import pour une tabulation donnée, un data.frame vide est retourné (avec un message d'avertissement).)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/import.html","id":"attributes","dir":"Reference","previous_headings":"","what":"Attributes","title":"Imports results from Tau-Argus — import","text":"data.frame associated set attributes (metadata) allowing keep trace specifications passed Tau-Argus. Attributes systematically present : explanatory_vars, response_var, safetyrule, suppress, linked, output_type. Attributes present corresponding option filled user: shadow_var, cost_var, output_options. (À chaque data.frame est associé un ensemble d'attributs (métadonnées) permettant de conserver une trace des spécifications passées à Tau-Argus. Attributs systématiquement présents : explanatory_vars, response_var, safetyrule, suppress, linked, output_type. Attributs présents uniquement si l'option correspondante été renseignée par l'utilisateur : shadow_var, cost_var, output_options.)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/import.html","id":"see-also","dir":"Reference","previous_headings":"","what":"See also","title":"Imports results from Tau-Argus — import","text":"function micro_rtauargus(), uses function inherits parameters.  (La fonction micro_rtauargus(), qui utilise cette fonction et hérite de ses paramètres.)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/indiv_dt.html","id":null,"dir":"Reference","previous_headings":"","what":"Companies data at individual level. — indiv_dt","title":"Companies data at individual level. — indiv_dt","text":"Companies data individual level.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/indiv_dt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Companies data at individual level. — indiv_dt","text":"","code":"indiv_dt"},{"path":"https://inseefrlab.github.io/rtauargus/reference/indiv_dt.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Companies data at individual level. — indiv_dt","text":"data.table 9 786 rows 12 variables: A10 business sector, hierarchical A21 business sector, hierarchical nested A10 A88 business sector, hierarchical nested A21 CJ legal category, hierarchical TYPE type distribution, hierarchical SIZE Number employees (categorical), hierarchical NUTS1 NUTS 1 level European administrative regions, hierarchical NUTS2 NUTS 2 level European administrative regions, hierarchical NUTS3 NUTS 3 level European administrative regions, hierarchical WEIGHT Weight companies, numeric TURNOVER Turnover, numeric PRODUCTION Production, numeric","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/length_tabs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation of the table sizes generated a priori during the reduction of dimension from 4 or 5 dimensions to 3 dimensions — length_tabs","title":"Calculation of the table sizes generated a priori during the reduction of dimension from 4 or 5 dimensions to 3 dimensions — length_tabs","text":"Calculation table sizes generated priori reduction dimension 4 5 dimensions 3 dimensions","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/length_tabs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation of the table sizes generated a priori during the reduction of dimension from 4 or 5 dimensions to 3 dimensions — length_tabs","text":"","code":"length_tabs(dfs, v1, v2, v3 = NULL, v4 = NULL, totcode, hrcfiles = NULL)"},{"path":"https://inseefrlab.github.io/rtauargus/reference/length_tabs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation of the table sizes generated a priori during the reduction of dimension from 4 or 5 dimensions to 3 dimensions — length_tabs","text":"dfs data.frame Variable 5->4 4->3 step v1 first merged variable v2 second merged variable Variable case 4->3 passage 4->3 process specify v1_v2 three variables merged one v3 third original variable merged v4 fourth original variable merged totcode character named vector hrcfiles named vector hrc files related variables","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/length_tabs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation of the table sizes generated a priori during the reduction of dimension from 4 or 5 dimensions to 3 dimensions — length_tabs","text":"list lengths tables created dimension reduction","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/length_tabs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculation of the table sizes generated a priori during the reduction of dimension from 4 or 5 dimensions to 3 dimensions — length_tabs","text":"","code":"# Dimension 4 library(dplyr) data <- expand.grid(   ACT = c(\"Total\", \"A\", \"B\", \"A1\", \"A2\",\"A3\", \"B1\", \"B2\",\"B3\",\"B4\",\"C\",           \"name_non_changed_vars\",\"E\",\"F\",\"G\",\"B5\"),   GEO = c(\"Total\", \"G1\", \"G2\"),   SEX = c(\"Total\", \"F\", \"M\"),   AGE = c(\"Total\", \"AGE1\", \"AGE2\"),   stringsAsFactors = FALSE ) %>%   as.data.frame()  data <- data %>% mutate(VALUE = 1)   hrc_act <- \"hrc_ACT.hrc\"  sdcHierarchies::hier_create(   root = \"Total\",   nodes = c(\"A\",\"B\",\"C\",\"name_non_changed_vars\",\"E\",\"F\",\"G\") ) %>%   sdcHierarchies::hier_add(root = \"A\", nodes = c(\"A1\",\"A2\",\"A3\")) %>%   sdcHierarchies::hier_add(root = \"B\", nodes = c(\"B1\",\"B2\",\"B3\",\"B4\",\"B5\")) %>%   sdcHierarchies::hier_convert(as = \"argus\") %>%   slice(-1) %>%   mutate(levels = substring(paste0(level,name),3)) %>%   select(levels) %>%   write.table(file = hrc_act, row.names = FALSE, col.names = FALSE, quote = FALSE)  # Function results  res1 <- length_tabs(dfs = data,                     hrcfiles = c(ACT = hrc_act),                     totcode = c(SEX=\"Total\",AGE=\"Total\", GEO=\"Total\", ACT=\"Total\"),                     v1 = \"ACT\",                     v2 = \"GEO\")  # Dimension 5 data <- expand.grid(   ACT = c(\"Total_A\", paste0(\"A\", seq(1,5),\"_\"),           paste0(\"A1_\", seq(1,7)),paste0(\"A2_\", seq(1,9))),   GEO = c(\"Total_G\", \"GA\", \"GB\", \"GA1\", \"GA2\", \"GB1\", \"GB2\",\"GA3\",\"GB3\",\"GB4\"),   SEX = c(\"Total_S\", \"F\", \"M\",\"F1\",\"F2\",\"M1\",\"M2\"),   AGE = c(\"Ensemble\", \"AGE1\", \"AGE2\", \"AGE11\", \"AGE12\", \"AGE21\", \"AGE22\"),   ECO = c(\"PIB\",\"Ménages\",\"Entreprises\"),   stringsAsFactors = FALSE,   KEEP.OUT.ATTRS = FALSE ) %>%   as.data.frame()  data <- data %>% mutate(VALUE = 1:n())  hrc_act <- \"hrc_ACT.hrc\" sdcHierarchies::hier_create(root = \"Total_A\", nodes = paste0(\"A\", seq(1,5),\"_\")) %>%   sdcHierarchies::hier_add(root = \"A1_\", nodes = paste0(\"A1_\", seq(1,7))) %>%   sdcHierarchies::hier_add(root = \"A2_\", nodes = paste0(\"A2_\", seq(1,9))) %>%   sdcHierarchies::hier_convert(as = \"argus\") %>%   slice(-1) %>%   mutate(levels = substring(paste0(level,name),3)) %>%   select(levels) %>%   write.table(file = hrc_act, row.names = FALSE, col.names = FALSE, quote = FALSE)  hrc_geo <- \"hrc_GEO.hrc\" sdcHierarchies::hier_create(root = \"Total_G\", nodes = c(\"GA\",\"GB\")) %>%   sdcHierarchies::hier_add(root = \"GA\", nodes = c(\"GA1\",\"GA2\",\"GA3\")) %>%   sdcHierarchies::hier_add(root = \"GB\", nodes = c(\"GB1\",\"GB2\",\"GB3\",\"GB4\")) %>%   sdcHierarchies::hier_convert(as = \"argus\") %>%   slice(-1) %>%   mutate(levels = substring(paste0(level,name),3)) %>%   select(levels) %>%   write.table(file = hrc_geo, row.names = FALSE, col.names = FALSE, quote = FALSE)  res2 <- length_tabs(dfs = data,                     hrcfiles = c(ACT = hrc_act, GEO = hrc_geo),                     totcode = c(SEX=\"Total_S\",AGE=\"Ensemble\", GEO=\"Total_G\",                                 ACT=\"Total_A\", ECO = \"PIB\"),                     v1 = \"ACT\",v2 = \"AGE\",                     v3 = \"GEO\",v4 = \"SEX\")  res3 <- length_tabs(dfs = data,                     hrcfiles = c(ACT = hrc_act, GEO = hrc_geo),                     totcode = c(SEX=\"Total_S\",AGE=\"Ensemble\", GEO=\"Total_G\",                                 ACT=\"Total_A\", ECO = \"PIB\"),                     v1 = \"ACT\",v2 = \"AGE\",v3 = \"GEO\")"},{"path":"https://inseefrlab.github.io/rtauargus/reference/metadata_pizza_lettuce.html","id":null,"dir":"Reference","previous_headings":"","what":"Metadata for pizza and lettuce dataset. — metadata_pizza_lettuce","title":"Metadata for pizza and lettuce dataset. — metadata_pizza_lettuce","text":"dataset containing metadata information various tables indicators related enterprises turnover selling pizzas lettuces France.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/metadata_pizza_lettuce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metadata for pizza and lettuce dataset. — metadata_pizza_lettuce","text":"","code":"metadata_pizza_lettuce"},{"path":"https://inseefrlab.github.io/rtauargus/reference/metadata_pizza_lettuce.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Metadata for pizza and lettuce dataset. — metadata_pizza_lettuce","text":"data frame 12 rows 9 variables: table_name Character. Name table (e.g., \"T1\", \"T2\"). field Character. Data source category (e.g., \"france_entreprises_2023\"). hrc_field Logical. Indicates hierarchical classification applied field (NA applicable). indicator Character. indicator measured (e.g., \"to_pizza\"). hrc_indicator Character. Hierarchical classification indicator (NA applicable). spanning_1 Character. First spanning variable (e.g., \"nuts2\", \"nuts3\", \"a10\"). hrc_spanning_1 Character. Hierarchical classification spanning_1 (e.g., \"hrc_nuts\", \"hrc_naf\"). spanning_2 Character. Second spanning variable (e.g., \"size\", \"nuts2\", \"nuts3\"). hrc_spanning_2 Character. Hierarchical classification spanning_2 (NA applicable).","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/micro_arb.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a batch file (.arb) for microdata — micro_arb","title":"Creates a batch file (.arb) for microdata — micro_arb","text":"Development micro_arb() complete, new code recommend switching tabular-wise protection provided tab_rtauargus() tab_multi_manager(), offer lot features protection problems. See details vignette(\"rtauargus\") vignette(\"protect_multi_tables). Creates batch file microdata, executable Tau-Argus command line.  (Crée un fichier batch pour microdonnées, exécutable par Tau-Argus en ligne de commande.) function check asc rda files exist.  (La fonction ne vérifie pas si les fichiers asc et rda existent.)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/micro_arb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a batch file (.arb) for microdata — micro_arb","text":"","code":"micro_arb(   arb_filename = NULL,   asc_filename,   rda_filename = NULL,   explanatory_vars,   response_var = getOption(\"rtauargus.response_var\"),   shadow_var = NULL,   cost_var = NULL,   safety_rules,   weighted = getOption(\"rtauargus.weighted\"),   suppress,   linked = getOption(\"rtauargus.linked\"),   output_names = NULL,   output_type = getOption(\"rtauargus.output_type\"),   output_options = getOption(\"rtauargus.output_options\"),   apriori = NULL,   gointeractive = FALSE )"},{"path":"https://inseefrlab.github.io/rtauargus/reference/micro_arb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a batch file (.arb) for microdata — micro_arb","text":"arb_filename name generated arb file (extension). specified, temporary file.  (nom du fichier arb généré (avec extension). Si non renseigné, un fichier temporaire.) asc_filename name asc file (extension).  ( nom du fichier asc (avec extension).) rda_filename name rda file (extension). filled , asc_filename extension \"rda\" instead \"asc\".  (nom du fichier rda (avec extension). Si non renseigné, asc_filename avec l'extension \"rda\" à la place de \"asc\".) explanatory_vars categorical variables, form list vectors. element list vector variable names forming tab. Example: list(c(\"CJ\", \"A21\"), c(\"SEX\", \"REGION\")) first table crossing CJ x A21 second table crossing SEXE x REGION. single tabulation, simple vector variables crossed accepted (need list(...)).  ( variables catégorielles, sous forme de liste de vecteurs. Chaque élément de la liste est un vecteur des noms des variables formant une tabulation. Exemple: list(c(\"CJ\", \"A21\"), c(\"SEX\", \"REGION\")) pour la première table croisant CJ x A21 et la seconde croisant SEXE x REGION Si une seule tabulation, un simple vecteur des variables à croiser est accepté (pas besoin de list(...)).) response_var response variable summed, counted \"<freq>\". single value many values tabs.  (variable de réponse à sommer, ou comptage si \"<freq>\". Une seule valeur ou autant de valeurs que de tabulations.) shadow_var variable(s) applying primary secret. filled , response_var used Tau-Argus.  (variable(s) pour l'application du secret primaire. Si non renseigné, response_var sera utilisé par Tau-Argus.) cost_var cost variable(s) secondary secret.  (variable(s) de coût pour le secret secondaire.) safety_rules primary secret rule(s). String Tau-Argus batch syntax. weighting treated separate parameter (specify WGT , use weighted).  ( règle(s) de secret primaire. Chaîne de caractères en syntaxe batch Tau-Argus. La pondération est traitée dans un paramètre à part (ne pas spécifier WGT ici, utiliser le paramètre weighted).) weighted indicator(s) (boolean).  (indicatrice(s) de pondération (booléen).) suppress secret management method(s) secondary (Tau-Argus batch syntax). method tabulation, first parameter (table number) ignored renumbered automatically (see section 'Syntax').  ( méthode(s) de gestion du secret secondaire (syntaxe batch de Tau-Argus). Si la méthode est la même pour chaque tabulation, le premier paramètre (numéro du tableau) sera ignoré et renuméroté automatiquement (voir la section 'Syntax').) linked process secondary secret jointly tabs. one delete command allowed case (applied tables).  (pour traiter le secret secondaire conjointement sur toutes les tabulations. Une seule commande suppress autorisée dans ce cas (appliquée à tous les tableaux).) output_names names output files. filled , number file names must number tabs. left empty, many temporary file names tabs generated.  (noms des fichiers en sortie. Si renseigné, obligatoirement autant de noms de fichiers que de tabulations. Si laissé vide, autant de noms de fichiers temporaires que de tabulations seront générés.) output_type format output files (Tau-Argus codification). Default value package: \"2\" (csv pivot-table).  (format des fichiers en sortie (codification Tau-Argus). Valeur par défaut du package : \"2\" (csv pivot-table).) output_options additional options output files. default value package: \"+\" (status display). specify option, \"\".  (options supplémentaires des fichiers en sortie. Valeur par défaut du package : \"+\" (affichage du statut). Pour ne spécifier aucune option, \"\".) apriori information file(s) priori. See syntax.  (fichier(s) d'informations priori. Voir ci-dessous pour la syntaxe.) gointeractive possibility launch batch menu Tau-Argus.  (pour avoir la possibilité de lancer le batch depuis le menu de Tau-Argus (FALSE par défaut).)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/micro_arb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a batch file (.arb) for microdata — micro_arb","text":"list two elements: arb filename names output files (useful get back randomly generated names)  (Une liste de deux éléments : le nom du fichier arb, les noms des fichiers en sortie (utile pour récupérer les noms générés aléatoirement).)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/micro_arb.html","id":"syntax","dir":"Reference","previous_headings":"","what":"Syntax","title":"Creates a batch file (.arb) for microdata — micro_arb","text":"Tau-Argus can handle multiple tabs set microdata. Passing single value option apply processing tab. differentiated options, passing vector containing many values tabs. lengths match (recommended), recycling performed. Unless otherwise stated, use syntax mentioned documentation Tau-Argus. Special syntax suppress : first parameter Tau-Argus syntax tab number. method identical tabs, first parameter ignored numbers automatically recalculated batch. writing suppress = \"GH(n,100)\", n thus transformed 1 first tab, 2 second tab, etc. (Tau-Argus peut traiter plusieurs tabulations pour un même jeu de microdonnées. Passer une seule valeur pour une option appliquera le même traitement à chaque tabulation. Pour des options différenciées, passer un vecteur contenant autant de valeurs que de tabulations. Si les longueurs ne correspondent pas (déconseillé), un recyclage est effectué. Sauf mention contraire, utiliser la syntaxe mentionnée dans la documentation de Tau-Argus. Syntaxe spéciale pour suppress : le premier paramètre dans la syntaxe Tau-Argus est le numéro de la tabulation. Si la méthode est identique pour toutes les tabulations, ce premier paramètre sera ignoré et les numéros recalculés automatiquement pour le batch. Dans l'écriture suppress = \"GH(n,100)\", n sera ainsi transformé en 1 pour la première tabulation, en 2 pour la deuxième tabulation, etc.)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/micro_arb.html","id":"table-identifiers","dir":"Reference","previous_headings":"","what":"Table identifiers","title":"Creates a batch file (.arb) for microdata — micro_arb","text":"list explanatory_vars names, used batch give identifier table, form comment line (// <TABLE_ID> \"...\"). reused import function name R format arrays tables output. (Si la liste explanatory_vars comporte des noms, ceux-ci seront utilisés dans le batch pour donner un identifiant au tableau, sous la forme d'une ligne de commentaire (// <TABLE_ID> \"...\"). Ils seront réutilisés par la fonction import pour nommer les tableaux formats R en sortie.)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/micro_arb.html","id":"use-an-apriori-file","dir":"Reference","previous_headings":"","what":"Use an apriori file","title":"Creates a batch file (.arb) for microdata — micro_arb","text":"possible provide apriori file (.hst) tabulation. easiest way pass vector containing many hst files tabs. file tabs, specify name file (used tabs). additional options optional. change default values, pass list hst file(s) first item complete elements names sep separator, ignore_err IgnoreError exp_triv ExpandTrivial. filenames, specify one value per parameter many values tabs. (Il est possible de fournir un fichier apriori (.hst) pour chaque tabulation. La manière la plus simple est de passer un vecteur contenant autant de noms de fichiers hst que de tabulations. Si le fichier est le même pour toutes les tabulations, spécifier le nom de ce fichier (il sera utilisé pour toutes les tabulations). Les options supplémentaires sont facultatives. Pour modifier les valeurs par défaut, passer une liste ayant comme premier élément le(s) fichier(s) hst et compléter avec les éléments portant les noms sep pour le séparateur, ignore_err pour IgnoreError et exp_triv pour ExpandTrivial. Comme pour les noms de fichiers, spécifier une seule valeur par paramètre ou autant de valeurs que de tabulations.)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/micro_arb.html","id":"see-also","dir":"Reference","previous_headings":"","what":"See also","title":"Creates a batch file (.arb) for microdata — micro_arb","text":"function micro_rtauargus(), uses function inherits parameters.  (La fonction micro_rtauargus(), qui utilise cette fonction et hérite de ses paramètres.)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/micro_arb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a batch file (.arb) for microdata — micro_arb","text":"","code":"# creation of the .arb file infos_arb <- micro_arb(   asc_filename = \"donnees.asc\",   explanatory_vars = list(c(\"REGION\", \"CJ\"), c(\"REGION\")),   response_var = c(\"CA\", \"<freq>\"),   safety_rules = c(\"NK(1,85)|FREQ(3,10)\", \"FREQ(3,10)\"),   suppress = \"GH(.,100)\",   output_names = c(\"tab1.csv\", \"~/tab2.csv\"),   output_options = c(\"AS+SE+\", \"SE+\"),   output_type = \"2\" )  # Content of the created file visible in the R console # (Visualisation du contenu du fichier dans la console) file.show(infos_arb$arb_filename, pager = \"console\")"},{"path":"https://inseefrlab.github.io/rtauargus/reference/micro_asc_rda.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates asc and rda files from microdata — micro_asc_rda","title":"Creates asc and rda files from microdata — micro_asc_rda","text":"Development micro_asc_rda() complete, new code recommend switching tabular-wise protection provided tab_rtauargus() tab_multi_manager(), offer lot features protection problems. See details vignette(\"rtauargus\") vignette(\"protect_multi_tables). Creates fixed length text file (asc) metadata file (rda) microdata additional information.  (Crée un fichier texte de longueur fixe (asc) et un fichier de métadonnées (rda) à partir de microdonnées et d'informations additionnelles.)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/micro_asc_rda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates asc and rda files from microdata — micro_asc_rda","text":"","code":"micro_asc_rda(   microdata,   asc_filename = NULL,   rda_filename = NULL,   weight_var = NULL,   holding_var = NULL,   decimals = getOption(\"rtauargus.decimals\"),   hrc = NULL,   hierleadstring = getOption(\"rtauargus.hierleadstring\"),   totcode = getOption(\"rtauargus.totcode\"),   missing = getOption(\"rtauargus.missing\"),   codelist = NULL,   request = NULL )"},{"path":"https://inseefrlab.github.io/rtauargus/reference/micro_asc_rda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates asc and rda files from microdata — micro_asc_rda","text":"microdata data.frame containing microdata.  ( data.frame contenant les microdonnées.) asc_filename name asc file (extension). filled , temporary file.  (nom du fichier asc (avec extension). Si non renseigné, un fichier temporaire.) rda_filename name rda file (extension). filled , asc_filename extension \"rda\" instead \"asc\".  (nom du fichier rda (avec extension). Si non renseigné, asc_filename avec l'extension \"rda\" à la place de \"asc\".) weight_var name weight variable.  (nom de la variable de poids.) holding_var nom de la variable de holding. (name holding variable.) decimals minimum number decimals display (see section 'Number decimals'). (nombre minimal de décimales à afficher (voir section 'Number decimals').) hrc information hierarchical variables (see section section 'Hierarchical variables').  (informations sur les variables hiérarchiques (voir section 'Hierarchical variables').) hierleadstring character , repeated n times, indicates value n levels deep hierarchy.  (caractère qui, répété n fois, indique que la valeur est à n niveaux de profondeur dans la hiérarchie.) totcode code(s) total categorical variable (see section 'Specific parameters' syntax parameter). variables specified (neither default explicitly) assigned value rtauargus.totcode.  (code(s) pour le total d'une variable catégorielle (voir section 'Specific parameters' pour la syntaxe de ce paramètre). Les variables non spécifiées (ni par défaut, ni explicitement) se verront attribuer la valeur de rtauargus.totcode.) missing code(s) missing value (see section 'Specific parameters' syntax parameter).  (code(s) pour une valeur manquante (voir section 'Specific parameters' pour la syntaxe de ce paramètre).) codelist file(s) containing labels categorical variables (see section 'Specific parameters' syntax parameter).  (fichier(s) contenant les libellés des variables catégorielles (voir section 'Specific parameters' pour la syntaxe de ce paramètre).) request (yet implemented - pas encore implémenté)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/micro_asc_rda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates asc and rda files from microdata — micro_asc_rda","text":"Returns names asc rda files list (invisibly). invisibly). Empty columns (filled NA empty strings) strings) exported asc file. warning message list affected columns.  (Renvoie les noms des fichiers asc et rda sous forme de liste (de manière invisible). Les colonnes vides (remplies de NA ou de chaînes de caractères vides) ne seront pas exportées dans le fichier asc. Un message d'avertissement listera les colonnes concernées.)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/micro_asc_rda.html","id":"specific-parameters","dir":"Reference","previous_headings":"","what":"Specific parameters","title":"Creates asc and rda files from microdata — micro_asc_rda","text":"parameters totcode, missing codelist filled vector indicating value take variable. names elements vector give variable concerned, elements vector give value parameter Tau-Argus. unnamed element element default value, assigned variables can take parameter. example : totcode = \"\" : écrit <TOTCODE> \"\" categorical variables totcode = c(\"\", GEO = \"France\") : idem, except GEO variable (Les paramètres totcode, missing et codelist sont à renseigner sous la forme d'un vecteur indiquant la valeur à prendre pour chaque variable. Les noms des éléments du vecteur donnent la variable concernée, les éléments du vecteur donnent la valeur du paramètre pour Tau-Argus. Un élément non nommé constituera la valeur par défaut, qui sera attribuée à toutes les variables pouvant prendre ce paramètre. Par exemple : totcode = \"Ensemble\" : écrit <TOTCODE> \"Ensemble\" pour toutes les variables catégorielles totcode = c(\"Ensemble\", GEO = \"France\") : idem, sauf pour la variable GEO )","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/micro_asc_rda.html","id":"hierarchical-variables","dir":"Reference","previous_headings":"","what":"Hierarchical variables","title":"Creates asc and rda files from microdata — micro_asc_rda","text":"parameter hrc follows syntax rules totcode, missing codelist (named vector containing many elements variables describe). also particularity accept several ways specifying values associated hierarchical variables. define hierarchy based positions characters (hierierlevels), pass sequence integers separated spaces. Example : c(CODECOM = \"2 3 0 0 0\") hierarchy defined separate hrc file (hiercodelist), function expects location file (possible hiercodelist differs default option package). case, can write explicitly path existing file file (c(A38 = \"a38.hrc\")), also make call write_hrc() generate hrc file microdata. Example : c(A38 = write_hrc(microdata, c(\"A38\", \"A21\", \"A10\"))) shortcut call write variables constituting hierarchy separated \">\". case, microdata hierleadstring write_hrc uses declared micro_asc_rda. Example : c(A38 = \"A38 > A21 > A10\") (number spaces \">\") last two methods require creation temporary file. reusable hrc file, necessary create beforehand using write_hrc. three methods require elements vector parameter named (name variable), even one element. (Le paramètre hrc obéit aux mêmes règles de syntaxe que totcode, missing et codelist (vecteur nommé contenant autant d'éléments que de variables à décrire). Il présente de plus la particularité d'accepter plusieurs façons de spécifier les valeurs associées aux variables hiérarchiques. Pour définir une hiérarchie basée sur les positions des caractères (hierlevels), passer une suite de nombre entiers séparés par des espaces. Si la hiérarchie est définie dans un fichier hrc à part (hiercodelist), la fonction attend l'emplacement de ce fichier (et un éventuel hierleadstring s'il diffère de l'option par défaut du package). Dans ce cas, peut écrire explicitement le chemin vers un fichier existant (c(A38 = \"a38.hrc\")), mais aussi passer un appel à write_hrc() qui génèrera un fichier hrc à partir de microdonnées. Un raccourci pour cet appel est d'écrire les variables constituant la hiérarchie séparées par des \">\". Dans ce cas, les microdonnées et hierleadstring qu'utilise write_hrc sont ceux déclarés dans micro_asc_rda. Exemple : c(A38 = \"A38 > A21 > A10\") (nombre d'espaces quelconque avant et après les \">\") Les deux dernières méthodes passent par la création d'un fichier temporaire. Pour un fichier hrc réutilisable, il est nécessaire de le créer au préalable à l'aide de write_hrc. Les trois méthodes nécessitent que les éléments du vecteur en paramètre soient nommés (avec le nom de la variable), même s'il n'y qu'un seul élément.)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/micro_asc_rda.html","id":"number-of-decimals","dir":"Reference","previous_headings":"","what":"Number of decimals","title":"Creates asc and rda files from microdata — micro_asc_rda","text":"parameter decimals indicates minimum number decimals appear output file (whatever number decimals actually present microdata). applies real variables (double) integer variables (integer). add zeros integer variable, convert .double beforehand. digits decimal point may incorrect asc file total number digits (decimal separator) greater 15. See gdata::write.fwf() (function used writing asc file) details. (Le paramètre decimals indique le nombre minimal de décimales à faire figurer dans le fichier en sortie (quel que soit le nombre de décimales effectivement présent dans microdata). Il s'applique à toutes les variables réelles (double) mais pas aux variables entières (integer). Pour ajouter des zéros à une variable entière, la convertir avec .double au préalable. Les chiffres après la virgule peuvent être incorrects dans le fichier asc si le nombre total de chiffres (avant ou après le séparateur décimal) est supérieur à 15. Voir gdata::write.fwf() (fonction utilisée pour écrire le fichier asc) pour plus de détails.)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/micro_asc_rda.html","id":"see-also","dir":"Reference","previous_headings":"","what":"See also","title":"Creates asc and rda files from microdata — micro_asc_rda","text":"function micro_rtauargus(), uses function inherits parameters.  (La fonction micro_rtauargus(), qui utilise cette fonction et hérite de ses paramètres.)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/micro_asc_rda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates asc and rda files from microdata — micro_asc_rda","text":"","code":"# dummy data/donnees fictives micro_df <-   data.frame(     GEO   = c(\"443\", \"541\", \"543\"),     A10   = c( \"AZ\",  \"BE\",  \"BE\"),     A21   = c(  \"A\",   \"B\",   \"C\"),     DIPL  = c( \"01\",  \"??\",  \"02\"),     CA    = c(  100,     0,     7),     POIDS = c(    1,  2.71,   4.2)   )  # creation asc + rda res <-   micro_asc_rda(     microdata  = micro_df,     weight_var = \"POIDS\",     decimals   = 1,     hrc        = c(A21 = \"A21>A10\", GEO = \"2 1 0\", DIPL = \"dipl.hrc\"),     totcode    = c(GEO = \"France\"),     missing    = c(DIPL = \"??\")   )  # Content of output files/visualisation des fichiers produits file.show(   res$asc_filename, res$rda_filename,   header = unlist(res),   pager = \"internal\" ) #> Warning: error in running command"},{"path":"https://inseefrlab.github.io/rtauargus/reference/micro_rtauargus.html","id":null,"dir":"Reference","previous_headings":"","what":"Protects tables from microdata — micro_rtauargus","title":"Protects tables from microdata — micro_rtauargus","text":"Development micro_rtauargus() complete, new code recommend switching tabular-wise protection provided tab_rtauargus() tab_multi_manager(), offer lot features protection problems. See details vignette(\"rtauargus\") vignette(\"protect_multi_tables). Protects tables built microdata specifications crossings. function allows perform complete process, namely creation asc rda files, construction arb file, effective launching Tau-Argus eventual recovery results R.  (Secrétise des tableaux construits à partir de microdonnées et des spécifications des croisements. La fonction permet d'effectuer le processus complet, à savoir la création des fichiers asc et rda, la construction du fichier arb, le lancement effectif de Tau-Argus et la récupération éventuelle des résultats dans R.) function executes sequentially functions: micro_asc_rda() -> micro_arb() -> run_arb() Intermediate files without name entered (asc_filename...) created temporary folder, randomly generated names. mechanism allows user abstract preparation preparation data maintain entire chain processing R. (La fonction exécute séquentiellement les fonctions : micro_asc_rda() -> micro_arb() -> run_arb() Les fichiers intermédiaires sans nom renseigné (asc_filename...) seront créés dans un dossier temporaire, avec des noms générés aléatoirement. Ce mécanisme permet à l'utilisateur de s'abstraire de la préparation des données propre à Tau-Argus et de maintenir l'intégralité de la chaîne de traitements dans R.)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/micro_rtauargus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Protects tables from microdata — micro_rtauargus","text":"","code":"micro_rtauargus(microdata, explanatory_vars, safety_rules, suppress, ...)"},{"path":"https://inseefrlab.github.io/rtauargus/reference/micro_rtauargus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Protects tables from microdata — micro_rtauargus","text":"microdata data.frame containing microdata (path text files already present: see section Microdata already text files).  ( data.frame contenant les microdonnées (ou chemin vers des fichiers texte déjà présents : voir section Microdata already text files).) explanatory_vars categorical variables, form list vectors. element list vector variable names forming tab. Example: list(c(\"CJ\", \"A21\"), c(\"SEX\", \"REGION\")) first table crossing CJ x A21 second table crossing SEXE x REGION. single tabulation, simple vector variables crossed accepted (need list(...)).  ( variables catégorielles, sous forme de liste de vecteurs. Chaque élément de la liste est un vecteur des noms des variables formant une tabulation. Exemple: list(c(\"CJ\", \"A21\"), c(\"SEX\", \"REGION\")) pour la première table croisant CJ x A21 et la seconde croisant SEXE x REGION Si une seule tabulation, un simple vecteur des variables à croiser est accepté (pas besoin de list(...)).) safety_rules primary secret rule(s). String Tau-Argus batch syntax. weighting treated separate parameter (specify WGT , use weighted).  ( règle(s) de secret primaire. Chaîne de caractères en syntaxe batch Tau-Argus. La pondération est traitée dans un paramètre à part (ne pas spécifier WGT ici, utiliser le paramètre weighted).) suppress secret management method(s) secondary (Tau-Argus batch syntax). method tabulation, first parameter (table number) ignored renumbered automatically (see section 'Syntax').  ( méthode(s) de gestion du secret secondaire (syntaxe batch de Tau-Argus). Si la méthode est la même pour chaque tabulation, le premier paramètre (numéro du tableau) sera ignoré et renuméroté automatiquement (voir la section 'Syntax').) ... optional parameters micro_asc_rda, micro_arb run_arb. See help functions.  (paramètres optionnels pour micro_asc_rda, micro_arb et run_arb. Voir l'aide de ces fonctions.)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/micro_rtauargus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Protects tables from microdata — micro_rtauargus","text":"import = TRUE, list data.frames (protected tables), NULL otherwise. (Si import = TRUE, une liste de data.frames (tableaux secrétisés), NULL sinon.)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/micro_rtauargus.html","id":"microdata-already-as-text-files","dir":"Reference","previous_headings":"","what":"Microdata already as text files","title":"Protects tables from microdata — micro_rtauargus","text":"use existing asc rda files already existing, possible provide, instead data.frame, character vector indicating path files. first element vector asc file, second element rda file. rda file can omitted name asc file (except extension). Use option start whole process without generation text data. specify asc_filename rda_filename (used name text files created, irrelevant ). Pour utiliser des fichiers asc et rda existant déjà, il est possible de fournir à la place du data.frame un vecteur caractère indiquant le chemin de ces fichiers. Le premier élément de ce vecteur est le fichier asc, le deuxième élément le fichier rda. Le fichier rda peut être omis s'il porte le même nom que le fichier asc (à l'extension près). Utiliser cette option pour lancer le processus complet sans la génération des données en texte. Ne pas spécifier asc_filename ou rda_filename (sert à nommer les fichiers texte à créer, ce qui est sans objet ici).","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/micro_rtauargus.html","id":"syntax","dir":"Reference","previous_headings":"","what":"Syntax","title":"Protects tables from microdata — micro_rtauargus","text":"Tau-Argus can handle multiple tabs set microdata. Passing single value option apply processing tab. differentiated options, passing vector containing many values tabs. lengths match (recommended), recycling performed. Unless otherwise stated, use syntax mentioned documentation Tau-Argus. Special syntax suppress : first parameter Tau-Argus syntax tab number. method identical tabs, first parameter ignored numbers automatically recalculated batch. writing suppress = \"GH(n,100)\", n thus transformed 1 first tab, 2 second tab, etc. (Tau-Argus peut traiter plusieurs tabulations pour un même jeu de microdonnées. Passer une seule valeur pour une option appliquera le même traitement à chaque tabulation. Pour des options différenciées, passer un vecteur contenant autant de valeurs que de tabulations. Si les longueurs ne correspondent pas (déconseillé), un recyclage est effectué. Sauf mention contraire, utiliser la syntaxe mentionnée dans la documentation de Tau-Argus. Syntaxe spéciale pour suppress : le premier paramètre dans la syntaxe Tau-Argus est le numéro de la tabulation. Si la méthode est identique pour toutes les tabulations, ce premier paramètre sera ignoré et les numéros recalculés automatiquement pour le batch. Dans l'écriture suppress = \"GH(n,100)\", n sera ainsi transformé en 1 pour la première tabulation, en 2 pour la deuxième tabulation, etc.)","code":""},{"path":[]},{"path":"https://inseefrlab.github.io/rtauargus/reference/micro_rtauargus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Protects tables from microdata — micro_rtauargus","text":"","code":"if (FALSE) { # \\dontrun{ rtauargus(   microdata = data.frame(V1 = c(\"A\", \"A\", \"B\", \"C\", \"A\"), V2 = \"Z\"),   explanatory_vars = c(\"V1\", \"V2\"),   safety_rules = \"FREQ(3,10)\",   suppress = \"GH(.,100)\",   output_options = \"AS+\" # (example of optional parameter for micro_arb) )} # }"},{"path":"https://inseefrlab.github.io/rtauargus/reference/nb_tab_generated.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the number of tables generated when merging 3 variables in the transition from 5 to 3 dimensions — nb_tab_generated","title":"Calculate the number of tables generated when merging 3 variables in the transition from 5 to 3 dimensions — nb_tab_generated","text":"Calculate number tables generated merging 3 variables transition 5 3 dimensions","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/nb_tab_generated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the number of tables generated when merging 3 variables in the transition from 5 to 3 dimensions — nb_tab_generated","text":"","code":"nb_tab_generated(v1, v2, v3 = NULL, v4 = NULL, hrcfiles = NULL, data = NULL)"},{"path":"https://inseefrlab.github.io/rtauargus/reference/nb_tab_generated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the number of tables generated when merging 3 variables in the transition from 5 to 3 dimensions — nb_tab_generated","text":"v1 first variable merged v2 second variable merged v3 third variable merged ( variable merged v1 v2 v4 specified) v4 fourth variable merged (v3) hrcfiles named list hrc files data data.frame (used case trio formed)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/nb_tab_generated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the number of tables generated when merging 3 variables in the transition from 5 to 3 dimensions — nb_tab_generated","text":"integer representing number tables generated","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/nb_tab_generated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the number of tables generated when merging 3 variables in the transition from 5 to 3 dimensions — nb_tab_generated","text":"","code":"# Dimension 4 library(dplyr) data <- expand.grid(   ACT = c(\"Total\", \"A\", \"B\", \"A1\", \"A2\", \"B1\", \"B2\"),   GEO = c(\"Total\", \"G1\", \"G2\"),   SEX = c(\"Total\", \"F\", \"M\"),   AGE = c(\"Total\", \"AGE1\", \"AGE2\"),   stringsAsFactors = FALSE ) %>%   as.data.frame()  data <- data %>% mutate(VALUE = 1)  hrc_act <- \"hrc_ACT.hrc\"  sdcHierarchies::hier_create(root = \"Total\", nodes = c(\"A\", \"B\")) %>%   sdcHierarchies::hier_add(root = \"A\", nodes = c(\"A1\", \"A2\")) %>%   sdcHierarchies::hier_add(root = \"B\", nodes = c(\"B1\", \"B2\")) %>%   sdcHierarchies::hier_convert(as = \"argus\") %>%   slice(-1) %>%   mutate(levels = substring(paste0(level, name), 3)) %>%   select(levels) %>%   write.table(file = hrc_act, row.names = FALSE, col.names = FALSE, quote = FALSE)  # 1 pair created nb_tab_generated(v1 = \"ACT\", v2 = \"GEO\",                 hrcfiles = c(ACT = hrc_act)) #> [1] 6  # Dimension 5 data <- expand.grid(   ACT = c(\"Total\", \"A\", \"B\", \"A1\", \"A2\", \"B1\", \"B2\"),   GEO = c(\"Total\", \"GA\", \"GB\", \"GA1\", \"GA2\", \"GB1\", \"GB2\"),   SEX = c(\"Total\", \"F\", \"M\", \"F1\", \"F2\", \"M1\", \"M2\"),   AGE = c(\"Total\", \"AGE1\", \"AGE2\", \"AGE11\", \"AGE12\", \"AGE21\", \"AGE22\"),   ECO = c(\"PIB\", \"Ménages\", \"Entreprises\"),   stringsAsFactors = FALSE,   KEEP.OUT.ATTRS = FALSE ) %>%   as.data.frame()  data <- data %>% mutate(VALUE = 1:n())  hrc_act <- \"hrc_ACT.hrc\" sdcHierarchies::hier_create(root = \"Total\", nodes = c(\"A\", \"B\")) %>%   sdcHierarchies::hier_add(root = \"A\", nodes = c(\"A1\", \"A2\")) %>%   sdcHierarchies::hier_convert(as = \"argus\") %>%   slice(-1) %>%   mutate(levels = substring(paste0(level, name), 3)) %>%   select(levels) %>%   write.table(file = hrc_act, row.names = FALSE, col.names = FALSE, quote = FALSE)  hrc_geo <- \"hrc_GEO.hrc\" sdcHierarchies::hier_create(root = \"Total\", nodes = c(\"GA\", \"GB\")) %>%   sdcHierarchies::hier_add(root = \"GA\", nodes = c(\"GA1\", \"GA2\")) %>%   sdcHierarchies::hier_add(root = \"GB\", nodes = c(\"GB1\", \"GB2\")) %>%   sdcHierarchies::hier_convert(as = \"argus\") %>%   slice(-1) %>%   mutate(levels = substring(paste0(level, name), 3)) %>%   select(levels) %>%   write.table(file = hrc_geo, row.names = FALSE, col.names = FALSE, quote = FALSE)  hrc_sex <- \"hrc_SEX.hrc\" sdcHierarchies::hier_create(root = \"Total\", nodes = c(\"F\", \"M\")) %>%   sdcHierarchies::hier_add(root = \"F\", nodes = c(\"F1\", \"F2\")) %>%   sdcHierarchies::hier_add(root = \"M\", nodes = c(\"M1\", \"M2\")) %>%   sdcHierarchies::hier_convert(as = \"argus\") %>%   slice(-1) %>%   mutate(levels = substring(paste0(level, name), 3)) %>%   select(levels) %>%   write.table(file = hrc_sex, row.names = FALSE, col.names = FALSE, quote = FALSE)  # Trio merged nb_tab_generated(data = data,                 v1 = \"ACT\", v2 = \"GEO\", v3 = \"SEX\",                 hrcfiles = c(ACT = hrc_act, GEO = hrc_geo, SEX = hrc_sex)) #> [1] 216  # 2 pairs created nb_tab_generated(v1 = \"ACT\", v2 = \"GEO\",                 v3 = \"SEX\", v4 = \"EXO\",                 hrcfiles = c(ACT = hrc_act, GEO = hrc_geo, SEX = hrc_sex)) #> [1] 72"},{"path":"https://inseefrlab.github.io/rtauargus/reference/nuts23_fr_corr_table.html","id":null,"dir":"Reference","previous_headings":"","what":"data - Correspondence table describing the NUTS hierarchy. — nuts23_fr_corr_table","title":"data - Correspondence table describing the NUTS hierarchy. — nuts23_fr_corr_table","text":"dataset describing nesting NUTS2 NUTS3 levels Metropolitan France, useful working NUTS variables turnover_ datasets.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/nuts23_fr_corr_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data - Correspondence table describing the NUTS hierarchy. — nuts23_fr_corr_table","text":"","code":"nuts23_fr_corr_table"},{"path":"https://inseefrlab.github.io/rtauargus/reference/nuts23_fr_corr_table.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"data - Correspondence table describing the NUTS hierarchy. — nuts23_fr_corr_table","text":"data frame 92 rows 3 variables: NUTS2 NUTS2 levels France - equivalent French \"Régions\" NUTS3 NUTS3 levels France - equivalent French \"Départements\"","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/nuts23_fr_corr_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"data - Correspondence table describing the NUTS hierarchy. — nuts23_fr_corr_table","text":"Use write_hrc2 function create .hrc file correspondence table.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/reduce_dims.html","id":null,"dir":"Reference","previous_headings":"","what":"General function that selects the appropriate separator and applies dimension reduction. — reduce_dims","title":"General function that selects the appropriate separator and applies dimension reduction. — reduce_dims","text":"General function selects appropriate separator applies dimension reduction.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/reduce_dims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General function that selects the appropriate separator and applies dimension reduction. — reduce_dims","text":"","code":"reduce_dims(   dfs,   dfs_name,   totcode,   hrcfiles = NULL,   sep_dir = FALSE,   hrc_dir = \"hrc_alt\",   vars_to_merge = NULL,   nb_tab_option = \"min\",   limit = NULL,   over_split = FALSE,   vec_sep = c(\"___\", \"_XXX_\", \"_YYY_\", \"_TTT_\", \"_UVW_\"),   verbose = FALSE )"},{"path":"https://inseefrlab.github.io/rtauargus/reference/reduce_dims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General function that selects the appropriate separator and applies dimension reduction. — reduce_dims","text":"dfs data.frame 4 5 categorical variables dfs_name name data.frame list provided user totcode named vector totals categorical variables hrcfiles named vector indicating hrc files hierarchical variables among categorical variables dfs sep_dir allows forcing writing hrc separate folder, default FALSE hrc_dir folder write hrc files writing new folder forced folder specified hrcfiles vars_to_merge NULL vector variables merged: 2 dimension 4; 3 4 dimension 5 nb_tab_option strategy follow choosing variables automatically: 'min': minimize number tables; 'max': maximize number tables; 'smart': minimize number tables constraint row count. limit maximum allowed number rows smart over_split = TRUE case over_split indicates split several tables tables bigger limit end reduction process ; decreases number hierarchy tables vec_sep vector candidate separators use verbose print different steps function inform user progress","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/reduce_dims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"General function that selects the appropriate separator and applies dimension reduction. — reduce_dims","text":"list containing: tabs: named list 3-dimensional dataframes nested hierarchies alt_hrc: named list hrc specific variables created merging go dimension 3 alt_totcode: named list totals specific variables created merging go dimension 3 vars: categorical variables output dataframes sep: separator used link variables totcode: named vector totals categorical variables hrcfiles: named vector hrc categorical variables (except merged one) fus_vars: named vector vectors representing merged variables dimension reduction","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/reduce_dims.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"General function that selects the appropriate separator and applies dimension reduction. — reduce_dims","text":"","code":"library(dplyr) # Examples for dimension 4  data <- expand.grid(   ACT = c(\"Total\", \"A\", \"B\", \"A1\", \"A2\",\"A3\", \"B1\",   \"B2\",\"B3\",\"B4\",\"C\",\"D\",\"E\",\"F\",\"G\",\"B5\"),   GEO = c(\"Total\", \"G1\", \"G2\"),   SEX = c(\"Total\", \"F\", \"M\"),   AGE = c(\"Total\", \"AGE1\", \"AGE2\"),   stringsAsFactors = FALSE ) %>%   as.data.frame() %>%   mutate(VALUE = 1)  if(!dir.exists(\"hrc\")) dir.create(\"hrc\") hrc_act <- \"hrc/hrc_ACT4.hrc\"  sdcHierarchies::hier_create(   root = \"Total\",   nodes = c(\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\") ) %>%   sdcHierarchies::hier_add(root = \"A\", nodes = c(\"A1\",\"A2\",\"A3\")) %>%   sdcHierarchies::hier_add(root = \"B\", nodes = c(\"B1\",\"B2\",\"B3\",\"B4\",\"B5\")) %>%   sdcHierarchies::hier_convert(as = \"argus\") %>%   slice(-1) %>%   mutate(levels = substring(paste0(level,name),3)) %>%   select(levels) %>%   write.table(     file = hrc_act, row.names = FALSE, col.names = FALSE, quote = FALSE   )  # Reduce dim by forcing variables to be merged res1 <- reduce_dims(   dfs = data,   dfs_name = \"tab\",   totcode = c(SEX = \"Total\", AGE = \"Total\", GEO = \"Total\", ACT = \"Total\"),   hrcfiles = c(ACT = hrc_act),   sep_dir = TRUE,   vars_to_merge = c(\"ACT\", \"GEO\"),   hrc_dir = \"output\",   verbose = TRUE ) #>  #> Reducing from 4 to 3... #> tab has generated 6 tables in total #>   # Split the output in order to be under the limit & forcing variables to be merged res1b <- reduce_dims(   dfs = data,   dfs_name = \"tab\",   totcode = c(SEX = \"Total\", AGE = \"Total\", GEO = \"Total\", ACT = \"Total\"),   hrcfiles = c(ACT = hrc_act),   sep_dir = TRUE,   hrc_dir = \"output\",   nb_tab_option = 'smart',   over_split = TRUE,   verbose = TRUE,   limit = 100 ) #> Choosing variables... #> Warning when choosing variables: #> The limit of  100  cannot be achieved. #> The largest table has  198  rows. #>  #> Reducing from 4 to 3... #> tab has generated 6 tables in total #>  #> Spliting... #>  SEX___ACT  #> tab has generated 22 tables in total #>   # Result of the function (minimizes the number of created tables by default) res2 <- reduce_dims(   dfs = data,   dfs_name = \"tab\",   totcode = c(SEX = \"Total\", AGE = \"Total\", GEO = \"Total\", ACT = \"Total\"),   hrcfiles = c(ACT = hrc_act),   sep_dir = TRUE,   hrc_dir = \"output\",   verbose = TRUE ) #>  #> Reducing from 4 to 3... #> tab has generated 2 tables in total #>   # Result of the function (maximize the number of created tables) res3 <- reduce_dims(   dfs = data,   dfs_name = \"tab\",   totcode = c(SEX = \"Total\", AGE = \"Total\", GEO = \"Total\", ACT = \"Total\"),   hrcfiles = c(ACT = hrc_act),   sep_dir = TRUE,   hrc_dir = \"output\",   nb_tab_option = \"max\",   verbose = TRUE ) #>  #> Reducing from 4 to 3... #> tab has generated 6 tables in total #>   # Example for dimension 5  data <- expand.grid(   ACT = c(\"Total_A\", paste0(\"A\", seq(1,5),\"_\"),paste0(\"A1_\", seq(1,7)),paste0(\"A2_\", seq(1,9))),   GEO = c(\"Total_G\", \"GA\", \"GB\", \"GA1\", \"GA2\", \"GB1\", \"GB2\",\"GA3\",\"GB3\",\"GB4\"),   SEX = c(\"Total_S\", \"F\", \"M\",\"F1\",\"F2\",\"M1\",\"M2\"),   AGE = c(\"Ensemble\", \"AGE1\", \"AGE2\", \"AGE11\", \"AGE12\", \"AGE21\", \"AGE22\"),   ECO = c(\"PIB\",\"Ménages\",\"Entreprises\"),   stringsAsFactors = FALSE,   KEEP.OUT.ATTRS = FALSE ) %>%   as.data.frame() %>%   mutate(VALUE = 1:n())  hrc_act <- \"hrc/hrc_ACT5.hrc\" sdcHierarchies::hier_create(root = \"Total_A\", nodes = paste0(\"A\", seq(1,5),\"_\")) %>%   sdcHierarchies::hier_add(root = \"A1_\", nodes = paste0(\"A1_\", seq(1,7))) %>%   sdcHierarchies::hier_add(root = \"A2_\", nodes = paste0(\"A2_\", seq(1,9))) %>%   sdcHierarchies::hier_convert(as = \"argus\") %>%   slice(-1) %>%   mutate(levels = substring(paste0(level,name),3)) %>%   select(levels) %>%   write.table(file = hrc_act, row.names = FALSE, col.names = FALSE, quote = FALSE)  hrc_age <- \"hrc/hrc_AGE5.hrc\" sdcHierarchies::hier_create(root = \"Ensemble\", nodes = c(\"AGE1\", \"AGE2\")) %>%   sdcHierarchies::hier_add(root = \"AGE1\", nodes = c(\"AGE11\", \"AGE12\")) %>%   sdcHierarchies::hier_add(root = \"AGE2\", nodes = c(\"AGE21\", \"AGE22\")) %>%   sdcHierarchies::hier_convert(as = \"argus\") %>%   slice(-1) %>%   mutate(levels = substring(paste0(level,name),3)) %>%   select(levels) %>%   write.table(file = hrc_age, row.names = FALSE, col.names = FALSE, quote = FALSE)  hrc_geo <- \"hrc/hrc_GEO5.hrc\" sdcHierarchies::hier_create(root = \"Total_G\", nodes = c(\"GA\",\"GB\")) %>%   sdcHierarchies::hier_add(root = \"GA\", nodes = c(\"GA1\",\"GA2\",\"GA3\")) %>%   sdcHierarchies::hier_add(root = \"GB\", nodes = c(\"GB1\",\"GB2\",\"GB3\",\"GB4\")) %>%   sdcHierarchies::hier_convert(as = \"argus\") %>%   slice(-1) %>%   mutate(levels = substring(paste0(level,name),3)) %>%   select(levels) %>%   write.table(file = hrc_geo, row.names = FALSE, col.names = FALSE, quote = FALSE)  # Results of the function res4 <- reduce_dims(   dfs = data,   dfs_name = \"tab\",   totcode = c(SEX = \"Total_S\", AGE = \"Ensemble\", GEO = \"Total_G\", ACT = \"Total_A\", ECO = \"PIB\"),   hrcfiles = c(ACT = hrc_act, GEO = hrc_geo, AGE = hrc_age),   sep_dir = TRUE,   hrc_dir = \"output\",   verbose = TRUE ) #>  #> Reducing from 5 to 4... #> tab has generated 2 tables in total #> Reducing from 4 to 3... #> tab has generated 36 tables in total #>   res5 <- reduce_dims(   dfs = data,   dfs_name = \"tab\",   totcode = c(SEX = \"Total_S\", AGE = \"Ensemble\", GEO = \"Total_G\", ACT = \"Total_A\", ECO = \"PIB\"),   hrcfiles = c(ACT = hrc_act, GEO = hrc_geo),   sep_dir = TRUE,   hrc_dir = \"output\",   nb_tab_option = 'smart',   limit = 1300,   verbose = TRUE ) #> Choosing variables... #> Warning when choosing variables: #> The limit of  1300  cannot be achieved. #> The largest table has  1344  rows. #>  #> Reducing from 5 to 4... #> tab has generated 6 tables in total #> Reducing from 4 to 3... #> tab has generated 198 tables in total #>   res6 <- reduce_dims(   dfs = data,   dfs_name = \"tab\",   totcode = c(SEX = \"Total_S\", AGE = \"Ensemble\", GEO = \"Total_G\", ACT = \"Total_A\", ECO = \"PIB\"),   hrcfiles = c(ACT = hrc_act, GEO = hrc_geo),   sep_dir = TRUE,   hrc_dir = \"output\",   nb_tab_option = 'min',   verbose = TRUE,   limit = 4470,   over_split = TRUE ) #>  #> Reducing from 5 to 4... #> tab has generated 2 tables in total #> Reducing from 4 to 3... #> tab has generated 12 tables in total #>  #> Spliting... #>  ECO___SEX  #>  AGE___ACT  #> tab has generated 87 tables in total #>"},{"path":"https://inseefrlab.github.io/rtauargus/reference/restore_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to reverse the process of dimension reduction — restore_format","title":"Function to reverse the process of dimension reduction — restore_format","text":"Function reverse process dimension reduction","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/restore_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to reverse the process of dimension reduction — restore_format","text":"","code":"restore_format(masq, res)"},{"path":"https://inseefrlab.github.io/rtauargus/reference/restore_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to reverse the process of dimension reduction — restore_format","text":"masq list data.frames secret applied res result dimension reduction function (retrieve merged variables) separator (sep).","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/restore_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to reverse the process of dimension reduction — restore_format","text":"original dataframe 4 5 dimensions","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/restore_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to reverse the process of dimension reduction — restore_format","text":"","code":"# Examples with dimension 4 library(dplyr) data <- expand.grid(   ACT = c(\"Total\", \"A\", \"B\", \"A1\", \"A2\",\"A3\", \"B1\", \"B2\",\"B3\",\"B4\",\"C\",           \"name_non_changed_vars\",\"E\",\"F\",\"G\",\"B5\"),   GEO = c(\"Total\", \"G1\", \"G2\"),   SEX = c(\"Total\", \"F\", \"M\"),   AGE = c(\"Total\", \"AGE1\", \"AGE2\"),   stringsAsFactors = FALSE ) %>%   as.data.frame()  data <- data %>% mutate(VALUE = 1)  hrc_act <- \"hrc_ACT.hrc\"  sdcHierarchies::hier_create(   root = \"Total\",   nodes = c(\"A\",\"B\",\"C\",\"name_non_changed_vars\",\"E\",\"F\",\"G\") ) %>%   sdcHierarchies::hier_add(root = \"A\", nodes = c(\"A1\",\"A2\",\"A3\")) %>%   sdcHierarchies::hier_add(root = \"B\", nodes = c(\"B1\",\"B2\",\"B3\",\"B4\",\"B5\")) %>%   sdcHierarchies::hier_convert(as = \"argus\") %>%   slice(-1) %>%   mutate(levels = substring(paste0(level,name),3)) %>%   select(levels) %>%   write.table(file = hrc_act, row.names = FALSE, col.names = FALSE, quote = FALSE)  # Result of the function by forcing some variables to be merged res_red_dim <- reduce_dims(   dfs = data,   dfs_name = \"tab\",   totcode = c(SEX=\"Total\",AGE=\"Total\", GEO=\"Total\", ACT=\"Total\"),   hrcfiles = c(ACT = hrc_act),   sep_dir = TRUE,   hrc_dir = \"output\",   vars_to_merge = c(\"ACT\",\"GEO\") )  res1 <- restore_format(masq = res_red_dim$tabs, res = res_red_dim) dim(setdiff(res1,data))[1] == 0 #> [1] TRUE  # return TRUE # We have exactly the sames cases in the datatable after splitting and unsplitting data  # Exemple dimension 5  data <- expand.grid(   ACT = c(\"Total_A\", paste0(\"A\", seq(1,5),\"_\"),paste0(\"A1_\", seq(1,7)),           paste0(\"A2_\", seq(1,9))),   GEO = c(\"Total_G\", \"GA\", \"GB\", \"GA1\", \"GA2\", \"GB1\", \"GB2\",\"GA3\",\"GB3\",\"GB4\"),   SEX = c(\"Total_S\", \"F\", \"M\",\"F1\",\"F2\",\"M1\",\"M2\"),   AGE = c(\"Ensemble\", \"AGE1\", \"AGE2\", \"AGE11\", \"AGE12\", \"AGE21\", \"AGE22\"),   ECO = c(\"PIB\",\"Ménages\",\"Entreprises\"),   stringsAsFactors = FALSE,   KEEP.OUT.ATTRS = FALSE ) %>%   as.data.frame()  data <- data %>% mutate(VALUE = 1:n())  hrc_act <- \"hrc_ACT.hrc\" sdcHierarchies::hier_create(root = \"Total_A\", nodes = paste0(\"A\", seq(1,5),\"_\")) %>%   sdcHierarchies::hier_add(root = \"A1_\", nodes = paste0(\"A1_\", seq(1,7))) %>%   sdcHierarchies::hier_add(root = \"A2_\", nodes = paste0(\"A2_\", seq(1,9))) %>%   sdcHierarchies::hier_convert(as = \"argus\") %>%   slice(-1) %>%   mutate(levels = substring(paste0(level,name),3)) %>%   select(levels) %>%   write.table(file = hrc_act, row.names = FALSE, col.names = FALSE, quote = FALSE)  hrc_geo <- \"hrc_GEO.hrc\" sdcHierarchies::hier_create(root = \"Total_G\", nodes = c(\"GA\",\"GB\")) %>%   sdcHierarchies::hier_add(root = \"GA\", nodes = c(\"GA1\",\"GA2\",\"GA3\")) %>%   sdcHierarchies::hier_add(root = \"GB\", nodes = c(\"GB1\",\"GB2\",\"GB3\",\"GB4\")) %>%   sdcHierarchies::hier_convert(as = \"argus\") %>%   slice(-1) %>%   mutate(levels = substring(paste0(level,name),3)) %>%   select(levels) %>%   write.table(file = hrc_geo, row.names = FALSE, col.names = FALSE, quote = FALSE)  # function's result  res_red_dim <- reduce_dims(   dfs = data,   dfs_name = \"tab\",   totcode = c(SEX=\"Total_S\",AGE=\"Ensemble\", GEO=\"Total_G\", ACT=\"Total_A\", ECO = \"PIB\"),   hrcfiles = c(ACT = hrc_act, GEO = hrc_geo),   sep_dir = TRUE,   hrc_dir = \"output\" )  res2 <- restore_format(masq = res_red_dim$tabs, res = res_red_dim)"},{"path":"https://inseefrlab.github.io/rtauargus/reference/rtauargus-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rtauargus: Using Tau-Argus from R — rtauargus-package","title":"rtauargus: Using Tau-Argus from R — rtauargus-package","text":"Protects tables calling Tau-Argus software R.","code":""},{"path":[]},{"path":"https://inseefrlab.github.io/rtauargus/reference/rtauargus-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rtauargus: Using Tau-Argus from R — rtauargus-package","text":"Maintainer: Julien Jamme julien.jamme@insee.fr Authors: Pierre-Yves Berrard pierre-yves.berrard@insee.fr Nathanaël Rastout nathanael.rastout@insee.fr Jeanne Pointet Félix Beroud André-Raymond Socard Wistan Pomel Clara Baudry clara.baudry@insee.fr contributors: Institut National de la Statistique et des Études Économiques [copyright holder]","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/rtauargus_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Manages options of rtauargus package — rtauargus_options","title":"Manages options of rtauargus package — rtauargus_options","text":"Manages (displays, modifies, resets) options rtauargus package.  Gère les options du package (affiche, modifie, réinitialise).","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/rtauargus_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manages options of rtauargus package — rtauargus_options","text":"","code":"rtauargus_options()  # options(rtauargus.<opt> = <val>)  reset_rtauargus_options(...)"},{"path":"https://inseefrlab.github.io/rtauargus/reference/rtauargus_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manages options of rtauargus package — rtauargus_options","text":"... names options reset, separated commas. name specified, options reset. prefix \"rtauargus.\" required.  noms des options à réinitialiser, séparés par des virgules. Si aucun nom n'est spécifié, toutes les options du package seront réinitialisées. Le préfixe \"rtauargus.\" est facultatif.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/rtauargus_options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Manages options of rtauargus package — rtauargus_options","text":"options package define default behaviour functions. options used mandatory argument function set user. let systematically repeat parameter call function. name option name function prefixed rtauargus. : example, rtauargus.decimals used argument decimals micro_asc_rda function set user. loading package, rtauargus options, already set user, set default values (see table ). already defined options keep values set user. options can set session following instruction options(rtauargus....=...), configuration file user written options instructions, latter proper way reproducibility sought. Les options du package définissent les comportements par défaut des fonctions. user inadvertently removes options, functions use default values package. (Ces options sont utilisées si un argument obligatoire d’une fonction n’est pas renseigné. Elles permettent de ne pas répéter systématiquement le même paramètre à chaque appel d'une fonction. Le nom de l’option est le nom de l’argument d’une fonction précédé de rtauargus. : Par exemple, rtauargus.decimals sera la valeur utilisée si l’argument decimals de la fonction micro_asc_rda n’est pas renseigné par l’utilisateur. Au chargement, le package attribue une valeur par défaut à toutes les options de rtauargus qui ne sont pas encore déclarées (cf. tableau ci-dessous). Les options déjà définies par l'utilisateur gardent leurs valeurs. Elles peuvent être redéfinies pour une session par une instruction options(rtauargus....=...), ou de manière globale si de telles instructions sont placées dans un fichier de configuration propre à l'utilisateur (fortement déconseillé si le programme vocation à être reproductible). En cas d'effacement accidentel d'une option par l'utilisateur, les fonctions utiliseront les valeurs par défaut du package.)","code":""},{"path":[]},{"path":[]},{"path":"https://inseefrlab.github.io/rtauargus/reference/rtauargus_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manages options of rtauargus package — rtauargus_options","text":"","code":"rtauargus_options() #> $rtauargus.decimals #> [1] 0 #>  #> $rtauargus.hierleadstring #> [1] \"@\" #>  #> $rtauargus.import #> [1] FALSE #>  #> $rtauargus.is_tabular #> [1] TRUE #>  #> $rtauargus.linked #> [1] FALSE #>  #> $rtauargus.missing #> [1] \"\" #>  #> $rtauargus.missing_dir #> [1] \"stop\" #>  #> $rtauargus.output_options #> [1] \"\" #>  #> $rtauargus.output_type #> [1] \"4\" #>  #> $rtauargus.response_var #> [1] \"<freq>\" #>  #> $rtauargus.separator #> [1] \",\" #>  #> $rtauargus.show_batch_console #> [1] FALSE #>  #> $rtauargus.tauargus_exe #> [1] \"Y:/Logiciels/TauArgus/TauArgus.exe\" #>  #> $rtauargus.totcode #> [1] \"Total\" #>  #> $rtauargus.weighted #> [1] FALSE #>   # modifies some options options(   rtauargus.tauargus_exe = \"Z:/tmp/TauArgus.exe\",   rtauargus.output_type = \"4\",   rtauargus.weighted = TRUE ) str(rtauargus_options()) #> List of 15 #>  $ rtauargus.decimals          : int 0 #>  $ rtauargus.hierleadstring    : chr \"@\" #>  $ rtauargus.import            : logi FALSE #>  $ rtauargus.is_tabular        : logi TRUE #>  $ rtauargus.linked            : logi FALSE #>  $ rtauargus.missing           : chr \"\" #>  $ rtauargus.missing_dir       : chr \"stop\" #>  $ rtauargus.output_options    : chr \"\" #>  $ rtauargus.output_type       : chr \"4\" #>  $ rtauargus.response_var      : chr \"<freq>\" #>  $ rtauargus.separator         : chr \",\" #>  $ rtauargus.show_batch_console: logi FALSE #>  $ rtauargus.tauargus_exe      : chr \"Z:/tmp/TauArgus.exe\" #>  $ rtauargus.totcode           : chr \"Total\" #>  $ rtauargus.weighted          : logi TRUE  # resets some options (prefix \"rtauargus.\" facultatif) reset_rtauargus_options(\"output_type\", \"rtauargus.tauargus_exe\") str(rtauargus_options()) #> List of 15 #>  $ rtauargus.decimals          : int 0 #>  $ rtauargus.hierleadstring    : chr \"@\" #>  $ rtauargus.import            : logi FALSE #>  $ rtauargus.is_tabular        : logi TRUE #>  $ rtauargus.linked            : logi FALSE #>  $ rtauargus.missing           : chr \"\" #>  $ rtauargus.missing_dir       : chr \"stop\" #>  $ rtauargus.output_options    : chr \"\" #>  $ rtauargus.output_type       : chr \"4\" #>  $ rtauargus.response_var      : chr \"<freq>\" #>  $ rtauargus.separator         : chr \",\" #>  $ rtauargus.show_batch_console: logi FALSE #>  $ rtauargus.tauargus_exe      : chr \"Y:/Logiciels/TauArgus/TauArgus.exe\" #>  $ rtauargus.totcode           : chr \"Total\" #>  $ rtauargus.weighted          : logi TRUE  # resets everything reset_rtauargus_options() str(rtauargus_options()) #> List of 15 #>  $ rtauargus.decimals          : int 0 #>  $ rtauargus.hierleadstring    : chr \"@\" #>  $ rtauargus.import            : logi FALSE #>  $ rtauargus.is_tabular        : logi TRUE #>  $ rtauargus.linked            : logi FALSE #>  $ rtauargus.missing           : chr \"\" #>  $ rtauargus.missing_dir       : chr \"stop\" #>  $ rtauargus.output_options    : chr \"\" #>  $ rtauargus.output_type       : chr \"4\" #>  $ rtauargus.response_var      : chr \"<freq>\" #>  $ rtauargus.separator         : chr \",\" #>  $ rtauargus.show_batch_console: logi FALSE #>  $ rtauargus.tauargus_exe      : chr \"Y:/Logiciels/TauArgus/TauArgus.exe\" #>  $ rtauargus.totcode           : chr \"Total\" #>  $ rtauargus.weighted          : logi FALSE"},{"path":"https://inseefrlab.github.io/rtauargus/reference/rtauargus_plus.html","id":null,"dir":"Reference","previous_headings":"","what":"Mass protection — rtauargus_plus","title":"Mass protection — rtauargus_plus","text":"Optimization function link{rtauargus} large number crossovers (parameters).  (Optimisation de la fonction micro_rtauargus() pour un grand nombre de croisements (ayant tous les mêmes paramètres).)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/rtauargus_plus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mass protection — rtauargus_plus","text":"","code":"rtauargus_plus(   grp_size = 5,   microdata,   explanatory_vars,   safety_rules,   suppress,   ... )"},{"path":"https://inseefrlab.github.io/rtauargus/reference/rtauargus_plus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mass protection — rtauargus_plus","text":"grp_size number tables per Tau-Argus call (integer 1 10).  (nombre de tableaux par appel de Tau-Argus (un entier compris entre 1 et 10).) microdata data.frame containing microdata.  ( data.frame contenant les microdonnées.) explanatory_vars categorical variables, form list vectors. element list vector variable names forming tab. Example: list(c(\"CJ\", \"A21\"), c(\"SEX\", \"REGION\")) first table crossing CJ x A21 second table crossing SEXE x REGION. single tabulation, simple vector variables crossed accepted (need list(...)).  ( variables catégorielles, sous forme de liste de vecteurs. Chaque élément de la liste est un vecteur des noms des variables formant une tabulation. Exemple: list(c(\"CJ\", \"A21\"), c(\"SEX\", \"REGION\")) pour la première table croisant CJ x A21 et la seconde croisant SEXE x REGION Si une seule tabulation, un simple vecteur des variables à croiser est accepté (pas besoin de list(...)).) safety_rules primary secret rule(s). String Tau-Argus batch syntax. weighting treated separate parameter (specify WGT , use weighted).  ( règle(s) de secret primaire. Chaîne de caractères en syntaxe batch Tau-Argus. La pondération est traitée dans un paramètre à part (ne pas spécifier WGT ici, utiliser le paramètre weighted).) suppress secondary secret management method (Tau-Argus batch syntax). one method allowed tables. Example : \"GH(.,100)\" (dot playing role tabulation number).  méthode de gestion du secret secondaire (syntaxe batch de Tau-Argus). Une seule méthode autorisée pour tous les tableaux. Exemple \"GH(.,100)\" (le point jouant le rôle du numéro de tabulation). ... optional parameters micro_asc_rda, micro_arb run_arb. See help functions.  (paramètres optionnels pour micro_asc_rda, micro_arb et run_arb. Voir l'aide de ces fonctions.)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/rtauargus_plus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mass protection — rtauargus_plus","text":"list data.frames (secret arrays).  (Une liste de data.frames (tableaux secrétisés).)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/rtauargus_plus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mass protection — rtauargus_plus","text":"interactive mode, Tau-Argus can process 10 tabs simultaneously microdata set. batch mode, larger number crossings can specified. However, can particularly time consuming, Tau-Argus takes lot time read large text files microdata. rtauargus_plus helps improve speed execution. function splits list tabs groups size grp_size makes call micro_rtauargus group. writes asc file restricted variables actually used within group. results aggregated single list, Tau-Argus called . Modifying grp_size change result, time execution time. value around 5 (default) seems good compromise reading large asc files calling Tau-Argus often. Tau-Argus much. can adjusted according number common variables within tab group. (En mode interactif, Tau-Argus peut traiter jusqu'à 10 tabulations simultanément pour un même jeu de microdonnées. En mode batch, un nombre plus important de croisements peut être spécifié. Cependant, procéder de la sorte peut être particulièrement long, car Tau-Argus prend beaucoup de temps pour lire des fichiers texte volumineux de microdonnées. rtauargus_plus permet d'améliorer la vitesse d'exécution. La fonction découpe la liste des tabulations en groupes de taille grp_size et effectue un appel à micro_rtauargus pour chaque groupe. Elle écrit un fichier asc restreint aux seules variables effectivement utilisées au sein d'un groupe. Les résultats sont ensuite agrégés en une unique liste, comme si Tau-Argus n'avait été appelé qu'une seule fois. Modifier grp_size ne changera pas le résultat, seulement le temps d'exécution. Une valeur autour de 5 (défaut) semble être un bon compromis entre une lecture de fichiers asc trop volumineux et un nombre d'appels à Tau-Argus trop important. Elle peut être ajustée en fonction du nombre de variables communes à l'intérieur de chaque groupe de tabulations.)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/rtauargus_plus.html","id":"limits-in-relation-to-the-function-micro-rtauargus","dir":"Reference","previous_headings":"","what":"Limits in relation to the function micro_rtauargus","title":"Mass protection — rtauargus_plus","text":"return speed execution, crossings must characteristics (primary secret rules, secondary secret method, secondary secret, weighting variable, etc.). parameters safety_rules, supress, ..., must therefore contain unique value. Moreover, possible specify asc_filename, rda_filename, arb_filename output_names retrieve intermediate files. files written temporary folder (overwritten new group). Therefore, specifying import = FALSE irrelevant ignored. data must data.frame (asc rda files allowed). linked option used, link effective within group tabs. (En contrepartie de la vitesse d'exécution, les croisements doivent avoir les mêmes caractéristiques (mêmes règles de secret primaire, même méthode de secret secondaire, même variable de pondération, etc.). Les paramètres safety_rules, supress, ..., doivent donc contenir une valeur unique. De plus, il n'est pas possible de spécifier asc_filename, rda_filename, arb_filename ou output_names pour récupérer les fichiers intermédiaires. Ces fichiers seront écrits dans un dossier temporaire (et écrasés à chaque nouveau groupe). Par conséquent, spécifier import = FALSE est sans objet et sera ignoré. Les données doivent obligatoirement être un data.frame (fichiers asc et rda pas autorisés). Si l'option linked est utilisée, la liaison ne sera effective qu'à l'intérieur de chaque groupe de tabulations.)","code":""},{"path":[]},{"path":"https://inseefrlab.github.io/rtauargus/reference/rtauargus_plus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mass protection — rtauargus_plus","text":"","code":"if (FALSE) { # \\dontrun{ # example of ?rtauargus, with an (artificial) repetition of the crossings rtauargus_plus(   grp_size         = 6, # (pour lancer les 12 croisements en 2 appels)   microdata        = data.frame(V1 = c(\"A\", \"A\", \"B\", \"C\", \"A\"), V2 = \"Z\"),   explanatory_vars = rep(list(\"V1\", \"V2\", c(\"V1\", \"V2\")), times = 4),   safety_rules     = \"FREQ(3,10)\",   suppress         = \"GH(.,100)\" )} # }"},{"path":"https://inseefrlab.github.io/rtauargus/reference/run_arb.html","id":null,"dir":"Reference","previous_headings":"","what":"Runs a Tau-Argus batch — run_arb","title":"Runs a Tau-Argus batch — run_arb","text":"Executes instructions contained .arb file Tau-Argus.  (Exécute les instructions contenues dans un fichier .arb pour Tau-Argus.)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/run_arb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Runs a Tau-Argus batch — run_arb","text":"","code":"run_arb(   arb_filename,   is_tabular = getOption(\"rtauargus.is_tabular\"),   missing_dir = getOption(\"rtauargus.missing_dir\"),   tauargus_exe = getOption(\"rtauargus.tauargus_exe\"),   logbook = NULL,   show_batch_console = getOption(\"rtauargus.show_batch_console\"),   verbose = TRUE,   import = getOption(\"rtauargus.import\"),   ... )"},{"path":"https://inseefrlab.github.io/rtauargus/reference/run_arb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Runs a Tau-Argus batch — run_arb","text":"arb_filename name batch file execute.  (nom du fichier batch à exécuter.) is_tabular boolean, data already tabulated  (booléen, si les données sont déja tabulées ou non) missing_dir folders results written results exist (\"stop\" trigger error, \"create\" create missing folders).  (action si les dossiers où seront écrits les résultats n'existent pas (\"stop\" pour déclencher une erreur, \"create\" pour créer les dossiers manquants).) tauargus_exe directory name Tau-Argus software.  (répertoire et nom du logiciel Tau-Argus.) logbook name file error log saved. NULL, \"logbook.txt\" file saved working directory).  (nom du fichier où est enregistré le journal d'erreurs. Si NULL, le fichier \"logbook.txt\" sera suavegardé sur le répertoire de travail.) show_batch_console display batch progress console.  (pour afficher le déroulement du batch dans la console.) verbose boolean, display batch execution (TRUE) error messages (FALSE)  (booléen, pour afficher l'exécution du batch (si TRUE) ou uniquement les messages d'erreurs, s'il y en (si FALSE)) import import R files produced, TRUE default.  (pour importer dans R les fichiers produits, TRUE par défaut.) ... additional parameters system().  (paramètres supplémentaires pour system().)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/run_arb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Runs a Tau-Argus batch — run_arb","text":"list data.frame containing results import = TRUE (via link{import} function) ; NULL otherwise.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/run_arb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Runs a Tau-Argus batch — run_arb","text":"argument arb_filename required, necessary information present file. function package runs Tau-Argus. therefore requires software accessible workstation. location TauArgus.exe program defined globally loading package. fact, argument tauargus_exe normally specified (except override global option time execution function). Checks made actual launching Tau-Argus: existence software computer, asc rda files, folders write results, variables used (crossings, response variable) response variable) metadata (rda file). (Seul l’argument arb_filename est obligatoire, car toutes les informations nécessaires sont présentes dans ce fichier. Il s'agit de la seule fonction du package qui exécute Tau-Argus. Elle nécessite donc que le logiciel soit accessible depuis le poste de travail. L'emplacement du programme TauArgus.exe est défini de manière globale au chargement du package. De fait, l'argument tauargus_exe n'aura normalement pas à être spécifié (sauf pour surcharger l'option globale le temps de l'exécution de la fonction). Des vérifications sont effectuées avant le lancement effectif de Tau-Argus : existence du logiciel sur le poste, des fichiers asc et rda, des dossiers où écrire les résultats, des variables à utiliser (croisements, variable de réponse) dans les métadonnées (fichier rda).)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/run_arb.html","id":"see-also","dir":"Reference","previous_headings":"","what":"See also","title":"Runs a Tau-Argus batch — run_arb","text":"function micro_rtauargus(), uses function inherits parameters.  (La fonction micro_rtauargus(), qui utilise cette fonction et hérite de ses paramètres.)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/run_arb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Runs a Tau-Argus batch — run_arb","text":"","code":"if (FALSE) { # \\dontrun{  micro_arb(\"my_batch.arb\") } # }"},{"path":"https://inseefrlab.github.io/rtauargus/reference/sp_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the result of dimension reduction to be directly usable in rtauargus — sp_format","title":"Change the result of dimension reduction to be directly usable in rtauargus — sp_format","text":"Change result dimension reduction directly usable rtauargus","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/sp_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the result of dimension reduction to be directly usable in rtauargus — sp_format","text":"","code":"sp_format(res, dfs_name, sep, totcode, hrcfiles)"},{"path":"https://inseefrlab.github.io/rtauargus/reference/sp_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the result of dimension reduction to be directly usable in rtauargus — sp_format","text":"res result variable merging composed name_non_changed_vars, list lists tables, list hierarchical files, list subtotals associated files, list vectors variables vector variables depending base size dataframes dfs_name name entered dataframes sep character totcode character named vector hrcfiles character named vector","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/sp_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change the result of dimension reduction to be directly usable in rtauargus — sp_format","text":"list containing: tabs: named list 3-dimensional dataframes nested hierarchies alt_hrc: named list hrc specific variables created merging go dimension 3 alt_totcode: named list totals specific variables created merging go dimension 3 vars: categorical variables output dataframes sep: separator used link variables totcode: named vector totals categorical variables hrcfiles: named vector hrc categorical variables (except merged one) fus_vars: named vector vectors representing merged variables dimension reduction","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/sp_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the result of dimension reduction to be directly usable in rtauargus — sp_format","text":"","code":"library(dplyr) data <- expand.grid(   ACT = c(\"Total\", \"A\", \"B\", \"A1\", \"A2\", \"B1\", \"B2\"),   GEO = c(\"Total\", \"G1\", \"G2\"),   SEX = c(\"Total\", \"F\", \"M\"),   AGE = c(\"Total\", \"AGE1\", \"AGE2\"),   stringsAsFactors = FALSE ) %>%   as.data.frame()  data <- data %>% mutate(VALUE = 1)  hrc_act <- \"hrc_ACT.hrc\"  sdcHierarchies::hier_create(root = \"Total\", nodes = c(\"A\",\"B\")) %>%   sdcHierarchies::hier_add(root = \"A\", nodes = c(\"A1\",\"A2\")) %>%   sdcHierarchies::hier_add(root = \"B\", nodes = c(\"B1\",\"B2\")) %>%   sdcHierarchies::hier_convert(as = \"argus\") %>%   slice(-1) %>%   mutate(levels = substring(paste0(level,name),3)) %>%   select(levels) %>%   write.table(file = hrc_act, row.names = FALSE, col.names = FALSE, quote = FALSE)  # Results of the function res1 <- from_4_to_3(   dfs = data,   dfs_name = \"tab\",   totcode = c(SEX = \"Total\", AGE = \"Total\", GEO = \"Total\", ACT = \"Total\"),   hrcfiles = c(ACT = hrc_act),   sep_dir = TRUE,   hrc_dir = \"output\" )  res <- sp_format(res1,         dfs_name = \"tab\",         sep = \"_\",         totcode = c(SEX=\"Total\",AGE=\"Total\",                    GEO=\"Total\", ACT=\"Total\"),        hrcfiles = c(ACT = hrc_act)        )"},{"path":"https://inseefrlab.github.io/rtauargus/reference/split_dataframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a Data Frame Based on a Chosen Variable — split_dataframe","title":"Split a Data Frame Based on a Chosen Variable — split_dataframe","text":"function splits data frame list smaller data frames based specified variable (var) associated hierarchical variable (hrc_var). function handles cases hrc_var contains character values missing, ensuring independent hierarchical groupings managed appropriately.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/split_dataframe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a Data Frame Based on a Chosen Variable — split_dataframe","text":"","code":"split_dataframe(tab, var, hrc_var)"},{"path":"https://inseefrlab.github.io/rtauargus/reference/split_dataframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a Data Frame Based on a Chosen Variable — split_dataframe","text":"tab data frame split. var variable base split . hrc_var hierarchical variable associated var. hrc_var present, data frame first split values; otherwise, split directly var.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/split_dataframe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a Data Frame Based on a Chosen Variable — split_dataframe","text":"list data frames (list_diff), element corresponds grouping determined var /hrc_var.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/split_dataframe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a Data Frame Based on a Chosen Variable — split_dataframe","text":"","code":"if (FALSE) { # \\dontrun{ # Example data tab <- data.frame(   id = 1:6,   var = c(\"A\", \"A\", \"B\", \"B\", \"C\", \"C\"),   hrc_var = c(NA, \"H1\", \"H1\", \"H2\", NA, NA),   value = c(10, 20, 30, 40, 50, 60) )  # Split by 'var' and 'hrc_var' list_diff <- split_dataframe(tab, \"var\", \"hrc_var\")  # View the structure of the result str(list_diff) } # }"},{"path":"https://inseefrlab.github.io/rtauargus/reference/split_in_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a Data Frame into Clusters of Linked Tables — split_in_clusters","title":"Split a Data Frame into Clusters of Linked Tables — split_in_clusters","text":"function splits data frame list data frames (clusters), cluster represents group linked tables. Tables grouped based field variable corresponding indicator values. hierarchical relationships specified hrc_* columns also considered.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/split_in_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a Data Frame into Clusters of Linked Tables — split_in_clusters","text":"","code":"split_in_clusters(list_hrc_identified)"},{"path":"https://inseefrlab.github.io/rtauargus/reference/split_in_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a Data Frame into Clusters of Linked Tables — split_in_clusters","text":"list_hrc_identified list returned identify_hrc function. first element list must data frame containing variables: field: grouping variable. hrc_field: hierarchical counterpart field. indicator: variable used link tables. hrc_indicator: hierarchical counterpart indicator.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/split_in_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a Data Frame into Clusters of Linked Tables — split_in_clusters","text":"named list data frames. element list corresponds cluster linked tables, names list elements reflect hierarchical grouping path.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/split_in_clusters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split a Data Frame into Clusters of Linked Tables — split_in_clusters","text":"function handles cases field variable constant across data frame field varies, case data frame split field split indicator hrc_indicator.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/split_in_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a Data Frame into Clusters of Linked Tables — split_in_clusters","text":"","code":"if (FALSE) { # \\dontrun{ data(metadata_pizza_lettuce)  metadata_pizza_lettuce_long <- wide_to_long(metadata_pizza_lettuce) # Identify hierarchical relationships list_hrc_identified <- identify_hrc(metadata_pizza_lettuce_long) # Split into clusters list_split <- split_in_clusters(list_hrc_identified)  # View the structure of the result str(list_split) } # }"},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_arb.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a batch file (.arb) for tabular data in order to run Tau Argus — tab_arb","title":"Creates a batch file (.arb) for tabular data in order to run Tau Argus — tab_arb","text":"Function check asc rda files exists (Crée un fichier batch (.arb) pour données tabulées exécutable par Tau-Argus en ligne de commande. La fonction ne vérifie pas si les fichiers asc et rda existent.)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_arb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a batch file (.arb) for tabular data in order to run Tau Argus — tab_arb","text":"","code":"tab_arb(   arb_filename = NULL,   tab_filename,   rda_filename = NULL,   hst_filename = NULL,   explanatory_vars,   value = getOption(\"rtauargus.response_var\"),   safety_rules,   suppress,   separator = getOption(\"rtauargus.separator\"),   output_names = NULL,   output_type = getOption(\"rtauargus.output_type\"),   output_options = getOption(\"rtauargus.output_options\"),   gointeractive = FALSE )"},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_arb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a batch file (.arb) for tabular data in order to run Tau Argus — tab_arb","text":"arb_filename path arb filename, unspecified, creates temporary file  (nom du fichier arb généré (avec extension). Si non renseigné, un fichier temporaire.) tab_filename path tab_filename. (nom du fichier .tab (avec extension).) rda_filename rda file name (.rda extension)  nom du fichier rda (avec extension) hst_filename Apriori file name, syntax detailed , Example : hst_filename = \"path_to_file/apriori.hst\" (fichier(s) d'informations priori. Voir ci-dessous pour la syntaxe. Exemple : hst_filename = \"path_to_file/apriori.hst\") explanatory_vars Explanatory vars vector Example : c(\"CJ\", \"A21\") tabular CJ x A21  ( variables catégorielles, sous forme de vecteur. Exemple : c(\"CJ\", \"A21\") pour le premier Pour un tableau croisant CJ x A21) value Colname response variable tabular \"<freq>\". frequency table  (Nom de la variable de réponse dans le tableau \"<freq>\". Permet de tariter les tableaux de fréquence) safety_rules Rules primary suppression Argus syntax, primary suppression dealt apriori file specify manual safety range :\"MAN(10)\" example. ( Règle(s) de secret primaire. Chaîne de caractères en syntaxe batch Tau-Argus. Si le secret primaire été traité dans un fichier d'apriori : utiliser \"MAN(10)\") suppress Algortihm secondary suppression (Tau-Argus batch syntax), parameters . ( Algorithme de gestion du secret secondaire (syntaxe batch de Tau-Argus), ainsi que les potentiels paramètres associés) separator Character used separator .tab file.  (Caractère utilisé en tant que separateur dans le fichier .tab) output_names output file name (nom du fichier en sortie.) output_type Type output file (Argus codification) default \"2\" (csv pivot-table). SBS files use \"4\" (Format des fichiers en sortie (codification Tau-Argus). Valeur par défaut du package : \"2\" (csv pivot-table). Pour le format SBS utiliser \"4\") output_options Additionnal parameter output, default : code\"+\" (print Status). specify options : \"\". (Options supplémentaires des fichiers en sortie. Valeur par défaut du package : \"+\" (affichage du statut). Pour ne spécifier aucune option, \"\".) gointeractive Boolean, TRUE open Tau-Argus window launch batch (FALSE default).  (Possibilité de lancer le batch depuis le menu de Tau-Argus (FALSE par défaut).)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_arb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a batch file (.arb) for tabular data in order to run Tau Argus — tab_arb","text":"list containing two elements : arb file name output name (usefull name generated randomly)  (Une liste de deux éléments : le nom du fichier arb, le nom fichiers en sortie (utile pour récupérer les noms générés aléatoirement).)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_arb.html","id":"syntaxe","dir":"Reference","previous_headings":"","what":"Syntaxe","title":"Creates a batch file (.arb) for tabular data in order to run Tau Argus — tab_arb","text":"tabular data, function secures one table time#' Unless specific details, use syntax Tau-Argus manual  Sauf mention contraire, utiliser la syntaxe mentionnée dans la documentation de Tau-Argus. Syntax pour suppress : First parameter table number, case always 1 (Pour les données tabulées la fonction traite un tableau à la fois Syntaxe spéciale pour suppress : le premier paramètre dans la syntaxe Tau-Argus est le numéro du tableau. Dans le cas de cette fonction ce sera toujours 1)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_arb.html","id":"informations-hst-filename","dir":"Reference","previous_headings":"","what":"Informations hst_filename","title":"Creates a batch file (.arb) for tabular data in order to run Tau Argus — tab_arb","text":"possible add apriori file (.hst) tabular, can generated table_rda() function. options mandatory. modify default value use vector .hst file path first element complete parameters : sep separator, ignore_err IgnoreError exp_triv ExpandTrivial. (Il est possible de fournir un fichier apriori (.hst) pour un tableau, il peut être fourni par la fonction table_rda() Exemple : hst_filename = \"mon_chemin/apriori.hst\" Les options supplémentaires sont facultatives. Pour modifier les valeurs par défaut, passer une liste ayant comme premier élément le(s) fichier(s) hst et compléter avec les éléments portant les noms sep pour le séparateur, ignore_err pour IgnoreError et exp_triv pour ExpandTrivial. Comme pour les noms de fichiers, spécifier une seule valeur par paramètre ou autant de valeurs que de tabulations.)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_arb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a batch file (.arb) for tabular data in order to run Tau Argus — tab_arb","text":"","code":"if (FALSE) { # \\dontrun{ # creating arb file infos_arb <- tab_arb(   arb_filename = \"path/tab1.arb\",   tab_filename = \"path/tab1.tab\",   rda_filename = \"path/tab1.rda\",   explanatory_vars = c(\"REGION\", \"CJ\"),   value = \"CA\",   safety_rules = \"NK(1,85)|FREQ(3,10)\",   suppress = \"GH(1,100)\",   output_names = \"path/tab1.csv\",   output_options = \"AS+SE+\",   output_type = \"4\" ) # show the content of the file in console # visualisation du contenu du fichier dans la console file.show(infos_arb$arb_filename, pager = \"console\") } # }"},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_multi_manager.html","id":null,"dir":"Reference","previous_headings":"","what":"Manages the secondary secret of a list of tables — tab_multi_manager","title":"Manages the secondary secret of a list of tables — tab_multi_manager","text":"Manages secondary secret list tables","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_multi_manager.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manages the secondary secret of a list of tables — tab_multi_manager","text":"","code":"tab_multi_manager(   list_tables,   list_explanatory_vars,   dir_name = NULL,   hrc = NULL,   alt_hrc = NULL,   totcode = getOption(\"rtauargus.totcode\"),   alt_totcode = NULL,   value = \"value\",   freq = \"freq\",   secret_var = \"is_secret_prim\",   cost_var = NULL,   suppress = \"MOD(1,5,1,0,0)\",   ip_start = 10,   ip_end = 0,   num_iter_max = 10,   split_tab = FALSE,   nb_tab_option = \"smart\",   limit = 14700,   ... )"},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_multi_manager.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manages the secondary secret of a list of tables — tab_multi_manager","text":"list_tables named list data.frame data.table representing tables protect list_explanatory_vars named list character vectors explanatory variables table mentionned list_tables. Names list list tables. dir_name string indicated path directory save files (.rda, .hst, .txt, .arb, .csv) generated function. hrc Informations hierarchical variables (see section 'Hierarchical variables').  (Informations sur les variables hiérarchiques (voir section 'Hierarchical variables').) (Caractère qui, répété n fois, indique que la valeur est à n niveaux de profondeur dans la hiérarchie.) alt_hrc named list alternative hierarchies (useful non nested-hierarchies) totcode Code(s) represent total categorical variable (see section 'Specific parameters' parameter's syntax). unspecified variable(neither default explicitly) set  rtauargus.totcode.  (Code(s) pour le total d'une variable catégorielle (voir section 'Specific parameters' pour la syntaxe de ce paramètre). Les variables non spécifiées (ni par défaut, ni explicitement) se verront attribuer la valeur de rtauargus.totcode.) alt_totcode named list alternative codes value Name column containing value cells.  (Nom de la colonne contenant la valeur des cellules) freq Name column containing cell frequency.  (Nom de la colonne contenant les effectifs pour une cellule) secret_var Nae boolean variable specifies secret, primary : equal \"TRUE\" cell concerned secret,\"FALSE\" otherwise.  exported apriori file.  (Variable indiquant le secret  de type booléen: prend la valeur \"TRUE\" quand les cellules du tableau doivent être masquées \"FALSE\" sinon. Permet de créer un fichier d'apriori) cost_var Numeric variable allow change cost suppression cell secondary suppression, value cell default, can specified cell, fill NA cost need changed cells  (Variable numeric qui permet de changer la coût de suppression d'une cellule, pris en compte dans les algorithmes de secret secondaire.Par défaut le coût correspond à la valeur de la cellule.  peut être spécifié pour chacune des cellules, peut contenir des NA pour les coûts que l'ne souhaite pas modifier.) (nombre minimal de décimales à afficher (voir section 'Number decimals').) suppress Algortihm secondary suppression (Tau-Argus batch syntax), parameters . ( Algorithme de gestion du secret secondaire (syntaxe batch de Tau-Argus), ainsi que les potentiels paramètres associés) ip_start integer: Interval protection level apply first treatment table ip_end integer: Interval protection level apply treatments num_iter_max integer: Maximum treatments table (default 10) split_tab boolean, whether reduce dimension 3 treating table dimension 4 5 (default FALSE) nb_tab_option strategy follow choose variables automatically splitting: \"min\": minimize number tables; \"max\": maximize number tables; \"smart\": minimize number tables constraint row count. limit numeric, used choose variable merge (nb_tab_option = 'smart') split table number row limit order avoid tauargus failures ... arguments tab_rtauargus2()","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_multi_manager.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manages the secondary secret of a list of tables — tab_multi_manager","text":"original list tables. Secret Results iteration added table. example, result first iteration called 'is_secret_1' table. boolean variable, whether cell masked .","code":""},{"path":[]},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_multi_manager.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manages the secondary secret of a list of tables — tab_multi_manager","text":"","code":"library(rtauargus) library(dplyr) data(turnover_act_size) data(turnover_act_cj) data(activity_corr_table)  #0-Making hrc file of business sectors ---- hrc_file_activity <- activity_corr_table %>%   write_hrc2(file_name = \"hrc/activity\")  #1-Prepare data ---- #Indicate whether each cell complies with the primary rules #Boolean variable created is TRUE if the cell doesn't comply. #Here the frequency rule is freq in (0;3) #and the dominance rule is NK(1,85) list_data_2_tabs <- list(   act_size = turnover_act_size,   act_cj = turnover_act_cj ) %>% purrr::map(   function(df){     df %>%       mutate(         is_secret_freq = N_OBS > 0 & N_OBS < 3,         is_secret_dom = ifelse(MAX == 0, FALSE, MAX/TOT>0.85),         is_secret_prim = is_secret_freq | is_secret_dom       )   } ) if (FALSE) { # \\dontrun{ options(   rtauargus.tauargus_exe =     \"Y:/Logiciels/TauArgus/TauArgus4.2.3/TauArgus.exe\" ) res_1 <- tab_multi_manager(   list_tables = list_data_2_tabs,   list_explanatory_vars = list(     act_size = c(\"ACTIVITY\", \"SIZE\"),     act_cj = c(\"ACTIVITY\", \"CJ\")   ),   hrc = c(ACTIVITY = hrc_file_activity),   dir_name = \"tauargus_files\",   value = \"TOT\",   freq = \"N_OBS\",   secret_var = \"is_secret_prim\",   totcode =  \"Total\" )   # With the reduction dimensions feature  data(\"datatest1\") data(\"datatest2\")  datatest2b <- datatest2 %>%   filter(cj == \"Total\", treff == \"Total\", type_distrib == \"Total\") %>%   select(-cj, -treff, -type_distrib)  str(datatest2b)  res <- tab_multi_manager(   list_tables = list(d1 = datatest1, d2 = datatest2b),     list_explanatory_vars = list(         d1 = names(datatest1)[1:4],         d2 = names(datatest2b)[1:2]     ),  dir_name = \"tauargus_files\",  value = \"pizzas_tot_abs\",  freq = \"nb_obs_rnd\",  secret_var = \"is_secret_prim\",  totcode =  \"Total\",  split_tab = TRUE )  } # }"},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_rda.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates rda files from tabular data — tab_rda","title":"Creates rda files from tabular data — tab_rda","text":"Creates apriori file primary secret, tabular file (tab) metadata file (rda) tabulated data additional information.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_rda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates rda files from tabular data — tab_rda","text":"","code":"tab_rda(   tabular,   tab_filename = NULL,   rda_filename = NULL,   hst_filename = NULL,   explanatory_vars = NULL,   secret_var = NULL,   cost_var = NULL,   hrc = NULL,   totcode = getOption(\"rtauargus.totcode\"),   value = NULL,   freq = NULL,   maxscore = NULL,   ip = NULL,   maxscore_2 = NULL,   maxscore_3 = NULL,   decimals = getOption(\"rtauargus.decimals\"),   hierleadstring = getOption(\"rtauargus.hierleadstring\"),   codelist = NULL,   separator = getOption(\"rtauargus.separator\"),   secret_no_pl = NULL )"},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_rda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates rda files from tabular data — tab_rda","text":"tabular data.frame contains tabulated data additional boolean variable indicates primary secret type boolean  ( data.frame contenant les données tabulées et une variable supplémentaire indiquant le secret primaire de type booléen.) tab_filename tab file name (.tab extension)  nom du fichier tab (avec extension .tab) rda_filename rda file name (.rda extension)  nom du fichier rda (avec extension) hst_filename hst file name (.hst extension)  nom du fichier hst (avec extension) explanatory_vars Vector explanatory variables  Variables catégorielles, sous forme  de vecteurs  Example : c(\"A21\", \"TREFF\", \"REG\") table crossing A21 x TREFF x REG (Variable indiquant le secret primaire de type booléen: prend la valeur \"TRUE\" quand les cellules du tableau doivent être masquées par le secret primaire, \"FALSE\" sinon. Permet de créer un fichier d'apriori) secret_var Nae boolean variable specifies secret, primary : equal \"TRUE\" cell concerned secret,\"FALSE\" otherwise.  exported apriori file.  (Variable indiquant le secret  de type booléen: prend la valeur \"TRUE\" quand les cellules du tableau doivent être masquées \"FALSE\" sinon. Permet de créer un fichier d'apriori) cost_var Numeric variable allow change cost suppression cell secondary suppression, value cell default, can specified cell, fill NA cost need changed cells  (Variable numeric qui permet de changer la coût de suppression d'une cellule, pris en compte dans les algorithmes de secret secondaire.Par défaut le coût correspond à la valeur de la cellule.  peut être spécifié pour chacune des cellules, peut contenir des NA pour les coûts que l'ne souhaite pas modifier.) (nombre minimal de décimales à afficher (voir section 'Number decimals').) hrc Informations hierarchical variables (see section 'Hierarchical variables').  (Informations sur les variables hiérarchiques (voir section 'Hierarchical variables').) (Caractère qui, répété n fois, indique que la valeur est à n niveaux de profondeur dans la hiérarchie.) totcode Code(s) represent total categorical variable (see section 'Specific parameters' parameter's syntax). unspecified variable(neither default explicitly) set  rtauargus.totcode.  (Code(s) pour le total d'une variable catégorielle (voir section 'Specific parameters' pour la syntaxe de ce paramètre). Les variables non spécifiées (ni par défaut, ni explicitement) se verront attribuer la valeur de rtauargus.totcode.) value Name column containing value cells.  (Nom de la colonne contenant la valeur des cellules) freq Name column containing cell frequency.  (Nom de la colonne contenant les effectifs pour une cellule) maxscore Name column containing, value largest contributor cell.  (Nom de la colonne contenant la valeur du plus gros contributeur d'une cellule) ip Value safety margin % (must integer). (Valeur pour les intervalles de protection en %, doit être entier ) maxscore_2 Name column containing, value second largest contributor cell.  (Nom de la colonne contenant la valeur du deuxième plus gros contributeur d'une cellule) maxscore_3 Name column containing, value third largest contributor cell.  (Nom de la colonne contenant la valeur du troisième plus gros contributeur d'une cellule) decimals Minimum number decimals display (see section 'Number decimals') hierleadstring character used indicate depth code hierarchy. codelist file(s) containing labels categorical variables (see section 'Specific parameters' syntax parameter).  (Fichier(s) contenant les libellés des variables catégorielles (voir section 'Specific parameters' pour la syntaxe de ce paramètre).) separator Character used separator .tab file.  (Caractère utilisé en tant que separateur dans le fichier .tab) secret_no_pl name boolean variable indicates cells protection levels applied. secret_no_pl = NULL (default), protection levels applied cell gets TRUE status secret_var.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_rda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates rda files from tabular data — tab_rda","text":"Return rda file name list (invisible). (Renvoie le nom du fichier rda sous forme de liste (de manière invisible).)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_rda.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates rda files from tabular data — tab_rda","text":"Crée un fichier d'apriori pour le secret primaire, un fichier tabular (tab) et un fichier de métadonnées (rda) à partir de données tabulées et d'informations additionnelles.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_rda.html","id":"apriori-file-","dir":"Reference","previous_headings":"","what":"Apriori file","title":"Creates rda files from tabular data — tab_rda","text":"apriori file (.hst) summarizes value table concerned primary secret . file tau-argus need set primary secret . parameter secret_var indicates name primary secret variable. additional boolean variable indicates primary secret table (tabulated data), function tab_rda create apriori file format conforming tauargus. Le fichier d'apriori (.hst) récapitule pour chaque valeurs du tableau si elles sont concernées par le secret primaire ou non. Avec ce fichier tau-argus n'aura plus besoin de poser le secret primaire lui même, il se basera sur le fichier d'apriori pour le faire. Le paramètre secret_var indique le nom de la variable du secret primaire. Si l'rajoute cette variable supplémentaire indiquant le secret primaire (de type booléen) au tableau de données tabulées, la fonction tab_rda permet de créer un fichier d'apriori au format conforme pour tauargus.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_rda.html","id":"specific-parameters","dir":"Reference","previous_headings":"","what":"Specific parameters","title":"Creates rda files from tabular data — tab_rda","text":"parameters totcode, codelist must given form vector indicating value take variable. names elements vector give variable concerned elements vector give value parameter Tau-Argus. unnamed element set default value variable. (Les paramètres totcode,  et codelist sont à renseigner sous la forme d'un vecteur indiquant la valeur à prendre pour chaque variable. Les noms des éléments du vecteur donnent la variable concernée, les éléments du vecteur donnent la valeur du paramètre pour Tau-Argus. Un élément non nommé constituera la valeur par défaut, qui sera attribuée à toutes les variables pouvant prendre ce paramètre.) example : totcode = \"global\" : writes <TOTCODE> \"global\" explanatory vars totcode = c(\"global\", size=\"total\", income=\"total\") : <TOTCODE> \"global\" variable except size income assigned <TOTCODE> \"total\" default :  \"Total\" totcode = \"global\" : écrit <TOTCODE> \"global\" pour toutes les variables catégorielles totcode = c(\"global\", size=\"total\", income=\"total\") : <TOTCODE> \"global\" pour toutes les variables catégorielles sauf  size income qui se verront affecter le total : <TOTCODE> \"total\" Par defaut :  \"Total\"","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_rda.html","id":"hierarchical-variables","dir":"Reference","previous_headings":"","what":"Hierarchical variables","title":"Creates rda files from tabular data — tab_rda","text":"Parameter hrc syntax totcode codelist (named vector containing many elements variables describe). Hierarchy defined separate hrc file (hiercodelist). can written function link{write_hrc2}. function expects location file (possible hierleadstring differs default option package : @. path existing file explicitly given. elements vector parameter must named (name variable), even one element. emphExample :c(category=\"category.hrc\") (Le paramètre hrc obéit aux mêmes règles de syntaxe que totcode et codelist (vecteur nommé contenant autant d'éléments que de variables à décrire). La hiérarchie est définie dans un fichier hrc à part (hiercodelist) qui peut être écrit à l'aide de la fonction write_hrc2(). La fonction attend l'emplacement de ce fichier (et un éventuel hierleadstring s'il diffère de l'option par défaut du package). Le chemin vers le fichier existant est explicitement donné. Les éléments du vecteur en paramètre doivent nommés (avec le nom de la variable), même s'il n'y qu'un seul élément. Exemple :c(category=\"category.hrc\"))","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_rda.html","id":"number-of-decimals","dir":"Reference","previous_headings":"","what":"Number of decimals","title":"Creates rda files from tabular data — tab_rda","text":"Parameter decimals indicates minimum number decimal places include output file (whatever number decimals actually present tabular). applies real variables (double) integer variables. add zeros integer variable, convert .double beforehand. (Le paramètre decimals indique le nombre minimal de décimales à faire figurer dans le fichier en sortie (quel que soit le nombre de décimales effectivement présent dans tabular). Il s'applique à toutes les variables réelles (double) mais pas aux variables entières (integer). Pour ajouter des zéros à une variable entière, la convertir avec .double au préalable.)","code":""},{"path":[]},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_rtauargus.html","id":null,"dir":"Reference","previous_headings":"","what":"Protect one table by suppressing cells with Tau-Argus — tab_rtauargus","title":"Protect one table by suppressing cells with Tau-Argus — tab_rtauargus","text":"function prepares files needed Tau-Argus launches software good settings gets back result.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_rtauargus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Protect one table by suppressing cells with Tau-Argus — tab_rtauargus","text":"","code":"tab_rtauargus(   tabular,   explanatory_vars,   files_name = NULL,   dir_name = NULL,   totcode = getOption(\"rtauargus.totcode\"),   hrc = NULL,   secret_var = NULL,   secret_no_pl = NULL,   cost_var = NULL,   value = \"value\",   freq = \"freq\",   ip = 10,   maxscore = NULL,   suppress = \"MOD(1,5,1,0,0)\",   safety_rules = paste0(\"MAN(\", ip, \")\"),   show_batch_console = FALSE,   output_type = 4,   output_options = \"\",   unif_labels = TRUE,   split_tab = FALSE,   nb_tab_option = \"smart\",   limit = 14700,   ... )"},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_rtauargus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Protect one table by suppressing cells with Tau-Argus — tab_rtauargus","text":"tabular data.frame contains tabulated data additional boolean variable indicates primary secret type boolean  ( data.frame contenant les données tabulées et une variable supplémentaire indiquant le secret primaire de type booléen.) explanatory_vars Vector explanatory variables  Variables catégorielles, sous forme  de vecteurs  Example : c(\"A21\", \"TREFF\", \"REG\") table crossing A21 x TREFF x REG (Variable indiquant le secret primaire de type booléen: prend la valeur \"TRUE\" quand les cellules du tableau doivent être masquées par le secret primaire, \"FALSE\" sinon. Permet de créer un fichier d'apriori) files_name string used name files needed process. files name, extension different. dir_name string indicated path directory save files (.rda, .hst, .txt, .arb, .csv) generated function. totcode Code(s) represent total categorical variable (see section 'Specific parameters' parameter's syntax). unspecified variable(neither default explicitly) set  rtauargus.totcode.  (Code(s) pour le total d'une variable catégorielle (voir section 'Specific parameters' pour la syntaxe de ce paramètre). Les variables non spécifiées (ni par défaut, ni explicitement) se verront attribuer la valeur de rtauargus.totcode.) hrc Informations hierarchical variables (see section 'Hierarchical variables').  (Informations sur les variables hiérarchiques (voir section 'Hierarchical variables').) (Caractère qui, répété n fois, indique que la valeur est à n niveaux de profondeur dans la hiérarchie.) secret_var Nae boolean variable specifies secret, primary : equal \"TRUE\" cell concerned secret,\"FALSE\" otherwise.  exported apriori file.  (Variable indiquant le secret  de type booléen: prend la valeur \"TRUE\" quand les cellules du tableau doivent être masquées \"FALSE\" sinon. Permet de créer un fichier d'apriori) secret_no_pl name boolean variable indicates cells protection levels applied. secret_no_pl = NULL (default), protection levels applied cell gets TRUE status secret_var. cost_var Numeric variable allow change cost suppression cell secondary suppression, value cell default, can specified cell, fill NA cost need changed cells  (Variable numeric qui permet de changer la coût de suppression d'une cellule, pris en compte dans les algorithmes de secret secondaire.Par défaut le coût correspond à la valeur de la cellule.  peut être spécifié pour chacune des cellules, peut contenir des NA pour les coûts que l'ne souhaite pas modifier.) (nombre minimal de décimales à afficher (voir section 'Number decimals').) value Name column containing value cells.  (Nom de la colonne contenant la valeur des cellules) freq Name column containing cell frequency.  (Nom de la colonne contenant les effectifs pour une cellule) ip Value safety margin % (must integer). (Valeur pour les intervalles de protection en %, doit être entier ) maxscore Name column containing, value largest contributor cell.  (Nom de la colonne contenant la valeur du plus gros contributeur d'une cellule) suppress Algortihm secondary suppression (Tau-Argus batch syntax), parameters . ( Algorithme de gestion du secret secondaire (syntaxe batch de Tau-Argus), ainsi que les potentiels paramètres associés) safety_rules Rules primary suppression Argus syntax, primary suppression dealt apriori file specify manual safety range :\"MAN(10)\" example. ( Règle(s) de secret primaire. Chaîne de caractères en syntaxe batch Tau-Argus. Si le secret primaire été traité dans un fichier d'apriori : utiliser \"MAN(10)\") show_batch_console display batch progress console.  (pour afficher le déroulement du batch dans la console.) output_type Type output file (Argus codification) default \"2\" (csv pivot-table). SBS files use \"4\" (Format des fichiers en sortie (codification Tau-Argus). Valeur par défaut du package : \"2\" (csv pivot-table). Pour le format SBS utiliser \"4\") output_options Additionnal parameter output, default : code\"+\" (print Status). specify options : \"\". (Options supplémentaires des fichiers en sortie. Valeur par défaut du package : \"+\" (affichage du statut). Pour ne spécifier aucune option, \"\".) unif_labels boolean, explanatory variables standardized split_tab boolean, whether reduce dimension 3 treating table dimension 4 5 (default FALSE) nb_tab_option strategy follow choose variables automatically splitting: \"min\": minimize number tables; \"max\": maximize number tables; \"smart\": minimize number tables constraint row count. limit numeric, used choose variable merge (nb_tab_option = 'smart') split table number row limit order avoid tauargus failures ... parameter tab_rda, tab_arb run_arb functions, relevant treatment tabular.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_rtauargus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Protect one table by suppressing cells with Tau-Argus — tab_rtauargus","text":"output_type equals 4 split_tab = FALSE, original tabular returned new column called Status, indicating status cell coming Tau-Argus : \"\" primary secret due frequency rule, \"B\" primary secret due dominance rule, \"D\" secondary secret \"V\" secret cell. split_tab = TRUE, original tabular returned new columns boolean variables indicating status cell iteration protection process get tab_multi_manager() function. TRUE denotes cell suppressed. last column final status suppression process original table. split_tab = FALSE  output_type equal 4, raw result tau-argus returned.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_rtauargus.html","id":"standardization-of-explanatory-variables-and-hierarchies","dir":"Reference","previous_headings":"","what":"Standardization of explanatory variables and hierarchies","title":"Protect one table by suppressing cells with Tau-Argus — tab_rtauargus","text":"boolean argument unif_labels useful prevent common errors using Tau-Argus. Indeed, Tau-Argus needs , within level hierarchy, labels number characters. argument set TRUE, tab_rtauargus standardizes explanatory variables prevent issue. Hierarchical explanatory variables (explanatory variables associated hrc file) modified tabular data another hrc file created relevant tabular. output, modifications removed.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_rtauargus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Protect one table by suppressing cells with Tau-Argus — tab_rtauargus","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr) data(turnover_act_size)  # Prepare data with primary secret ---- turnover_act_size <- turnover_act_size %>%   mutate(     is_secret_freq = N_OBS > 0 & N_OBS < 3,     is_secret_dom = ifelse(MAX == 0, FALSE, MAX/TOT>0.85),     is_secret_prim = is_secret_freq | is_secret_dom   )  # Make hrc file of business sectors ---- data(activity_corr_table) hrc_file_activity <- activity_corr_table %>%   write_hrc2(file_name = \"hrc/activity\")  # Compute the secondary secret ---- options(   rtauargus.tauargus_exe =     \"Y:/Logiciels/TauArgus/TauArgus4.2.3/TauArgus.exe\" )  res <- tab_rtauargus(   tabular = turnover_act_size,   files_name = \"turn_act_size\",   dir_name = \"tauargus_files\",   explanatory_vars = c(\"ACTIVITY\", \"SIZE\"),   hrc = c(ACTIVITY = hrc_file_activity),   totcode = c(ACTIVITY = \"Total\", SIZE = \"Total\"),   secret_var = \"is_secret_prim\",   value = \"TOT\",   freq = \"N_OBS\",   verbose = FALSE )  # Reduce dims feature  data(datatest1) res_dim4 <- tab_rtauargus(   tabular = datatest1,   dir_name = \"tauargus_files\",   explanatory_vars = c(\"A10\", \"treff\",\"type_distrib\",\"cj\"),   totcode = rep(\"Total\", 4),   secret_var = \"is_secret_prim\",   value = \"pizzas_tot_abs\",   freq = \"nb_obs_rnd\",   split_tab = TRUE ) } # }"},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_rtauargus2.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper of tab_rtauargus adapted for tab_multi_manager function. — tab_rtauargus2","title":"Wrapper of tab_rtauargus adapted for tab_multi_manager function. — tab_rtauargus2","text":"Wrapper tab_rtauargus adapted tab_multi_manager function.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_rtauargus2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper of tab_rtauargus adapted for tab_multi_manager function. — tab_rtauargus2","text":"","code":"tab_rtauargus2(   tabular,   files_name = NULL,   dir_name = NULL,   explanatory_vars,   totcode,   hrc = NULL,   secret_var = NULL,   secret_no_pl = NULL,   cost_var = NULL,   value = \"value\",   freq = \"freq\",   ip = 10,   suppress = \"MOD(1,5,1,0,0)\",   split_tab = TRUE,   nb_tab_option = \"smart\",   limit = 14700,   ... )"},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_rtauargus2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper of tab_rtauargus adapted for tab_multi_manager function. — tab_rtauargus2","text":"tabular data.frame contains tabulated data additional boolean variable indicates primary secret type boolean  ( data.frame contenant les données tabulées et une variable supplémentaire indiquant le secret primaire de type booléen.) files_name string used name files needed process. files name, extension different. dir_name string indicated path directory save files (.rda, .hst, .txt, .arb, .csv) generated function. explanatory_vars Vector explanatory variables  Variables catégorielles, sous forme  de vecteurs  Example : c(\"A21\", \"TREFF\", \"REG\") table crossing A21 x TREFF x REG (Variable indiquant le secret primaire de type booléen: prend la valeur \"TRUE\" quand les cellules du tableau doivent être masquées par le secret primaire, \"FALSE\" sinon. Permet de créer un fichier d'apriori) totcode Code(s) represent total categorical variable (see section 'Specific parameters' parameter's syntax). unspecified variable(neither default explicitly) set  rtauargus.totcode.  (Code(s) pour le total d'une variable catégorielle (voir section 'Specific parameters' pour la syntaxe de ce paramètre). Les variables non spécifiées (ni par défaut, ni explicitement) se verront attribuer la valeur de rtauargus.totcode.) hrc Informations hierarchical variables (see section 'Hierarchical variables').  (Informations sur les variables hiérarchiques (voir section 'Hierarchical variables').) (Caractère qui, répété n fois, indique que la valeur est à n niveaux de profondeur dans la hiérarchie.) secret_var Nae boolean variable specifies secret, primary : equal \"TRUE\" cell concerned secret,\"FALSE\" otherwise.  exported apriori file.  (Variable indiquant le secret  de type booléen: prend la valeur \"TRUE\" quand les cellules du tableau doivent être masquées \"FALSE\" sinon. Permet de créer un fichier d'apriori) secret_no_pl name boolean variable indicates cells protection levels applied. secret_no_pl = NULL (default), protection levels applied cell gets TRUE status secret_var. cost_var Numeric variable allow change cost suppression cell secondary suppression, value cell default, can specified cell, fill NA cost need changed cells  (Variable numeric qui permet de changer la coût de suppression d'une cellule, pris en compte dans les algorithmes de secret secondaire.Par défaut le coût correspond à la valeur de la cellule.  peut être spécifié pour chacune des cellules, peut contenir des NA pour les coûts que l'ne souhaite pas modifier.) (nombre minimal de décimales à afficher (voir section 'Number decimals').) value Name column containing value cells.  (Nom de la colonne contenant la valeur des cellules) freq Name column containing cell frequency.  (Nom de la colonne contenant les effectifs pour une cellule) ip Interval Protection Level (10 default) suppress Algortihm secondary suppression (Tau-Argus batch syntax), parameters . ( Algorithme de gestion du secret secondaire (syntaxe batch de Tau-Argus), ainsi que les potentiels paramètres associés) split_tab boolean, whether reduce dimension 3 treating table dimension 4 5 (default FALSE) nb_tab_option strategy follow choose variables automatically splitting: \"min\": minimize number tables; \"max\": maximize number tables; \"smart\": minimize number tables constraint row count. limit numeric, used choose variable merge (nb_tab_option = 'smart') split table number row limit order avoid tauargus failures ... arguments tab_rtauargus function","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_rtauargus2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper of tab_rtauargus adapted for tab_multi_manager function. — tab_rtauargus2","text":"original tabular returned new column called Status, indicating status cell coming Tau-Argus : \"\" primary secret due frequency rule, \"B\" primary secret due dominance rule, \"D\" secondary secret \"V\" secret cell.","code":""},{"path":[]},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_rtauargus2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper of tab_rtauargus adapted for tab_multi_manager function. — tab_rtauargus2","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr) data(turnover_act_size)  # Prepare data with primary secret ---- turnover_act_size <- turnover_act_size %>%   mutate(     is_secret_freq = N_OBS > 0 & N_OBS < 3,     is_secret_dom = ifelse(MAX == 0, FALSE, MAX/TOT>0.85),     is_secret_prim = is_secret_freq | is_secret_dom   )  # Make hrc file of business sectors ---- data(activity_corr_table) hrc_file_activity <- activity_corr_table %>%   write_hrc2(file_name = \"hrc/activity\")  # Compute the secondary secret ---- options(   rtauargus.tauargus_exe =     \"Y:/Logiciels/TauArgus/TauArgus4.2.3/TauArgus.exe\" )  res <- tab_rtauargus2(   tabular = turnover_act_size,   files_name = \"turn_act_size\",   dir_name = \"tauargus_files\",   explanatory_vars = c(\"ACTIVITY\", \"SIZE\"),   hrc = c(ACTIVITY = hrc_file_activity),   totcode = c(ACTIVITY = \"Total\", SIZE = \"Total\"),   secret_var = \"is_secret_prim\",   value = \"TOT\",   freq = \"N_OBS\" )  # reduce dimensions feature data(datatest1) res_dim4 <- tab_rtauargus2(   tabular = datatest1,   dir_name = \"tauargus_files\",   explanatory_vars = c(\"A10\", \"treff\",\"type_distrib\",\"cj\"),   totcode = rep(\"Total\", 4),   secret_var = \"is_secret_prim\",   value = \"pizzas_tot_abs\",   freq = \"nb_obs_rnd\",   split_tab = TRUE ) } # }"},{"path":[]},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_rtauargus4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call Tau-Argus to protect a 4 or 5 dimensions table by splitting it in several 3 dimensions table. — tab_rtauargus4","text":"","code":"tab_rtauargus4(   tabular,   explanatory_vars,   dir_name,   secret_var,   totcode,   files_name = NULL,   hrc = NULL,   secret_no_pl = NULL,   cost_var = NULL,   value = \"value\",   freq = \"freq\",   ip = 10,   suppress = \"MOD(1,5,1,0,0)\",   safety_rules = paste0(\"MAN(\", ip, \")\"),   nb_tab_option = \"smart\",   limit = 14700L,   dfs_name = \"tab\",   ... )"},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_rtauargus4.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call Tau-Argus to protect a 4 or 5 dimensions table by splitting it in several 3 dimensions table. — tab_rtauargus4","text":"tabular data.frame contains tabulated data additional boolean variable indicates primary secret type boolean  ( data.frame contenant les données tabulées et une variable supplémentaire indiquant le secret primaire de type booléen.) explanatory_vars Vector explanatory variables  Variables catégorielles, sous forme  de vecteurs  Example : c(\"A21\", \"TREFF\", \"REG\") table crossing A21 x TREFF x REG (Variable indiquant le secret primaire de type booléen: prend la valeur \"TRUE\" quand les cellules du tableau doivent être masquées par le secret primaire, \"FALSE\" sinon. Permet de créer un fichier d'apriori) dir_name string indicated path directory save files (.rda, .hst, .txt, .arb, .csv) generated function. secret_var Nae boolean variable specifies secret, primary : equal \"TRUE\" cell concerned secret,\"FALSE\" otherwise.  exported apriori file.  (Variable indiquant le secret  de type booléen: prend la valeur \"TRUE\" quand les cellules du tableau doivent être masquées \"FALSE\" sinon. Permet de créer un fichier d'apriori) totcode Code(s) represent total categorical variable (see section 'Specific parameters' parameter's syntax). unspecified variable(neither default explicitly) set  rtauargus.totcode.  (Code(s) pour le total d'une variable catégorielle (voir section 'Specific parameters' pour la syntaxe de ce paramètre). Les variables non spécifiées (ni par défaut, ni explicitement) se verront attribuer la valeur de rtauargus.totcode.) files_name string used name files needed process. files name, extension different. hrc Informations hierarchical variables (see section 'Hierarchical variables').  (Informations sur les variables hiérarchiques (voir section 'Hierarchical variables').) (Caractère qui, répété n fois, indique que la valeur est à n niveaux de profondeur dans la hiérarchie.) secret_no_pl name boolean variable indicates cells protection levels applied. secret_no_pl = NULL (default), protection levels applied cell gets TRUE status secret_var. cost_var Numeric variable allow change cost suppression cell secondary suppression, value cell default, can specified cell, fill NA cost need changed cells  (Variable numeric qui permet de changer la coût de suppression d'une cellule, pris en compte dans les algorithmes de secret secondaire.Par défaut le coût correspond à la valeur de la cellule.  peut être spécifié pour chacune des cellules, peut contenir des NA pour les coûts que l'ne souhaite pas modifier.) (nombre minimal de décimales à afficher (voir section 'Number decimals').) value Name column containing value cells.  (Nom de la colonne contenant la valeur des cellules) freq Name column containing cell frequency.  (Nom de la colonne contenant les effectifs pour une cellule) ip Value safety margin % (must integer). (Valeur pour les intervalles de protection en %, doit être entier ) suppress Algortihm secondary suppression (Tau-Argus batch syntax), parameters . ( Algorithme de gestion du secret secondaire (syntaxe batch de Tau-Argus), ainsi que les potentiels paramètres associés) safety_rules Rules primary suppression Argus syntax, primary suppression dealt apriori file specify manual safety range :\"MAN(10)\" example. ( Règle(s) de secret primaire. Chaîne de caractères en syntaxe batch Tau-Argus. Si le secret primaire été traité dans un fichier d'apriori : utiliser \"MAN(10)\") nb_tab_option strategy follow choosing variables automatically: 'min': minimize number tables; 'max': maximize number tables; 'smart': minimize number tables constraint row count. limit numeric, used choose variable merge (nb_tab_option = 'smart') split table number row limit order avoid tauargus failures dfs_name name used write hrc files reducing dims ... additional parameters#'","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_rtauargus4.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call Tau-Argus to protect a 4 or 5 dimensions table by splitting it in several 3 dimensions table. — tab_rtauargus4","text":"original tabular returned additional variables indicating whether cell masked according Tau-Argus","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_rtauargus4.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Call Tau-Argus to protect a 4 or 5 dimensions table by splitting it in several 3 dimensions table. — tab_rtauargus4","text":"","code":"if (FALSE) { # \\dontrun{ #Please don't forget to specify the localisation of Tau-Argus in your computer options(   rtauargus.tauargus_exe =     \"Y:/Logiciels/TauArgus/TauArgus4.2.3/TauArgus.exe\" )  data(datatest1) expl_vars <- c(\"A10\", \"treff\",\"type_distrib\",\"cj\")  res_dim4 <- tab_rtauargus4(   tabular = datatest1,   files_name = \"datatest1\",   dir_name = \"tauargus_files\",   explanatory_vars = expl_vars,   totcode = setNames(rep(\"Total\", 4), expl_vars),   secret_var = \"is_secret_prim\",   value = \"pizzas_tot_abs\",   freq = \"nb_obs_rnd\",   verbose = TRUE,   nb_tab_option = \"min\",   verbose = TRUE )  # With a data of 5 variables  data(datatest2) expl_vars <- c(\"A10\", \"treff\",\"type_distrib\",\"cj\",\"nuts1\")  res_dim5 <- tab_rtauargus4(   tabular = datatest2,   files_name = \"datatest2\",   dir_name = \"tauargus_files\",   explanatory_vars = expl_vars,   totcode = setNames(rep(\"Total\", 5), expl_vars),   secret_var = \"is_secret_prim\",   value = \"pizzas_tot_abs\",   freq = \"nb_obs_rnd\",   verbose = TRUE,   nb_tab_option = \"min\", # split into the minimum of tables.   verbose = TRUE,   suppress = \"GH(1,100)\" # We use hypercube to save time. ) } # }"},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_to_treat.html","id":null,"dir":"Reference","previous_headings":"","what":"Unnest Data Frames to Create a Usable Flat Format — tab_to_treat","title":"Unnest Data Frames to Create a Usable Flat Format — tab_to_treat","text":"function processes nested data frames representing tables hierarchical clusters, transforms flat, easy--read format. column corresponds dplyr::distinct variable, simplifying downstream analysis use.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_to_treat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unnest Data Frames to Create a Usable Flat Format — tab_to_treat","text":"","code":"tab_to_treat(list_independent_tables)"},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_to_treat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unnest Data Frames to Create a Usable Flat Format — tab_to_treat","text":"list_independent_tables list nested tibbles, typically output grp_tab_in_cluster(), tibble represents independent tables grouped clusters.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_to_treat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unnest Data Frames to Create a Usable Flat Format — tab_to_treat","text":"list unnested tibbles, tibble contains following columns: table_name: name table. field: field name associated table. indicator: Indicators related table. spanning_*: Columns derived spanning metadata (expanded multiple columns). hrc_spanning_*: Columns derived hierarchical spanning metadata (expanded multiple columns).","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/tab_to_treat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unnest Data Frames to Create a Usable Flat Format — tab_to_treat","text":"","code":"if (FALSE) { # \\dontrun{ # Example data data(metadata_pizza_lettuce)  # Convert wide metadata to long format metadata_pizza_lettuce_long <- wide_to_long(metadata_pizza_lettuce)  # Identify hierarchical relationships list_hrc_identified <- identify_hrc(metadata_pizza_lettuce_long)  # Split tables into clusters list_split <- split_in_clusters(list_hrc_identified)  # Detect inclusion relationships list_desc_links <- create_edges(list_split)  # Group tables based on inclusion relationships list_translation_tables <- grp_tab_names(list_desc_links)  # Regroup tables within each cluster list_independent_tables <- grp_tab_in_cluster(list_split, list_translation_tables)  # Flatten the nested data for downstream use list_tab_to_treat <- tab_to_treat(list_independent_tables)  # View structure of the results str(list_tab_to_treat) } # }"},{"path":"https://inseefrlab.github.io/rtauargus/reference/tabulate_micro_data.html","id":null,"dir":"Reference","previous_headings":"","what":"tabulate grouped data with all margins, handling hierarchical variables — tabulate_micro_data","title":"tabulate grouped data with all margins, handling hierarchical variables — tabulate_micro_data","text":"tabulate grouped data margins, handling hierarchical variables","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/tabulate_micro_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tabulate grouped data with all margins, handling hierarchical variables — tabulate_micro_data","text":"","code":"tabulate_micro_data(   df,   cat_vars = NULL,   hrc_vars = NULL,   pond_var = NULL,   resp_var = NULL,   marge_label = \"Total\" )"},{"path":"https://inseefrlab.github.io/rtauargus/reference/tabulate_micro_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tabulate grouped data with all margins, handling hierarchical variables — tabulate_micro_data","text":"df data.frame data.table cat_vars vector categorical variables hierarchical hrc_vars named list (name = VAR final name, value = VAR current names) pond_var weight (NULL weight used) resp_var vector response variables (NULL compute frequency table) marge_label label margins (applied cat hrc variables)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/tabulate_micro_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tabulate grouped data with all margins, handling hierarchical variables — tabulate_micro_data","text":"tibble","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/tabulate_micro_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"tabulate grouped data with all margins, handling hierarchical variables — tabulate_micro_data","text":"","code":"library(data.table) #>  #> Attaching package: ‘data.table’ #> The following objects are masked from ‘package:dplyr’: #>  #>     between, first, last  data(\"indiv_dt\")  #Non hierarchical variables res_all_dtp <- tabulate_micro_data(   df = indiv_dt,   #categorical but not hierarchical variables   cat_vars = c(\"A10\", \"SIZE\",\"CJ\"),   #weight var   pond_var = \"WEIGHT\",   #response variable   resp_var = \"TURNOVER\",   # Labels of the margins   marge_label = \"Total\" ) str(res_all_dtp) #> Classes ‘data.table’ and 'data.frame':\t58 obs. of  6 variables: #>  $ A10         : chr  \"FZ\" \"BE\" \"GI\" \"Total\" ... #>  $ SIZE        : chr  \"Total\" \"Total\" \"Total\" \"tr1\" ... #>  $ CJ          : chr  \"Total\" \"Total\" \"Total\" \"Total\" ... #>  $ nb_obs      : num  11421 4082 22478 36112 1825 ... #>  $ TURNOVER_tot: num  11087582 3344353 22236029 34765446 1849758 ... #>  $ TURNOVER_max: num  8016 9373 9400 9400 6510 ... #>  - attr(*, \".internal.selfref\")=<externalptr>   #With one hierarchical variable res_all_dtph <- tabulate_micro_data(   df = indiv_dt,   #categorical but not hierarchical variables   cat_vars = c(\"SIZE\",\"CJ\"),   #categorical nested variables   hrc_vars = list(ACTIVITY = c(\"A10\",\"A21\")),   pond_var = \"WEIGHT\",   resp_var = c(\"TURNOVER\",\"PRODUCTION\"),   marge_label = \"Total\" ) str(res_all_dtph) #> Classes ‘data.table’ and 'data.frame':\t160 obs. of  8 variables: #>  $ ACTIVITY      : chr  \"FZ\" \"BE\" \"GI\" \"Total\" ... #>  $ SIZE          : chr  \"Total\" \"Total\" \"Total\" \"tr1\" ... #>  $ CJ            : chr  \"Total\" \"Total\" \"Total\" \"Total\" ... #>  $ nb_obs        : num  11421 4082 22478 36112 1825 ... #>  $ TURNOVER_tot  : num  11087582 3344353 22236029 34765446 1849758 ... #>  $ PRODUCTION_tot: num  2209740 670391 4435408 6931152 373839 ... #>  $ TURNOVER_max  : num  8016 9373 9400 9400 6510 ... #>  $ PRODUCTION_max: num  1612 1870 1876 1876 1317 ... #>  - attr(*, \".internal.selfref\")=<externalptr>"},{"path":"https://inseefrlab.github.io/rtauargus/reference/turnover_act_cj.html","id":null,"dir":"Reference","previous_headings":"","what":"data - Turnover broken down by business sector and type of companies (fake values). — turnover_act_cj","title":"data - Turnover broken down by business sector and type of companies (fake values). — turnover_act_cj","text":"tabular dataset containing turnover broken Business sector Type companies. Useful playing tab_ functions.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/turnover_act_cj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data - Turnover broken down by business sector and type of companies (fake values). — turnover_act_cj","text":"","code":"turnover_act_cj"},{"path":"https://inseefrlab.github.io/rtauargus/reference/turnover_act_cj.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"data - Turnover broken down by business sector and type of companies (fake values). — turnover_act_cj","text":"tibble/data frame 406 rows 5 variables: ACTIVITY business sector, hierarchical variables three levels described activity_corr_table dataset. root noted \"Total\" CJ Type companies (3 categories + overall category \"Total\") N_OBS Frequency, number companies TOT turnover MAX turnover company contributes cell.","code":""},{"path":[]},{"path":"https://inseefrlab.github.io/rtauargus/reference/turnover_act_nuts_size.html","id":null,"dir":"Reference","previous_headings":"","what":"data - Turnover broken down by business sector, NUTS, and size of French companies (fake values). — turnover_act_nuts_size","title":"data - Turnover broken down by business sector, NUTS, and size of French companies (fake values). — turnover_act_nuts_size","text":"tabular dataset containing turnover broken Business sector, NUTS (administrative areas) Size companies. data restricted three NUTS2 France (codes FR41, FR42 FR43) corresponding NUTS3 areas. Useful playing tab_ functions.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/turnover_act_nuts_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data - Turnover broken down by business sector, NUTS, and size of French companies (fake values). — turnover_act_nuts_size","text":"","code":"turnover_act_nuts_size"},{"path":"https://inseefrlab.github.io/rtauargus/reference/turnover_act_nuts_size.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"data - Turnover broken down by business sector, NUTS, and size of French companies (fake values). — turnover_act_nuts_size","text":"tibble/data frame 3 168 rows 6 variables: ACTIVITY business sector, hierarchical variables three levels described activity_corr_table dataset. root noted \"Total\" NUTS nuts - european denomination administrative levels. Hierarchical variables two levels (nuts2 nuts3) described nuts23_fr_corr_table dataset. \"FR41\", \"FR42\" \"FR43\" NUTS2 areas corresponding NUTS3 areas data. root noted \"Total_EAST\" SIZE size companies (Number employees three categories overall category \"Total\") N_OBS Frequency, number companies TOT turnover value euros MAX turnover company contributes cell.","code":""},{"path":[]},{"path":"https://inseefrlab.github.io/rtauargus/reference/turnover_act_size.html","id":null,"dir":"Reference","previous_headings":"","what":"data - Turnover broken down by business sector and size of French companies (fake values). — turnover_act_size","title":"data - Turnover broken down by business sector and size of French companies (fake values). — turnover_act_size","text":"tabular dataset containing turnover broken Business sector Size companies. Useful playing tab_ functions.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/turnover_act_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data - Turnover broken down by business sector and size of French companies (fake values). — turnover_act_size","text":"","code":"turnover_act_size"},{"path":"https://inseefrlab.github.io/rtauargus/reference/turnover_act_size.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"data - Turnover broken down by business sector and size of French companies (fake values). — turnover_act_size","text":"tibble/data frame 414 rows 5 variables: ACTIVITY business sector, hierarchical variables three levels described activity_corr_table dataset. root noted \"Total\" SIZE size companies (Number employees three categories overall category \"Total\") N_OBS Frequency, number companies TOT turnover value euros MAX turnover company contributes cell.","code":""},{"path":[]},{"path":"https://inseefrlab.github.io/rtauargus/reference/turnover_nuts_cj.html","id":null,"dir":"Reference","previous_headings":"","what":"data - Turnover broken down by NUTS and size of French companies (fake values). — turnover_nuts_cj","title":"data - Turnover broken down by NUTS and size of French companies (fake values). — turnover_nuts_cj","text":"tabular dataset containing turnover broken NUTS geographical localisation Type companies. Useful playing tab_ functions.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/turnover_nuts_cj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data - Turnover broken down by NUTS and size of French companies (fake values). — turnover_nuts_cj","text":"","code":"turnover_nuts_cj"},{"path":"https://inseefrlab.github.io/rtauargus/reference/turnover_nuts_cj.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"data - Turnover broken down by NUTS and size of French companies (fake values). — turnover_nuts_cj","text":"tibble/data frame 452 rows 5 variables: NUTS nuts - european denomination administrative levels. Hierarchical variables two levels (nuts2 nuts3) described nuts23_fr_corr_table dataset. root noted \"Total\" CJ Type companies (3 categories + overall category \"Total\") N_OBS Frequency, number companies TOT turnover value euros MAX turnover company contributes cell.","code":""},{"path":[]},{"path":"https://inseefrlab.github.io/rtauargus/reference/turnover_nuts_size.html","id":null,"dir":"Reference","previous_headings":"","what":"data - Turnover broken down by NUTS and size of French companies (fake values). — turnover_nuts_size","title":"data - Turnover broken down by NUTS and size of French companies (fake values). — turnover_nuts_size","text":"tabular dataset containing turnover broken NUTS geographical localisation Size companies. Useful playing tab_ functions.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/turnover_nuts_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data - Turnover broken down by NUTS and size of French companies (fake values). — turnover_nuts_size","text":"","code":"turnover_nuts_size"},{"path":"https://inseefrlab.github.io/rtauargus/reference/turnover_nuts_size.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"data - Turnover broken down by NUTS and size of French companies (fake values). — turnover_nuts_size","text":"tibble/data frame 460 rows 5 variables: NUTS nuts - european denomination administrative levels. Hierarchical variables two levels (nuts2 nuts3) described nuts23_fr_corr_table dataset. root noted \"Total\" SIZE size companies (Number employees three categories overall category \"Total\") N_OBS Frequency, number companies TOT turnover value euros MAX turnover company contributes cell.","code":""},{"path":[]},{"path":"https://inseefrlab.github.io/rtauargus/reference/var_to_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"General function to choose variables to merge, limiting the number of generated tables while ensuring not to generate tables that are too large. — var_to_merge","title":"General function to choose variables to merge, limiting the number of generated tables while ensuring not to generate tables that are too large. — var_to_merge","text":"General function choose variables merge, limiting number generated tables ensuring generate tables large.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/var_to_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General function to choose variables to merge, limiting the number of generated tables while ensuring not to generate tables that are too large. — var_to_merge","text":"","code":"var_to_merge(   dfs,   totcode,   hrcfiles = NULL,   nb_var = 4,   nb_tab_option = \"min\",   limit = 150 )"},{"path":"https://inseefrlab.github.io/rtauargus/reference/var_to_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General function to choose variables to merge, limiting the number of generated tables while ensuring not to generate tables that are too large. — var_to_merge","text":"dfs data.frame totcode named vector totals categorical variables hrcfiles named vector hrc files categorical variables nb_var number variables merge nb_tab_option strategy follow choosing variables automatically: 'min': minimize number tables; 'max': maximize number tables; 'smart': minimize number tables constraint row count. limit maximum allowed row count 'smart' case","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/var_to_merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"General function to choose variables to merge, limiting the number of generated tables while ensuring not to generate tables that are too large. — var_to_merge","text":"list vectors representing chosen variables merge","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/var_to_merge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"General function to choose variables to merge, limiting the number of generated tables while ensuring not to generate tables that are too large. — var_to_merge","text":"","code":"library(dplyr) data <- expand.grid(   ACT = c(\"Total\", \"A\", \"B\", \"A1\", \"A2\", \"B1\", \"B2\"),   GEO = c(\"Total\", \"GA\", \"GB\", \"GA1\", \"GA2\"),   SEX = c(\"Total\", \"F\", \"M\"),   AGE = c(\"Total\", \"AGE1\", \"AGE2\"),   stringsAsFactors = FALSE,   KEEP.OUT.ATTRS = FALSE ) %>%   as.data.frame()  data <- data %>% mutate(VALUE = 1:n())  hrc_act <- \"hrc_ACT.hrc\" sdcHierarchies::hier_create(root = \"Total\", nodes = c(\"A\",\"B\")) %>%   sdcHierarchies::hier_add(root = \"A\", nodes = c(\"A1\",\"A2\")) %>%   sdcHierarchies::hier_add(root = \"B\", nodes = c(\"B1\",\"B2\")) %>%   sdcHierarchies::hier_convert(as = \"argus\") %>%   slice(-1) %>%   mutate(levels = substring(paste0(level,name),3)) %>%   select(levels) %>%   write.table(file = hrc_act, row.names = FALSE, col.names = FALSE, quote = FALSE)  hrc_geo <- \"hrc_GEO.hrc\" sdcHierarchies::hier_create(root = \"Total\", nodes = c(\"GA\",\"GB\")) %>%   sdcHierarchies::hier_add(root = \"GA\", nodes = c(\"GA1\",\"GA2\")) %>%   sdcHierarchies::hier_convert(as = \"argus\") %>%   slice(-1) %>%   mutate(levels = substring(paste0(level,name),3)) %>%   select(levels) %>%   write.table(file = hrc_geo, row.names = FALSE, col.names = FALSE, quote = FALSE)  totcode <- c(SEX=\"Total\",AGE=\"Total\", GEO=\"Total\", ACT=\"Total\")  hrcfiles <- c(ACT = hrc_act, GEO = hrc_geo)  # Consistent: choose two hierarchical variables res1 <- var_to_merge(dfs = data,                                         totcode = totcode,                                         hrcfiles = hrcfiles,                                         nb_var = 2,                                         nb_tab_option = 'max') res1 #> $vars #> [1] \"GEO\" \"ACT\" #>  #> $max_row #> [1] 63 #>  #> $nb_tab #> [1] 12 #>  max(unlist(length_tabs(dfs = data,                        hrcfiles = hrcfiles,                        totcode = totcode,                        v1 = res1$vars[1], v2 = res1$vars[2]))) #> [1] 63  # Consistent: choose two non-hierarchical variables res2 <- var_to_merge(dfs = data,                                 totcode = totcode,                                 hrcfiles = hrcfiles,                                 nb_var = 2,                                 nb_tab_option = 'min') res2 #> $vars #> [1] \"SEX\" \"AGE\" #>  #> $max_row #> [1] 245 #>  #> $nb_tab #> [1] 2 #>  max(unlist(length_tabs(dfs = data,                        hrcfiles = hrcfiles,                        totcode = totcode,                        v1 = res2$vars[1], v2 = res2$vars[2]))) #> [1] 245  res3 <- var_to_merge(dfs = data,                                 totcode = totcode,                                 hrcfiles = hrcfiles,                                 limit = 200,                                 nb_var = 2,                                 nb_tab_option = 'smart') res3 #> $vars #> [1] \"SEX\" \"GEO\" #>  #> $max_row #> [1] 147 #>  #> $nb_tab #> [1] 4 #>  max(unlist(length_tabs(dfs = data,                        hrcfiles = hrcfiles,                        totcode = totcode,                        v1 = res3$vars[1], v2 = res3$vars[2]))) #> [1] 147  # Obtains 147, which is well below 200  res4 <- var_to_merge(dfs = data,                                 totcode = totcode,                                 hrcfiles = hrcfiles,                                 limit = 5,                                 nb_var = 2,                                 nb_tab_option = 'smart') res4 #> $vars #> [1] \"GEO\" \"ACT\" #>  #> $max_row #> [1] 63 #>  #> $nb_tab #> [1] 12 #>  max(unlist(length_tabs(dfs = data,                        hrcfiles = hrcfiles,                        totcode = totcode,                        v1 = res4$vars[1], v2 = res4$vars[2]))) #> [1] 63  # Receives a warning: unable to reach the announced value # There are 63 rows (equivalent to the max # -> this is what reduces the table size) # And the warning announces 63 rows, which is consistent with the output"},{"path":"https://inseefrlab.github.io/rtauargus/reference/wide_to_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Metadata from Wide to Long Format — wide_to_long","title":"Convert Metadata from Wide to Long Format — wide_to_long","text":"function transforms metadata data frame wide format long format. goal consolidate spanning variables single column, making table easier handle regardless number spanning variables described.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/wide_to_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Metadata from Wide to Long Format — wide_to_long","text":"","code":"wide_to_long(df_metadata)"},{"path":"https://inseefrlab.github.io/rtauargus/reference/wide_to_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Metadata from Wide to Long Format — wide_to_long","text":"df_metadata data frame wide format. must contain columns starting \"spanning\" \"hrc_spanning\", representing spanning variables hierarchical counterparts.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/wide_to_long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Metadata from Wide to Long Format — wide_to_long","text":"data frame long format. resulting data frame contains two columns: spanning: consolidated values spanning variables. additional columns retained original data frame. Rows names \"spanning\" \"hrc_spanning\" match, spanning values NA, filtered .","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/wide_to_long.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Metadata from Wide to Long Format — wide_to_long","text":"","code":"if (FALSE) { # \\dontrun{ data(metadata_pizza_lettuce)  # View the structure of the original data str(metadata_pizza_lettuce)  # Convert to long format metadata_pizza_lettuce_long <- wide_to_long(metadata_pizza_lettuce)  # View the structure of the resulting data str(metadata_pizza_lettuce_long) } # }"},{"path":"https://inseefrlab.github.io/rtauargus/reference/write_hrc.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a hrc file from microdata — write_hrc","title":"Creates a hrc file from microdata — write_hrc","text":"Creates hrc file (hierarchy) several variables set microdata set. Crée un fichier hrc (hiérarchie) à partir de plusieurs variables d'un jeu de microdonnées.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/write_hrc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a hrc file from microdata — write_hrc","text":"","code":"write_hrc(   microdata,   vars_hrc,   hierleadstring = getOption(\"rtauargus.hierleadstring\"),   hrc_filename = NULL,   fill_na = c(\"up\", \"down\"),   compact = TRUE,   hierlevels = NULL )"},{"path":"https://inseefrlab.github.io/rtauargus/reference/write_hrc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a hrc file from microdata — write_hrc","text":"microdata data.frame containing microdata.  ( data.frame contenant les microdonnées.) vars_hrc vector variable names constituting hierarchy, finest aggregated level. (vecteur des noms des variables constituant la hiérarchie, du niveau le plus fin au niveau le plus agrégé.) hierleadstring character , repeated n times, indicates value n levels deep hierarchy.  (caractère qui, répété n fois, indique que la valeur est à n niveaux de profondeur dans la hiérarchie.) hrc_filename name location produced hrc file. filled, temporary file. (nom et emplacement du fichier hrc produit. Si non renseigné, un fichier temporaire.) fill_na fill missing values, using variable : \"\" (default) : hierarchical variable level level immediately \"\" : hierarchical variable level immediately lower (remplissage d'éventuelles valeurs manquantes, à l'aide d'une autre variable : \"\" (défaut) : variable hiérarchique de niveau immédiatement supérieur \"\" : variable hiérarchique de niveau immédiatement inférieur ) compact prune branches repeating single value lowest level depth (TRUE default). (pour élaguer les branches répétant une unique valeur jusqu'au plus bas niveau de profondeur (TRUE par défaut).) hierlevels one variable specified vars_hrc, allows generate hierarchy according position characters string. example, hierlevels = \"2 3\" build hierarchy common code. (si une seule variable est spécifiée dans vars_hrc, permet de générer la hiérarchie selon la position des caractères dans la chaîne. Par exemple, hierlevels = \"2 3\" pour construire une hiérarchie département-commune à partir d'un code commune.)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/write_hrc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a hrc file from microdata — write_hrc","text":"name hrc file (useful case temporary file random name). (Le nom du fichier hrc (utile dans le cas d'un fichier temporaire au nom aléatoire).)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/write_hrc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates a hrc file from microdata — write_hrc","text":"function reconstructs variable hierarchy levels present data. variables vars_hrc must classified finest aggregated. relationship hierarchical level must application (mathematical sense term), .e. fine level must single corresponding aggregated level. creation hierarchy impossible condition met. name output file specified, temporary file created. deleted end session. path file can retrieved return value function. Missing values hierarchical variables imputed beforehand using another hierarchical variable (parameter fill_na). ascending strategy (\"\"), variables aggregated refined, vice versa downward strategy (\"\"). parameter compact allows create hierarchies variable depths. idea cut branches consisting single value repeated maximum depth (see examples). La fonction reconstitue la hiérarchie des variables à partir des niveaux présents dans les données. Les variables dans vars_hrc doivent être classées de la plus fine à la plus agrégée. La relation entre chaque niveau hiérarchique doit être une application (au sens mathématique du terme), c'est-à-dire que chaque niveau fin doit avoir un seul et unique niveau agrégé correspondant. La création de la hiérarchie est impossible si cette condition n'est pas remplie. Si le nom du fichier en sortie n'est pas spécifié, un fichier temporaire est créé. Il sera effacé en fin de session. Le chemin vers ce fichier peut être récupéré dans la valeur de retour de la fonction. Les valeurs manquantes présentes dans les variables hiérarchiques seront préalablement imputées à l'aide d'une autre variable hiérarchique (paramètre fill_na). En stratégie ascendante (\"\"), les variables sont parcourues de la plus agrégée à la plus fine, et inversement en stratégie descendante (\"\"). Le paramètre compact permet de créer des hiérarchies à profondeurs variables. L'idée est de couper les branches constituées d'une seule valeur répétée jusqu'à la profondeur maximale (voir exemples).","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/write_hrc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a hrc file from microdata — write_hrc","text":"","code":"# Full Hierarchy ............................  df_naf <- data.frame(   A10 = c(\"AZ\", \"BE\", \"BE\", \"BE\", \"BE\", \"BE\", \"BE\"),   A21 = c(\"A\" , \"C\" , \"B\" , \"C\" , \"C\" , \"C\" , \"B\" ),   A88 = c(\"01\", \"10\", \"06\", \"10\", \"12\", \"11\", \"07\") )  tmp_file <- write_hrc(df_naf, c(\"A88\", \"A21\", \"A10\")) file.show(tmp_file, pager = \"console\")  tmp_file <- write_hrc(df_naf, c(\"A88\", \"A10\"), hierleadstring = \":\") file.show(tmp_file, pager = \"console\")  # Hierarchy with varying depth  ...............  df <- data.frame(   niv1 = c(\"A\"  , \"A\"  , \"A\"  , \"B\"  , \"C\"  , \"C\" ),   niv2 = c(\"A1\" , \"A1\" , \"A2\" ,  NA  , \"C1\" , \"C2\"),   niv3 = c(\"A1x\", \"A1y\",  NA  ,  NA  , \"C1\" ,  NA ) )  tmp_file <- write_hrc(df, c(\"niv3\", \"niv2\", \"niv1\")) #> Warning: valeurs manquantes imputees pour construire la hierarchie file.show(tmp_file, pager = \"console\")  tmp_file <- write_hrc(df, c(\"niv3\", \"niv2\", \"niv1\"), compact = FALSE) #> Warning: valeurs manquantes imputees pour construire la hierarchie file.show(tmp_file, pager = \"console\")"},{"path":"https://inseefrlab.github.io/rtauargus/reference/write_hrc2.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a hrc file from correspondence table — write_hrc2","title":"Creates a hrc file from correspondence table — write_hrc2","text":"Creates .hrc hierarchy correspondence table.  Ecrit une hiérarchie .hrc à partir d'une table de correspondance.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/write_hrc2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a hrc file from correspondence table — write_hrc2","text":"","code":"write_hrc2(   corr_table,   file_name = NULL,   sort_table = FALSE,   rev = FALSE,   hier_lead_string = getOption(\"rtauargus.hierleadstring\"),   adjust_unique_roots = TRUE,   add_char = \"ZZZ\" )"},{"path":"https://inseefrlab.github.io/rtauargus/reference/write_hrc2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a hrc file from correspondence table — write_hrc2","text":"corr_table Data frame. Correspondence table, aggregated level detailed one  Table de correspondance, du niveau le plus agrégé au niveau le plus fin file_name character string. Name output file (.hrc extension ). NULL (default), file_name set name correspondence table  Nom du fichier en sortie (avec ou sans l'extension .hrc) ; Si NULL (par défaut), le nom du fichier sera identique au nom de la table de correspondance. sort_table boolean. TRUE, table sorted beforehand. (default FALSE) Si TRUE, la table sera triée avant traitement. (défaut à FALSE) rev boolean. TRUE, column order reversed. Si TRUE, inverse l'ordre des colonnes. hier_lead_string character. (Single) character indicating hierarchy depth .hrc file. default, value set current value mentionned package options (.e. \"@\" package startup).  Caractère unique repérant le niveau de profondeur dans le .hrc adjust_unique_roots boolean. TRUE (default) add fictional roots correspondence table, unique roots hrc file. tabular function, unique roots handled Tau-Argus.  Si TRUE la fonction va ajouter des feuilles fictives au fichier .hrc afin qu'il n'y ait plus de feuilles uniques. Les feuilles uniques peuvent générer des problèmes dans l'exécution de Tau-Argus add_char character adjust_unique_roots TRUE add_char string used create fictional roots, sure string create duplicates.string paste beginning unique root default = \"ZZZ\"  character Si adjust_unique_roots est TRUE add_char est l'élément qui sera utilisé afin de créer des feuilles fictives, il faut être sur que cela ne crée pas de doublons dans la hiérarchie.La chaine de caractère sera ajouté au début d'une feuille unique. Par defaut :\"ZZZ\"","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/write_hrc2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a hrc file from correspondence table — write_hrc2","text":"Invisible. Path written .hrc file.  Chemin vers le fichier .hrc.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/write_hrc2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates a hrc file from correspondence table — write_hrc2","text":"Creates .hrc hierarchy file adapted tau-Argus correspondence table fully describing . default, lines sorted alphabetically regroup identical levels. Ecrit un fichier de hiérarchie .hrc lisible par tau-Argus à partir d'une table de corrrespondance la décrivant complètement. Par défaut, les lignes du tableau seront triées afin de regrouper les niveaux de hiérarchie identiques.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/write_hrc2.html","id":"details-about-correspondence-table-amp-hrc","dir":"Reference","previous_headings":"","what":"Details about correspondence table & .hrc","title":"Creates a hrc file from correspondence table — write_hrc2","text":"Hierarchy files read tau-Argus expected follow strict pattern. function mimicks rigidities. 1 Ideal case correspondence table assumed look like: Columns must ordered aggregated detailed. reverse order, may want use rev = TRUE. case, please reorder columns hand. Hierarchy must well-nested : fine levels must systematically nested unique higher levels. compatible situation, split different hierarchies insure common cells correctly protected (seek documentation help needed). 2 Dealing NAs write_hrc2 function preferably used without NAs correspondence table. presence NAs, sort argument FALSE. Indeed, NAs sorted together , thus, separated expected place hierarchy. , introduce two common cases correspondence tables NAs. first one supported function, second one . Please careful dealing NAs check thoroughly resulting .hrc file, consider filling NAs beforehand. 2.1 Sparse hierarchies  Hierarchy sparse NAs inserted instead repeating given level. cases still issue warning presence NAs, pose problem, sort=FALSE set. 2.2 Non-uniform hierarchies Hierarchies non-uniform depth happen levels detailed  lowest detail, creating NAs. Processing file generate error following messages: Missing values last column correspondence table allowed. relevant, fill value previous column","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/write_hrc2.html","id":"d-tails-sur-les-tables-de-correspondance-et-le-hrc","dir":"Reference","previous_headings":"","what":"Détails sur les tables de correspondance et le .hrc","title":"Creates a hrc file from correspondence table — write_hrc2","text":"Tau-Argus attend des fichiers écrits avec précision. Certaines de ses rigidités sont reproduites par cette fonction. 1 Cas idéal Voici l'aspect général que devrait avoir une table de correspondance : Les colonnes doivent être ordonnées du niveau le plus agrégé au plus fin. Si elles sont en sens inverse, l'option rev = TRUE permet de les mettre en ordre. Dans toute autre situation, vous devrez d'abord les ordonner à la main. La hiérarchie doit être bien emboîtée : un niveau fin doit systématiquement correspondre à un unique niveau agrégé. Si cette exigence n'est pas remplie, il faudra créer plusieurs hiérarchies et faire en sorte que les cellules communes soient correctement protégées (au besoin, consultez la documentation ou chercher de l'aide). 2 Valeurs manquantes La fonction write_hrc2 doit être utilisée de préférence sans aucun NA dans votre table de correspondance. En présence de NAs, l'argument sort doit être à FALSE. En effet, les NAs seraient triés ensemble et, donc, être séparées de leur place attendue dans la hiérarchie. Ci-dessous, nous présentons deux cas courants où les tables de correspondance pourraient avoir NAs. Le premier cas est pris en charge par la fonction, le second ne l'est pas. Soyez prudent lorsque vous manipulez des NA et vérifiez soigneusement le fichier .hrc résultant ou envisagez de remplir les NAs à l'avance. 2.1 Hiérarchies creuses  Une hiérarchie est creuse si des NAs sont insérées au lieu de répéter un niveau donné verticalement. De tels cas émettent toujours un avertissement du fait de la présence de NA, mais ne posent aucun problème, si utilise sort=FALSE. 2.2 Hiérarchies non-uniformes Les hiérarchies à profondeur non-uniforme correspondent aux cas où certains niveaux ne sont pas détaillés jusqu'au bout, la fin de certaines lignes étant manquante. Le traitement d'un tel fichier générera une erreur avec les messages suivants : Missing values last column correspondence table allowed. relevant, fill value previous column","code":""},{"path":"https://inseefrlab.github.io/rtauargus/reference/write_hrc2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a hrc file from correspondence table — write_hrc2","text":"","code":"# 1. Standard example. Table will be written on your working directory. # Exemple standard. La table sera écrite dans votre répertoire de travail. astral <- data.frame(   type      = c(\"planet\", \"planet\", \"star\", \"star\", \"star\", \"other\", \"other\"),   details   = c(     \"telluric\", \"gasgiant\", \"bluestar\", \"whitedwarf\",     \"reddwarf\", \"blackhole\", \"pulsar\") ) path <- write_hrc2(astral) if (FALSE) read.table(path) # \\dontrun{} # Note that line order was changed ('other' comes before 'planet'), to no # consequence whatsoever for Tau-Argus. # Remarque : l'ordre des lignes a été modifié ('other' arrive avant 'planet'), # ce qui n'a aucune conséquence pour Tau-Argus.  # Wrong column order: # Mauvais ordonnancement des colonnes : astral_inv <- data.frame(   details = c(     \"telluric\", \"gasgiant\", \"bluestar\", \"whitedwarf\",     \"reddwarf\", \"blackhole\", \"pulsar\"),     type = c(\"planet\", \"planet\", \"star\", \"star\", \"star\", \"other\", \"other\") ) path <- write_hrc2(astral_inv) #> Warning: There are duplicates in the expectedly most detailed level #>     (last column). Please be sure columns are rightfully ordered. if (FALSE) read.table(path) # \\dontrun{} # Because of the inverted order, everything is written backwards : planet is a # subtype of gasgiant, etc. # À cause de l'inversion des colonnes, tout est écrit à l'envers : planet est # devenu une sous-catégorie de gasgiant, par exemple.  # Correction : path <- write_hrc2(astral_inv, rev = TRUE) if (FALSE) read.table(path) # \\dontrun{}  # 2.1 Sparse case # Cas creux astral_sparse <- data.frame(   type      = c(\"planet\", NA, \"star\", NA, NA, \"other\", NA),   details   = c(     \"telluric\", \"gasgiant\", \"bluestar\", \"whitedwarf\",     \"reddwarf\", \"blackhole\", \"pulsar\") ) # NAs in general are risky, but, in this case, the function works well. # Les valeurs manquantes causent un risque, mais, dans ce genre de cas, # la fonction a le comportement attendu. path <- write_hrc2(astral_sparse) #> Warning: Missing values in correspondence table will be filled in (see documentation). #>             If unintended, this can cause errors when using the .hrc file with tau-Argus. if (FALSE) read.table(path) # \\dontrun{}  # 2.2 Non-uniform depth # Hiérarchie non-uniforme astral_nu <- data.frame(   type      = c(\"planet\", \"planet\", \"star\", \"other\", \"other\"),   details  = c(\"telluric\", \"gasgiant\", NA, \"blackhole\", \"pulsar\") ) # The following code will generate an error # (see section Details about correspondence table & .hrc) if (FALSE) { # \\dontrun{ path <- write_hrc2(astral_nu) } # } #To fix the issue, you have to fill in the NAs beforehand.  astral_nu_fill <- data.frame(   type      = c(\"planet\", \"planet\", \"star\", \"other\", \"other\"),   details  = c(\"telluric\", \"gasgiant\", \"star\", \"blackhole\", \"pulsar\") ) # The following code will work path <- write_hrc2(astral_nu_fill) if (FALSE) read.table(path) # \\dontrun{}"},{"path":"https://inseefrlab.github.io/rtauargus/news/index.html","id":"rtauargus-12999-dev","dir":"Changelog","previous_headings":"","what":"rtauargus 1.2.999-dev","title":"rtauargus 1.2.999-dev","text":"[02/2025] Development function analyse_metadata() automatically analyses metadata input dataframe describing tables published. function returns dataframe describes tables protect indicates tables treated together (.e. using tab_multi_manager()). Development function template_formatted() (Eurostat template) input extract Eurostat template (relevant columns). goes cells described template returns metadata underlying tables. metadata stored dataframe right format input analyse_metadata() function. poster presenting functions presented NTTS2025, available : “https://github.com/InseeFrLab/automatic_analysis_poster_NTTS2025”.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/news/index.html","id":"rtauargus-120","dir":"Changelog","previous_headings":"","what":"rtauargus 1.2.0","title":"rtauargus 1.2.0","text":"[01/2024] Implementation method tackle tables 4/5 dimensions. method quickly explained use shown specific vignette (french). paper explaining deeply idea modus operandi available : “https://github.com/InseeFrLab/dims_reduction_tables_workshop_20231215”. Implementation function tabulate_micro_data() compute tabular data microdata file. function can create frequency magnitude tabular data hierarchical variables. tabular data computed contains information compute primary secret according frequency rule (1,k)-dominance rule. Resolution malfunction dealing costs. rtauargus() function renamed properly micro_rtauargus(). arguments behaviour remain .","code":""},{"path":"https://inseefrlab.github.io/rtauargus/news/index.html","id":"rtauargus-112","dir":"Changelog","previous_headings":"","what":"rtauargus 1.1.2","title":"rtauargus 1.1.2","text":"[01/02/2023] Improvement handling Interval Protection Level using tab_multi_manager(): IP levels now set automatically apriori files actual Primary Suppressed Cells . ensures IP applied actual primary secret limits propagation suppressions due IP manipulation. particular cases, can lead significantly reduce suppressions.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/news/index.html","id":"rtauargus-110","dir":"Changelog","previous_headings":"","what":"rtauargus 1.1.0","title":"rtauargus 1.1.0","text":"[01/10/2022] tab_multi_manager(): argument alt_hrc alt_totcode handle non-nested hierarchies.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/news/index.html","id":"rtauargus-100","dir":"Changelog","previous_headings":"","what":"rtauargus 1.0.0","title":"rtauargus 1.0.0","text":"[01/09/2022] English documentation tab_multi_manager(): function protect several tables . tab_arb() : argument value now called response_var tab_rda() function. tab_arb() : argument apriori now called hst_filename tab_rda() function. write_hrc2() : new function creat hrc file correspondence table","code":""},{"path":"https://inseefrlab.github.io/rtauargus/news/index.html","id":"rtauargus-050","dir":"Changelog","previous_headings":"","what":"rtauargus 0.5.0","title":"rtauargus 0.5.0","text":"[18/04/2022] Ajout de fonctions pour gérer le secret directement sur des données tabulées. Addition functions manage confidentiality directly tabular data.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/news/index.html","id":"rtauargus-043","dir":"Changelog","previous_headings":"","what":"rtauargus 0.4.3","title":"rtauargus 0.4.3","text":"[13/10/2021] projet transféré dans le groupe outilsconfidentialite","code":""},{"path":"https://inseefrlab.github.io/rtauargus/news/index.html","id":"rtauargus-042","dir":"Changelog","previous_headings":"","what":"rtauargus 0.4.2","title":"rtauargus 0.4.2","text":"[17/12/2020] projet migré vers gitlab.insee.fr","code":""},{"path":"https://inseefrlab.github.io/rtauargus/news/index.html","id":"rtauargus-041","dir":"Changelog","previous_headings":"","what":"rtauargus 0.4.1","title":"rtauargus 0.4.1","text":"[18/10/2019] rtauargus_plus() : extension de la fonction rtauargus pour un grand nombre de croisements (ayant tous les mêmes caractéristiques). Réduit le temps d’exécution par rapport à la version “normale”.","code":""},{"path":"https://inseefrlab.github.io/rtauargus/news/index.html","id":"rtauargus-040","dir":"Changelog","previous_headings":"","what":"rtauargus 0.4.0","title":"rtauargus 0.4.0","text":"[04/09/2019] rtauargus() peut désormais prendre en entrée un couple de fichiers asc et rda (au lieu d’un data.frame). Permet de lancer un traitement dans le cas où ces fichiers texte de microdonnées existent déjà. nouveau nom de run_tauargus (nom plus explicite, principalement pour éviter la confusion avec la fonction rtauargus). L’ancien nom reste pour l’instant utilisable : un message avertit du changement. Il sera remplacé par un message d’erreur dans une prochaine version. existence du logiciel sur le poste ; existence des fichiers asc et rda ; présence des variables à utiliser (croisements, variable de réponse, …) dans les métadonnées (fichier rda) ; existence des dossiers où vont être écrits les résultats. Si absents, possibilité de les créer automatiquement (paramètre missing_dir avec option associée rtauargus.missing_dir). import() : si des fichiers apriori ont été utilisés, stockage du nom de ces fichiers dans les métadonnées (attributs) de l’objet R créé améliorations de la documentation (rubriques d’aide et vignette)","code":""},{"path":"https://inseefrlab.github.io/rtauargus/news/index.html","id":"rtauargus-031","dir":"Changelog","previous_headings":"","what":"rtauargus 0.3.1","title":"rtauargus 0.3.1","text":"[11/07/2019] informe de l’absence de tauargus.exe au chargement du package diverses améliorations de la documentation (rubriques d’aide et vignette) utilise valeurs par défaut des options en cas d’effacement accidentel par l’utilisateur","code":""},{"path":"https://inseefrlab.github.io/rtauargus/news/index.html","id":"rtauargus-030","dir":"Changelog","previous_headings":"","what":"rtauargus 0.3.0","title":"rtauargus 0.3.0","text":"[29/03/2019] ajoute paramètre apriori (fichiers hst) conserve les noms de tabulations en sortie si précisés dans explanatory_vars vérification plus rigoureuse de certains paramètres","code":""},{"path":"https://inseefrlab.github.io/rtauargus/news/index.html","id":"rtauargus-021","dir":"Changelog","previous_headings":"","what":"rtauargus 0.2.1","title":"rtauargus 0.2.1","text":"[03/12/2018] write_hrc() : prise en compte de davantage de cas particuliers améliore vignette","code":""},{"path":"https://inseefrlab.github.io/rtauargus/news/index.html","id":"rtauargus-020","dir":"Changelog","previous_headings":"","what":"rtauargus 0.2.0","title":"rtauargus 0.2.0","text":"[14/08/2018] implémente tableaux liés (paramètre linked) corrige extensions de fichiers pour \"5\" (.tab) et \"6\" (.jj) corrige bug quand un seul paramètre à suppress, par exemple MOD(1) write_hrc() : nouvelle fonction créant un fichier .hrc à partir de variables hiérarchiques présentes dans les microdonnées implémente paramètres missing, totcode et codelist simplifie syntaxe pour paramètre hrc (cohérente avec nouveaux paramètres) nouveau paramètre hierleadstring (valeur par défaut dans l’option de package rtauargus.hierleadstring) efface les options du package à son déchargement corrections diverses documentation","code":""},{"path":"https://inseefrlab.github.io/rtauargus/news/index.html","id":"rtauargus-010","dir":"Changelog","previous_headings":"","what":"rtauargus 0.1.0","title":"rtauargus 0.1.0","text":"[01/08/2018] Première version stable.","code":""}]
