---
title: "Comment poser du secret sur des tableaux à 4 ou 5 dimensions avec `rtauargus`?"
subtitle: <h2>![logo rtauargus](../man/figures/rtauargus_logo_small.png)</h2>
output:
  rmarkdown::html_vignette:
    toc: true
    toc_depth: 2
    number_section: true
    fig_caption: true
vignette: >
  %\VignetteIndexEntry{Gestion des tableaux à 4 ou 5 dimensions}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

<!--
  NE JAMAIS MODIFIER DIRECTEMENT `rtauargus.Rmd`
  MODIFIER `rtauargus.Rmd.orig` ET EXECUTER `precompilation.R`
  Voir : https://ropensci.org/technotes/2019/12/08/precompute-vignettes
-->

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  echo = TRUE,
  collapse = TRUE,
  comment = "#>",
  warning = FALSE
)
knitr::opts_knit$set(root.dir = getwd())
```

## Introduction

Les algorithmes de pose du secret secondaire tels qu'Optimal ou Modular implémentés
dans `Tau-Argus` reposent sur un programme d'optimisation sous contraintes. Le
nombre de ces constraintes devient très difficile à gérer - du moins dans un temps
raisonnable - pour `Tau-Argus`. Ainsi, il est quasi-impossible de poser du secret
sur un tableau à 5 dimensions directement avec `Tau-Argus` et les résultats
fournis par le logiciel lors du traitement d'un tableau de 4 dimensions sont
accompagnés d'un avertissement. Par ailleurs, un tableau à 4 dimensions dont l'une
est hiérarchique est un problème, en général, très difficile pour `Tau-Argus`.

Le package `rtauargus` offre désormais la possibilité de protéger des tableaux
de 4 à 5 dimensions. Pour les tableaux de 4 dimensions, la protection est
même plus rapide et permet de traiter des tableaux plus grands encore (en nombre
de lignes).

Cette nouvelle fonctionnalité est mise à disposition dans les fonctions
`tab_rtauargus` et `tab_multi_manager` avec l'argument `split_tab`.
Quand il est renseigné à `TRUE`, les fonctions réduisent
la dimension d'un tableau de 4 ou 5 dimensions en construisant un certain nombre
de tableaux liés de 3 dimensions chacun. Ces tableaux contiennent exactement les
mêmes cellules que le tableau original. Puis, la fonction `tab_multi_manager` est
appelée pour organiser la pose du secret sur l'ensemble de ces tableaux.
`A la fin du processus, on récupère la table de départ - avec ses dimensions
originales - augmentée des informations sur le secret secondaire.

Ainsi, point important à retenir, la pose du secret secondaire est toujours
réalisé par les algorithmes de Tau-Argus, le package `rtauargus` de réduire les
dimensions et d'assurer la cohérence du secret entre les différents sous-tableaux
liés entre eux.

Cette méthode est susceptible de générer plus de secret qu'une attaque directe
du problème.

Pour utiliser cette fonctionnalité, il est nécessaire que l'utilisateur
pose de lui-même le secret primaire en amont.



### Comment la réduction d'un tableaux à 4 ou 5 dimensions est-elle réalisée ?

Pour passer de 5 à 3 dimensions, on utilise deux fois de suite la méthode
utilisée pour passer de 4 à 3 dimensions.

Le passage de 4 à 3 dimensions consiste d'abord à fusionner deux des quatre
dimensions du tableau original, c'est-à-dire qu'on remplace deux des variables
de départ par une seule dont les modalités sont la fusion des modalités des
deux variables choisies.


Dans l'exemple ci-dessous, on fusionne par exemple les deux variables `SEX` et
`AGE` pour n'en faire qu'une seule appelée `SEX_AGE`.

<div style="text-align: center;">
<img src="tab_SEX_AGE.png" alt="base_tab" width="600" height="500">
</div>


Mais, la nouvelle variable contient des modalités non-emboîtées entre elles,
comme, par exemple, les modalités `Femme_Total` et `Ensemble_Adulte`.

<div style="text-align: center; font-size: 20px;">
    Total_Ensemble = Total_Adulte + Total_Enfant
</div>

<div style="text-align: center; font-size: 20px;">
    Total_Ensemble = Femme_Ensemble + Homme_Ensemble
</div>

Or la gestion des hiérarchies non-emboîtées est possible en appelant la fonction
`tab_multi_manager` sur une liste composée des différents sous-tableaux liés.

Ici, la fusion nécessite la construction de deux sous-tableaux, chacun ayant une
varaible SEX__AGE parfaitement hiérarchique.

Cet exemple est le plus simple qu'il soit: en fusionnant deux variables
non hiérarchiques, on est amené à générer deux sous-tableaux. Lorsque l'une des
variables fusionnées est elle-même hiérarchique, la construction des sous-tableaux
s'appuie sur les différents sous-totaux présents dans la hiérarchie, comme
indiqué dans la figure ci-dessous:

<div style="text-align: center;">
  <img src="GEO.png" alt="hierarchie" width="375" height="150">
</div>


## Pour aller plus loin

- [Une fiche plus théorique](https://inseefrlab.github.io/rtauargus/articles/split_tab_theorie_fr.html)
- [Une fiche présentant les résultats de quelques tests](https://inseefrlab.github.io/rtauargus/articles/split_tab_tests.html)


### Utilisation de différents paramètres liées à split_tab

Comme dit dans l'introduction `nb_tabs` permet de demander le nombre de tableaux que l'on veut faire entre min max et le smart.

Le `min` choisi construit le minimum de table a 3 dimensions lors de la fusion donc il met en priorité la fusion de variables non hiérarchiques .
Le `max` au contraire construit le maximum de table a 3 dimensions possible lors de la fusion et prends en priorité les variables hiérarchiques .
Le `smart` lui contruit le minimum de table a 3 dimensions lors de la fusion des variables sachant qu'elles ont toutes un nombre de ligne en dessous de la limite.

Après ce premier traitement. On utilise la fonction `sp_split_tab` dans `reduce_dims` qui elle prend les tables toujours au-dessus de la limite de taille posé et les replite par rapport aux modalités des hiérarchies créées par les variables fusionnées. Bien évidemment il est possible que la limite de taille soit toujours atteintes et dans ce cas nous affichons un Warning et prevenons l'utilisateur que la table puisse être trop grande.

## En pratique


### Préparation des données

```{r}
library(tictoc)
library(dplyr)
library(rtauargus)
```

```{r}
options(
  rtauargus.tauargus_exe =
    "Y:/Logiciels/TauArgus/TauArgus4.2.3/TauArgus.exe"
)
```


```{r}
data("datatest1")
str(datatest1)
```


### Préparation des arguments pour `tab_rtauargus`

```{r}

totcode <- c(treff ="Total",cj ="Total", A10 = "Total", type_distrib ="Total")
explanatory_vars<- names(totcode)

```

### Pose du secret primaire

```{r}
datatest1_with_prim <- datatest1 %>%
    mutate(
      is_secret_freq = (nb_obs > 0 & nb_obs < 3),
      is_secret_dom = (pizzas_tot != 0) & (pizzas_max > 0.85*pizzas_tot),
      pizzas_tot= round(abs(pizzas_tot),2)
    ) %>%
    mutate(
      is_secret_prim =  is_secret_freq ,
      nb_obs = ceiling(nb_obs)
    )
```

### Pose du secret primaire avec rtauargus

Pour poser le secret secondaire, on utilise la fonction `tab_rtauargus` avec
l'argument `split_tab = TRUE`. Ainsi, Tau-Argus n'aura pas à traiter directement
le secret sur la table à 4 dimensions. En effet, la fonction `tab_rtauargus` va
découper la table originale en un certain nombre de tables qui seront protégées
comme des tables liées avec un appel à `tab_multi_manager`.


```{r}
tictoc::tic()
res_wi_split <- tab_rtauargus(
    tabular = datatest1_with_prim,
    files_name = "datatest1",
    dir_name = "example_1",
    explanatory_vars = explanatory_vars,
    totcode = totcode,
    value = "pizzas_tot",
    freq = "nb_obs",
    secret_var = "is_secret_prim",
    verbose = TRUE,
    split_tab = TRUE
)
tictoc::toc()
```

La réduction de dimensions a conduit à construire deux sous-tableaux de 3
dimensions à partir du tableau original.

```{r}
str(res_wi_split)
```

```{r}
res_wi_split %>%
    rename_with( ~"final_suppress", last_col()) %>%
    mutate(
      flag = case_when(
        is_secret_freq ~ "A",
        is_secret_dom ~ "B",
        final_suppress ~ "D",
        TRUE ~"V"
      )
    ) %>%
    count(flag)
```

## Comparaison avec une pose du secret sans réduire la dimension de la table

`Tau-Argus` est en capacité de poser le secret secondaire sur un tableau à 4
dimensions avec Modular, mais, en plus d'émettre un avertissement sur le
fait qu'avec ce nombre de dimensions, la qualité du résultat n'est pas garantie,
il est aussi beaucoup plus long à poser le secret secondaire que lorsqu'il
traite deux tables liées issues du tableau original.

```{r}
tictoc::tic()
res_wo_split <- tab_rtauargus(
    tabular = datatest1_with_prim,
    files_name = "datatest1",
    dir_name = "example_1/wo_split",
    explanatory_vars = explanatory_vars,
    totcode = totcode,
    value = "pizzas_tot",
    freq = "nb_obs",
    secret_var = "is_secret_prim",
    verbose = TRUE,
    split_tab = FALSE
)
tictoc::toc()
```

Avec seulement 689 lignes at aucune variable hiérarchique, la pose directe du
secret prend environ 5 minutes à `Tau-Argus`.

```{r}
res_wo_split %>%
    mutate(
      flag = case_when(
        is_secret_freq ~ "A",
        is_secret_dom ~ "B",
        TRUE ~ Status
      )
    ) %>%
    count(flag)
```

On peut observer que le traitement de la table à 4 dimensions directement
génère un masque un peu moins chargé en secret: 255 cellules en secret secondaire,
contre 280 avec une réduction de dimensions.

Il est difficile d'anticiper cette différence puisqu'elle est très dépendante
de la structuration des données, de la présence du secret primaire au sein du
tableau original et de la façon dont les sous-tableuax vont être construits.

## Options complémentaires

La réduction de dimensions bénéficie de deux options complémentaires, qui doivent
être manipulées par des mains expertes.

- l'argument `nb_tab` permet d'orienter la réduction de dimensions selon les options
suivantes:
  - `nb_tab = "min"`: la réduction produira le minimum de sous-tableaux possibles,
  - `nb_tab = "max"`: la réduction produira le maximum de sous-tableaux possibles,
  - `nb_tab = "smart"` (défaut): la réduction s'adaptera en fonction d'une taille
  limite des tableaux fixée par avance, quand cela sera possible.
- l'argument `limit` permet de fixer un nombre maximum de lignes souhaitées
par sous-tableau. Il est fixé par défaut à `14500L`, suite à différents tests
réalisés. Cette limite est utilisée lorsque `nb_tab = "smart"`. Elle peut être
dépassée dans les faits.

Il est déconseillé de changer ces deux options dans un premier temps.

- L'argument `nb_tab = "min"` est intéressant en termes de secret car c'est
l'option qui fournira le moins de sur-secret dû à la mise en cohérence du secret
entre les sous-tableaux. Il peut-être intéressant à utiliser si la table de départ
contient un nombre de lignes raisonnables,c'est-à-dire si chaque dimension n'est
pas trop ventilée.
- L'argument `nb_tab = "max"` créant le plus de tableuax possibles engendrera
nécessairement plus de secret, mais elle pourra convenir dans certains cas de
tableaux d'origine très longs qui nécessitent d'être beaucoup découpés pour
que la pose du secret soit possible sur `Tau-Argus`.


## Détail de la vignette

- Authors: **<a href="mailto:julien.jamme@insee.fr">Julien Jamme</a>** &
**<a>Nathanael Rastout</a> ** & **<a> Andre-Raymond Socard </a>** &
**<a> Wistan Pomel </a>**
- Last update: **`r format(Sys.time(), "%d/%m/%Y")`**
- Version of rtauargus used: **`r packageVersion("rtauargus")`**
- Version of &tau;-Argus used : **TauArgus 4.2.3**
- R version used :  **`r packageVersion("base")`**

  <p style="text-align: right">
  <a href="#TOC" title="Back to summary">summary &uarr;</a>
  </p>

