% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tab_to_treat.R
\name{dataframe_result}
\alias{dataframe_result}
\title{Combine List of Dataframes into a Single Dataframe with Cluster Identification}
\usage{
dataframe_result(list_independent_tables)
}
\arguments{
\item{list_independent_tables}{A list of tibbles, typically the output of
\code{grp_tab_in_cluster()} or \code{tab_to_treat()}. Each tibble contains metadata
for tables grouped within a specific cluster.}
}
\value{
A single dataframe (\code{dfMetadata_to_treat}) with the following structure:
\itemize{
\item \code{cluster}: Identifier for the cluster each table belongs to.
\item \code{table_name}: The name of the table.
\item \code{field}: The field name associated with the table.
\item \code{indicator}: Indicators related to the table.
\item \verb{spanning_*}: Columns derived from the spanning metadata, ordered by numeric suffix.
\item \verb{hrc_spanning_*}: Columns derived from hierarchical spanning metadata, ordered by numeric suffix.
}
}
\description{
This function consolidates a list of dataframes, each representing a cluster of tables,
into a single dataframe. It includes an additional column, \code{cluster}, to identify
the cluster each table belongs to.
}
\examples{
library(dplyr)

# Example data
data(metadata_pizza_lettuce)

# Convert wide metadata to long format
metadata_pizza_lettuce_long <- wide_to_long(metadata_pizza_lettuce)

# Identify hierarchical relationships
list_hrc_identified <- identify_hrc(metadata_pizza_lettuce_long)

# Split tables into clusters
list_split <- split_in_clusters(list_hrc_identified)

# Detect inclusion relationships
list_desc_links <- create_edges(list_split)

# Group tables based on inclusion relationships
list_translation_tables <- grp_tab_names(list_desc_links)

# Regroup tables within each cluster
list_independent_tables <- grp_tab_in_cluster(list_split, list_translation_tables)

# Flatten the nested data for downstream use
dataframe_cluster_id <- dataframe_result(list_independent_tables)

# View structure of the results
str(dataframe_cluster_id)

}
